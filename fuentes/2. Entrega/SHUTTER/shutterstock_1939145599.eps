%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Colleagues in coworking space flat hand drawn Premium Vector-temp_01.eps
%%Creator: Adobe Illustrator(R) 24.0
%%For: progr
%%CreationDate: 3/19/2021
%%BoundingBox: 0 0 2451 1634
%%HiResBoundingBox: 0 0 2450.7586 1633.3334
%%CropBox: 0 0 2450.7586 1633.3334
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.0.2 x373 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 17822 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD33FFAFAFFD19FFAFAFFD64FF84FD19FF84FD64FFAFA9FD19FFAF
%FD65FF84FD17FFA8A85984A8FD62FFAFAFFD16FFA9603560355A84FD62FF
%84FD15FFA860355A355A355984FD60FFA9AFFD15FFA93560595A59605960
%FD61FF84FD15FF5A35355A3559355A35AFFD5FFFAFAFFD15FFA984858484
%84858484A9FD4CFFA8CAC4CAA2FD0FFF84FD6AFFC4CACAFFFFFFC4CAFD0C
%FFAFA9FD3AFFAFFFA8FFAFFFAFFD28FFA1CBFFFFA8FFFFFFA2CAFD0CFF84
%FD11FFA8FFA8FFA8FFA9FFA8FD1FFFA8AFA8AFA8AFA8AFA8AFA9FD24FFCA
%CBFFFFFFAFFD04FFC4FD0BFFA884AFFD0FFFA9FFA9AFA9FFA9AFA9FFAFFF
%AFFD1BFFA8FFAFAFA9FFAFAFA9FFA9AFAFFD23FFC4FD04FFA8FD05FFC4FD
%08FFA9595A355A5AFD0DFFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8FFA9
%FD14FFAFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8FD22FFC4FD04FFA8A8FFFF
%FFCBCAFD07FFAF595A5960595A5AFD0BFFAFAFA9AFA8FFA9AFA8FFA9AFA8
%FFA9AFA8AFA9AFA8FD13FFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFFD21FF
%A8CAFD04FF7D7EA8A8A8A9A1FD07FF595A355A355A355984FD0BFFA8AFA8
%AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8FD0BFFA8AFA8AFA8
%AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFFD21FFC4FD0AFFCAFD06FFA960595A
%5960595A3585FD0CFFA9AFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAF
%AFA9FFAFFFAFFD07FFAFFFA9AFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9
%FD0AFFAFAFA8AFA8AFA8FD10FFCACBFD08FFCAA2FD06FFAF5960595A5960
%595A7EFD0BFFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8AFA8FFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8FD0AFFA9AFA8FFA9AFA8FFAFFD0DFFCACAFD08FFC4FD09FFAFFD13
%FFA9AFA9AFA8FFA9AFA8FFA9AFA8FFA9CAA7CAC9C9A7CAC9CAA7CAC9FFA9
%FFAFAFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9FD0AFFA8
%AFA8AFA8AFA8AFA8AFA8AFA8FD0BFFA1CAFD06FFA1CAFD0EFFA8FFA8AFA8
%AFA8FFA8FD07FFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA7CFA8CFCACFA8FFA7
%76709AA1A8A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8
%AFA8FD08FFA9FFAFAFA9FFAFAFA9FFAFAFA9FFA9AFAFFD09FFCACACAFFCA
%CAC4FD0DFFAFAFA9FFA9AFA9FFA9AFA9FFAFFD07FFA9AFA9FFAFAFA9FFAF
%AFA9FFA9CFFD07FFA1709B767676A177A1A8FFAFAFA9FFAFAFA9FFAFAFA9
%FFAFAFA9FFAFAFA9FFA9FD09FFAFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFAFFD07FFCACAA2CACAFD0BFFA9AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFFD06FFA8AFA8AFA8AFA8AFA8AFA8AFA7FD06FFCA7076707676767076
%7076A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFAFFD08FFA9AF
%A8FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8AFAFFD15FFA8AFA9AFA8FFA9AF
%A8FFA9AFA8FFA9AFA8FFA9FD07FFA9AFA8FFA9AFA8FFA9AFA8CFFD06FFA8
%9B7677769B7677769B76A1A9FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9
%AFA8FD08FFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFAF
%FD0FFFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8FFFF
%FFA8AFA8AFA8AFA8AFA8AFA8AFA7CFCACFA8FFCACA707670767076707670
%7677AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8FD08FFA9AFA9
%FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA8FD0FFFA9FFA9AFA9FFAF
%AFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FD05FFAFAFA9FFAFAFA9FFAF
%AFA8CFC9CAC9CFC9CAC9A176A1A1A19A9B769B76A8AFFFAFAFA9FFAFAFA9
%FFAFAFA9FFAFAFA9FFAFAFA9FD08FFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8
%AFA8AFA8AFA8AFA8AFA8FD0DFFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8
%AFA8AFA8AFA8AFA8AFA8AFFD04FFA8AFA8AFA9AFA8AFA8AFA7C9A7C9A7C9
%A7C9A7A1A7CA7DCAA7A276BCA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8FD0AFFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9AF
%A8FD0BFFA8FFA9AFA8FFA9AFA8FFA9AFA8FFAFFFA8FFAFFFA8FFAFFFA8FF
%AFAFA8FD05FFA9AFA8FFAFAFA8FFA9CACAFFCFFFCAFFCFFF7DCACAA8A8FF
%A89A9AFFAFAFA8AFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FD0AFFA8AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8FD07FFA8AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AFAFFFFFFFAFFFFFFFAFFD05FFA8AFA8FFFFFF
%A7C899A09FC8A8AFA8AFA7FD08FFCA9ACAA8CAA1A893A8A8AFA8AFA8FFAF
%FFA8FFA8AFA8AFA8AFA8AFA8AFA8FD0AFFA8FFAFAFA9FFAFAFA9FFAFAFA9
%FFAFAFA9FFAFAFA9FFAFAFA9FD09FFA9AFA9FFAFAFA9FFAFAFA9FFAFAFA9
%FD0EFFAFA9FFA9FFCFC8C1C299C2C1C9AFFFA9CFFD08FFA1C3A1CA9AC9A8
%CAAFFFAFFD09FFAFFFA9AFA9FFAFAFAFFD0AFFAFAFA8AFA8AFA8AFA8AFA8
%AFA8AFA8AFA8AFA8AFA9AFA8AFFD08FFAFAFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFFD0EFFA8AFA8AFA9FFA7C8999A9FC1A0AFA8AFA7FD09FFA1CAA8
%C3A1FFA9AFA8FD0BFFA8AFA8AFA8AFA8FD0CFFA9AFA8FFA9AFA8FFA9AFA8
%FFA9AFA8FFA9AFAFAF532E2859A8FD05FFAFAFA9AFA8FFA9AFA8FFA9AFA8
%FFA9AFA8AFAFFD0FFFA9AFA9FFA7C89FC29AC29FC9AFAFA8CFCFFFCAFFCF
%FFCAFFCFFFA7CAA1A184FD11FFAFFFAFFD0CFFA8AFA8AFA8AFA8AFA8AFA8
%AFA8AFA8AFA8AFA98405050527002753FFFFFFA9AFA8AFA8AFA8AFA8AFA8
%AFA8AFA8AFA8AFA8AFFD0EFFA8AFA8A89FC19FC19FC79FA6A8AFA8AFA7C9
%A7C9A7C9A7C9A7C9A17E76A136377DCAFD1FFFAFAFA9FFAFAFA9FFAFAFA9
%FFAFAFA9FFAFAF27282728272E05057DFFFFAFA9FFAFAFA9FFAFAFA9FFAF
%AFA9FFAFAFA9FFAFFD0FFFAFAFA0C79FC89FC89FC89FCFAFAFA8CFC9CAC9
%CFC9CAC9CFA0995A7E5A615399939ACAFD1DFFAFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AF8459282705280528052E052EA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8FD0FFFA8AFA8C19FC8A0C89FC79FC1A0AFA8AFA7C9A7C9
%A7CAA7CAA0939277525A769392936E99FD1DFFA9AFA9AFA8FFA9AFA8FFA9
%AFA8FFA82E0028272805280552A15205A8A9FFA9AFA8FFA9AFA8FFAFFFA9
%FFA9AFA8FFA9AFA9FD0EFFAFA8FFA6C1A1CAA0C2A0C89FC8A9AFA9CAA7CF
%C9CFC9CFC99A92996F9376999399939993CAFD1CFFAFA8AFA8AFA8AFA8AF
%A8AFA8AFA859002827280505002876CFA15259AFA8AFA8AFA8AFA8FFA8FF
%FFFFAFFFA8AFA8AFA8AFFD0EFFA8AFA8A799CAA1A1A1CAA1C199A1A8AFA7
%C97D5252522E534B936E936E936E936F936E939AFD1CFFAFFFAFAFA9FFAF
%AFA9FFAFAFA9FF282827A1762E52A2A2CACACA7D84AFFFAFAFA9FFAFFD0B
%FFA9AFA9FD0EFFAFA9FFAEA7A1FFA1CACACAA09AA1FFA9CAC9A705060528
%052E93999399939993996F99939AFD1DFFA8AFA8AFA8AFA8AFA8AFA8FFFF
%2E000576C376CAC3CACAC3A1A884AFA8AFA8AFA8FD0BFFAFAFA8AFFD0EFF
%A8AFA8AFA8C3A1CFA1CAA79A99FFFFFFA7C9A75228270552286F92936F93
%6E936F6F6E9393CAFD1CFFAFA8FFA9AFA8FFA9AFA8FFFFFFA853537D76A1
%A8C299CAC3C3A8FFA9AFA8FFA9FD0DFFAFAFAFFD0FFFA9AFA9CAC3C3A8C3
%C3CAA1FD04FFCFC9CACAA1062E7DA876936E9993936F996F939393A1FD1C
%FFA8AFA8AFA8AFA8AFA8AFFD06FF53052752A1C3A1CA7DAFA8AFA8AFA8FD
%0FFFA8AFFD0EFFA8AFA8AFA8CAA1CAA1C9A8FD05FFA7C9A7CA7628067DCA
%CA9A936E936E936E936E936E765A605A855A5A5A855A5A5AA9FD11FFA9FF
%AFAFA9FFA9FD08FF53052828A1A1CA7D53AFFFAFAFA9FD11FFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFAFA9FFAFFFC3CAA07D59AFFFFFFFCFC9CACA
%7D052E2ECACACAA19A93936F996F939399755B365B5A5B365B5A5B365B5A
%FD11FFAFA8AFA8AFA8AFAFFD06FFA9274C4B9BA1A1A1774CA8A9AFA8AFA8
%FD07FFCAFFA8CAFD04FFAFAFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AF59769A7D28280659A8FFA8FFCACA52280505277DA1CA93936E6F6E93
%6E936E995A5A365B365A365B365A365A84FD10FFAFAFA8FFA9AFA9FD07FF
%A19A94BC94A2A8A29BBC9AA8AFFFA9FD08FFCAA8CACAFD05FFA8FFA9AFA8
%FFA9AFA8FFA9AFA8FFA9AFA8FFAFA92E2F282E282F2E2F0659FD04FFC375
%0528052805526F93939993936E6F9399937E5A5B5A615A5B5A615A5B36AF
%FD11FFA8AFA8AFA8FFFFFFA8A984AF849A939A9494949B709A939494A8A8
%AFA8FD06FFCAA1CAA1FD06FFAFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8
%FF5928062E062E062F282E06FD04847E6E4BFD0427206F6E6F6E9993936E
%936F93525B365A365A365A365A365A84FD11FFAFA9FFA9FD04FFAF5A8460
%7D94BC949A94BC949A94BC94949AFFAFFD06FFC4949AA1FD05FFCFFFA8FF
%A8FFA8FFA8FFA8FFA8AFA9FFAFAFA9FFAF59282F282F282F2E2E282F2F5A
%355A367D92996F6F6F9993996F6F6F9993999393927636365A615A5B5A61
%5A5B36AFFD11FFA8AFA8AFA9FFFFFFA9845A847694949A9494949A949494
%9A6F949BAFA9FD04FF9B939A6FCAAFA8A8CAA7CAA7C9A7CAA7C9A7CAA7C9
%A7A1A8AFA8AFA8AFA8AF2E28282E282F282F282E282F355A355A35769299
%6E93939993936E6F6E9393996F936F360D5A365B365A365B365A84FD12FF
%A9AFA8FD05FF84607DBC949A949A949A949A949A949A94949BAFFFFFCABD
%949A93CAFF532E5AA7CAA7CAC9CAC9CFC9CAC9CFC9CAA0A8AFAFA8FFA9FF
%7E2F282F282F2E2F282F282F28595A5A59605A9A92939399939993999399
%6F9392B5927714365A5B5A615A5B5A5B36AFFD11FFAFAFA8AFA8FFFFFFA8
%A95A77939A94946F9A9494939A94946F9494949AA9A89A939A939BFF7D28
%592F7DC9C9A7C9A7C9A7C9A7C9A7C9A7C97CAFA8AFA8AFA959062E282E06
%2F282E0628282E2E5A355A356084C39A996E936E936F936E936E7676760D
%360D5A365A365A365A365A84FD13FFAFA9FD05FFA98594BC949A949A949A
%94BC949A949A94BC94BC949A94BC949AFFAF285A595A59CAC9CFC9CAC9CF
%C9CAC9CFC9CAC9C9A8FFA9FFAFAF2F2F282F282F2E2F282F282F282F5960
%596060AFFFFF939993999399939993935361FD0536615A615A5B5A6136AF
%FD13FFAFFD06FFAF7D94949A94706F9A9494949A949A6FFD06949A9394CA
%FF28595359535A7DC9A7CAA7C9A7CAA7C9A7CAA7C9A1A7A9AFA8FF842E28
%2E282F282F282F2828282E2859595A3584A8FFA86F6E936E9392936E6F4B
%5336360D360D365A5A365B365A365A84FD1AFFA8A19A9A949B769494BC94
%9A949A949A6F9A949A70BC9494A1FF5253595A595A537EC9CAA7CFC9CAA7
%C9C9C9A7C9C9C9A0FD04AF84282F282F2E2F282F282E052F2E2F2F605960
%84FFFFA928524B764B764B52282F36610D3636302F615A5B36615A5B36AF
%FD19FFA7A7A0C9709470774B706F9A949493949AA87094939494949AFF53
%2E53592F5953592FA7C9C9A7CAA1A8A1CAA1A8A1CAA1A17DFFA9FF2F2828
%28062E282805280528062E282F355A5A84A8FF842E062F0606062F062806
%5A360D0D360D2F365A365A365A365AA8FD18FFCACAA0C9A6BC94BC949A70
%9A709A94BD94BCAFFFA2BD94BC9BFF842E595A535A595A535A7DCFA7C9A7
%A7A8CFA8CAA8CFCACBA7A78484592F2E2F062E282E282F2E2F2E2F282E2E
%605A8484FFFFA8282F2E2F282F2E2F282E7EAF7E360E5A84AFA9AF85AF85
%AFAFFD1AFFC9C8A0C9949493B6949493BC93A17DA1707E7E847D7776847E
%2E2F5A53592F5953592F5AA1C9A8CFA8CAA1CAA7CAA1C9A0C9A052062E76
%CA762E282F282E062E282E062F282F356084A9A8FF5928282F2828282F28
%2E065A5A5A0D36365A36FD1EFFA9AFA9AFA7A77C9B769B769B769B769B7D
%592E592E2F2E592F592F2E2F5A595A595A595A595A5984A7A8A8CAA8A8A8
%CFA8A8A7CFA8A87C7C7CA17CA17C592F592F592F592F592F5959605A8585
%AFA97E282F282F282F282F2E2F2F37FD06365AFFAFFFAFFFAFFD16FF8436
%3536355A355A35603660356036603560355A355A355A355A60855A856085
%6085608560856085608560845A8460845A84608560856085608560616085
%6085608560856085608560856085608560852F2E282E282E062E062F065A
%6085608560856061606160616085A9FD15FFAF3660366036603660366036
%603660366036603660366036603685618B618B618B618B618B618B618B61
%8B618B618B618B618B618B618B618B618B618B618B618B618B618B618B61
%8B618B618B618B615A282F28532E2E282F2E2F598B618B618B618B618B61
%85618B61FD16FF84605A5A595A595A595A595A595A595A595A595A595A59
%5A595A5A845A845A845A845A845A845A845A845A845A845A845A845A845A
%845A845A845A845A845A845A845A845A845A845A845A845A847E842F2F28
%2E282F282F282F2859848560845A856084608560856085AFFD16FF85A89A
%9A9AA09A9A9AA09AA09AA09AA09AA09AA09AA09AA09AC3A0C39AC3A0C29A
%C3A0C29AC3A0C29AC3A0C3A0C3A0C3A0C3A0C3A0C9A1C9A1C9A1C9A0C9A1
%C9A1C9A1C9A1C9A1C9A1C9A1C9A1C9C953282F2E53522F2E2F282F7DC9A7
%C9A7C9A7CAA7CAA7CAA7CFAFFD16FFA8AFA7A09A9A999A9AA0769A769A99
%9A9A9A999A769A999A99A1A1A7A1A7A1CAA7C9A7CAA7C9A7CAA7C9A7CAA7
%CAA7CAA7CAA7CAA7CAA1C9A1C9A1C9A1C9A1C9A1C9A1C9A1C9A1C9A7A7A7
%CAA7CAA7CA2E2E062F2E7D062F282E067DC9CAA7CAA7CAA1C9A0C9A7CAA8
%FD16FFA9AFA9AFAFAF9AC29AC98485592F285352534C532E2F52C29AA0C9
%A8062E282F53A9A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA9AF7D9A6F
%766F9A6F766F9A6F766F9A6F766F9A765A5A8584FFA9FFA953282F2E5377
%2E2E2F282F59FFA9FFAFAFA9C39A9AA1CFA8AFA9FD14FFA8AFA8A95A855A
%7E999AA7AF5A5A0628062F062F062F06529A9A9AC97D2E062F06282EA884
%A984A884A984A884A984A884A984A884A9766F6F756F766F766F756F766F
%756F766F756F76358484AFA8AFA8AF282E282F2EA1272F282E065AA9AFA8
%AFA8AFA19A9A5A7E855AA9A8FD10FF85A95AA9A8FF845B365B377D9ACFA9
%855A2F282F282F2E2F282F2E9A9AA0C9A1062F2E2F282F84AF84AFA8AF84
%AFA8AF84AFA8AF84AFA8AF7D6F6F766F7675766F9A6F766F9A6F766F9A6F
%9952608485A8FFA9FF842F282F2853A02E282F2E2E59FFA9AFA8FFAFA899
%7E365B365B85AFAFAF5AA985FD0AFF843636375AAFA8A9365A365A36A1A7
%AF84842F2F0628062E0628062E769A9AC97D28062F282E28A884A884A984
%A884A984A884A984A884A984766F766F6F6F766F756F756F6F6F756F6F6F
%756F59598484AFA8AFA8A8282F282E2EA1272E062F0659A8AFA8AFA8AFA1
%9A365A365A36A9A8AF5A36365AA8FD09FF5B30615AA9AFFFA95B5A615A5A
%7EFFA9AFA9AF84847E847E847E845A7D9AC2C9A7062F2E2F285A84AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AFA860529A75766F7675766F9A527E7D847D7E
%7D847D8484AF84A9A9FFAFFF842F2E2F2859A152282F2E2F53FFAFAFA9FF
%AFCA5A5A5A613661A9FFAFA95A5B3085FD08FFA92F5A365BA8AFA8A95A5A
%365A2F5A84AFA8A884AFA9AFA8AFA9AFA884769A9AC97D28282F282E5985
%A8A884A984A884A984A884A984A884A959756F766F6F6F766F756F5A84A8
%84858485848584847DA8A8AFA8AFA984062F282E53A1282E282F0653A8AF
%A8AFA8FF845A2F5A365B5AA9A8AFA85B365A2FAFFD07FF5A5A365B7EAF85
%AF5A855A5B365B2F85C9C9A1AF84AFA8AF84A8C3CFA07D9A9AC9A7062F28
%2F2EC3A1AFA8AF84AFA8AF84AFA8AF84AFA8AFA8C96F766F766F766F9A6F
%76A8C99AC9A8AFA9AFA8AFA8C3A0CFAFAFA8FF7E2F282F2859A052282F28
%2F53AFA8FFA9AFA9852F5A36615A615AAF85A98461365A5AFD07FF5A305A
%84AF5A5B5A5A36855A3636365AC9A0A884A884A984A99AC3C9A14C9A9AC9
%7C28282E067D9AA184A984A884A984A884A984A884A984A8A06F6F754B76
%6F756F7576CA9AC2A7A8A8AFA8AFA8AFA19AA7AFA8AFA87E062E062E53C2
%4B2E282E0659A8AFA8AFA8AF5A5A36367E84365A5A5B5AAFA85A307EFD07
%FF8485A9FFAF85365A5A5B61CA776136A8C9C9A8AFA8AFA9AFA8C3A1CFC3
%779A9AC9A7282F282F84C99AA8A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8A16F
%9A6F7676766F9A6FA1A8C3A1CFA8FFAFAFA9FFAFCA9ACAAFAFA9FF592F28
%2F287EC276282F282F53FFA9FFAFAFAF85365B7DCF5A5B365A3685AFFFFF
%8584FD07FFAFA8AFA8FF7E5A365A3685A19A52597DA176847DA87DA87EA2
%9AA8A8C9769A9AC97C2F28282FAFA1BCA1AF84A884A984A884A984A884A9
%84CA75766F6F76A16F766F757DC99AA8A7CAA8AFA8AFA8AFA8A0A0FFA9AF
%A87E062E282E59C24B2F282E0659A8AFA8AFA8AF845A76C2A761365A365A
%84AFA8FD0AFFAFAFA8FFAFAF5A5B365A85A84B704B764B764B767677769B
%76C2A8AFC9A1769AC3A7062F2884A8A99AA184AFA8AF84AFA8AF84AFA8AF
%84AFC9766F9A6F7D767675766FA8A1C3A8CFC9AFA9FFA9AFA8FFA1C3A8AF
%A9FF532F2E2F2884C276062F2E2F2FFFAFAFA8FFA9AFA89A9ACA5A5A365B
%5AAFA9FD0AFFA8AFA8AF7E5B845B305A36A97D4B4B4C4B704B4C4C777676
%709A9AA884CAA07699C97D28062F84A884A19AA884A984A884A984A884A9
%84A9A8C96F756F6F7D766F766F76A1C2A1A9A8C9A8AFA8AFA8AFA8A89ACA
%A8AFA859062F282E7DC27628062F062FA8AFA8AFA8AFA8A899A0C9A8365A
%365B845B84FD0AFFA9FFA985365A5A855AA9AFA14B764B764C764B77769B
%769B76A884AFCAC9769AC3A7282F59AFA8AFA1C2A8AFA8AFA8AFA8AFA8AF
%A8AF84CFA0766F9A75AF7676757676CA9AA884AFC9CFA8AFA9FFA9FFA8C3
%A1FFAFFF532F2E2F28A89AA0282F2E2F2FFFAFAFA9FFAFAFA8A09ACAAEAF
%5A615A5A3685FD09FFA8AFA8A8365A365A2E59535952704B704B764B4C70
%9B7677769BA8A984A8C99A6FC97D2828A8A8A884A89AA184A984A884A984
%A884A984A8A7A06F766F7684766F766F76A1C384A984CAA7A884AFA8A9A8
%AFA0C3A8AFA853062F282F7D9A9A2E282F2853A8AFA8AFA8AFA8AF9AC27D
%5353592F5A2F5A36A9FD09FFA8FF7E5A365B2F2E282F2E774B764C764B76
%4B76769B767776AFA8AF7DCAA09AA0A70659A8AFA8AF84C3A1AF84AFA8AF
%84AFA8AF84AFA8CA7676756F7DAF76756F767CC3A1AFA8AFA8CAA8AF84AF
%A8AF84A8A0A884AF2F2F282F2FA89AC32E2F282F2FAFA8FFA9AFA8FFAFA1
%9A7D062F282F2F5B365AA8FD08FFA8AFA884282F2F2E282E062F52704B70
%4B4C4B7070777677767784A984597DC96FC37D287DA984A984A9A1A084A8
%84A984A884A984A884A8A7756F766FA884766F756FA1A0A884A984A8A7A8
%84A884A984A97DC2A7A9842F062E062F7D9AA02E062E062FA8AFA8AFA8AF
%A8AFA19A7C2F282E062E2F2F06A8FD09FFA9FF842F282F2E2F282F2F774B
%764C764B764B76769B769B77AFA8AF2F7DC99AC27D2FAFA8AFA8AF84A89A
%A884AFA8AFA8AFA8AFA8AFA8C96F9A6F7684AF76766F9AA1C3A8AFA8AF84
%CFA8AFA8AFA8AFA8AFA0C9A8AF2E2E282F53A89ACA592E282F2FAFA9FFAF
%AFA9FFAFA89AA1282F282F2E2F282FA8FD08FFA8AFA884282E282F282E28
%2F52704B764B704B7670777677767784AF847D52C99AC37D8484A884A984
%A984C3A1A984A984A884A984A884CFA06F6F7576AF84766F756FC3A1A984
%A984A9A7CA84A884A984A884A1A0A984A8A1A17DAFA19AA7AFA1A17DA8A8
%AFA8AFA8AFA8AFA89A762F282E282F282E28A9FD09FFA9FF7E2F282F282F
%2E2F2E774B764B764C764B777677769B77A984A89BCAA7C3A0CAA8AFA8AF
%84AFA8AFA1C3A8AF84AFA8AF84AFA8AEC9A16F766FA1AFAF76766F9AA0A8
%A9AF84AFA8AEA7AFA8AF84AFA8AFA8C3A8AFA8CACACA84A89AA884CACACA
%A8AFA8AFA8FFA9AFA9FF9A7D062F2E2F282F282F84FD08FFA8AFA884062F
%282E062F282F4C704B4C4B704B4C4C777676707D84A976949BCAA0A0A0A1
%84A984A884A984A89AA884A884A984A884A9A8CA766F6F757DAF84766F6F
%76A184A984A884A984CAA7A984A884A984A89AA884A8A1CAA8AF7DA0A8A8
%A1CAA1A884A984A884AFA8AFA8A0762E062F282E062F28A8A8FD08FFA9FF
%A853282F282F2E2F2EA14B764B764C764B77769B769B77AFA1BC94949AC9
%A0C36FA8A9AFA8AFA8AFA8C3A8AFA8AFA8AFA8AFA8CFA77D9A9A76AFA9A9
%76A1A0A1A1AFA8AFA8AFA8AFA8CFA8AFA8AFA8AFA8A1769A76A19A9A84A8
%9AA076A0A09A76AFA8AFA8AFA8AFA9FFA1A12E2F2E2F282F2853A9FD08FF
%A8FFA9AF592F282F282F067E76704B704B764B4C709B767770A1A89A939A
%949AA0C3A193699BA8AF84AFA8AFA1A784A984AFA8A984A9532E2E7E2E59
%A87E282F7D5976A884AFA8A984AF84A8A7AFA8A984AFA8A16F756F756F75
%6FA176756F756F756F7584AFA8A984AF84AFA9A1C37E062F282F062F84FF
%AFFD04FFA8A87D7E7D7E597E2E2E062828537D7627524B4C27524B524C76
%4C52527D6F704C706F7676764B6F457D597D597E597D767E597D597E597E
%5228282E062E2859282E28280676537E597E597D597E597D597E597D597E
%524B4B764B524B7652524B764B524B764B7D597E597D597E597E527D7D53
%062E282E52847D847DA8FFFFFF7EA8A8A884FD05A87EFD11A884A8A8A87D
%A8A8A87DA8A8A884FD2BA884FD1BA884A8A8A87DA8A8A884FD04A8FDFCFF
%FDFCFFFD08FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c148 79.164050, 2019/10/01-18:03:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:MetadataDate="2021-03-19T15:05:08+06:00"
   xmp:ModifyDate="2021-03-19T15:05:08+06:00"
   xmp:CreateDate="2021-03-19T15:05:08+06:00"
   xmp:CreatorTool="Adobe Illustrator 24.0 (Windows)"
   xmpMM:InstanceID="xmp.iid:a014320e-ec4a-1447-9e43-d49d9b1bf3f2"
   xmpMM:DocumentID="xmp.did:a014320e-ec4a-1447-9e43-d49d9b1bf3f2"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 11.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>progr</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="172"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYqlvln/lG9J/5g7f/k0uTyfUfe1YP7uPuCZZBtdirsVdirsVY/reu6LDqelxy30C&#xA;SQXbNOpkWqA2s6Vbf4fiYDfLYQlR26fpDjZc0BKNkbH9BT2GaGeJZYZFlicVSRCGUjxBG2VkU5AI&#xA;O4X4EuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLfLP/ACjek/8A&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:246f7ec4-a349-2043-8a1f-24932e6ceec4"
    stRef:documentID="xmp.did:246f7ec4-a349-2043-8a1f-24932e6ceec4"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:76df5076-5e1b-df47-b452-64e1fade6e58"
      stEvt:when="2021-01-07T18:22:44-08:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2014 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0e8639a2-7686-ce46-9700-5ac80fb88f96"
      stEvt:when="2021-01-09T20:43:50-08:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2014 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:5a2b8535-ca19-ad4f-a862-1b00750944e6"
      stEvt:when="2021-03-19T15:05:04+06:00"
      stEvt:softwareAgent="Adobe Illustrator 24.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:246f7ec4-a349-2043-8a1f-24932e6ceec4"
      stEvt:when="2021-03-19T15:05:05+06:00"
      stEvt:softwareAgent="Adobe Illustrator 24.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:a014320e-ec4a-1447-9e43-d49d9b1bf3f2"
      stEvt:when="2021-03-19T15:05:08+06:00"
      stEvt:softwareAgent="Adobe Illustrator 24.0 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="2450.000000"
    stDim:h="1633.333333"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="39"
         xmpG:green="37"
         xmpG:blue="37"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="39"
         xmpG:green="37"
         xmpG:blue="37"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                         
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1633.33 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1633.33 li
2450.76 1633.33 li
2450.76 0 li
cp
clp
2450 1633.33 mo
0 1633.33 li
0 0 li
2450 0 li
2450 1633.33 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
2450.76 1633.33 mo
.758301 1633.33 li
.758301 0 li
2450.76 0 li
2450.76 1633.33 li
cp
f
586.022 529.671 mo
586.022 529.671 279.244 645.711 233.266 883.089 cv
187.289 1120.47 -61.5542 234.111 212.045 314.688 cv
485.645 395.267 584.045 448.477 586.022 529.671 cv
cp
.827451 .909804 .937255 rgb
f
1327.05 345.178 mo
1327.05 345.178 1546.6 690.178 1641.03 723.628 cv
1735.47 757.077 2049.99 389.362 2187.93 543.67 cv
2325.87 697.978 2508.98 275.489 2264.98 201.444 cv
2020.98 127.4 2070.45 389.225 1831.21 309.49 cv
1591.96 229.755 1175.83 130.001 1327.05 345.178 cv
cp
f
78.7529 1550.58 mo
2384.53 1550.58 li
2384.53 1550.58 2389 963.779 1973.74 1024.64 cv
1558.48 1085.51 1465.74 429.064 1169.13 364.145 cv
872.513 299.225 504.149 721.96 384 954.646 cv
263.85 1187.33 78.7529 1038.02 78.7529 1550.58 cv
cp
f
121.924 1548.88 mo
121.924 1548.88 321.18 1192 634.257 1219.93 cv
947.333 1247.87 833 812.63 1064.93 949.073 cv
1296.87 1085.52 1359.3 1388.67 1665.13 1379.52 cv
1970.95 1370.37 2174.86 1550.58 2174.86 1550.58 cv
121.924 1548.88 li
cp
.741176 .85098 .878431 rgb
f
1844.75 774.967 mo
1608.39 774.967 li
1608.39 335.405 li
1844.75 335.405 li
1844.75 774.967 li
cp
.945098 .823529 .662745 rgb
f
1819.45 442.389 mo
1627.52 442.389 li
1627.52 366.087 li
1819.45 366.087 li
1819.45 442.389 li
cp
1 1 1 rgb
f
1819.45 570.84 mo
1627.52 570.84 li
1627.52 494.538 li
1819.45 494.538 li
1819.45 570.84 li
cp
f
1013.21 806.258 mo
1013.21 891.382 944.204 960.389 859.08 960.389 cv
773.956 960.389 704.949 891.382 704.949 806.258 cv
704.949 721.134 773.956 652.127 859.08 652.127 cv
944.204 652.127 1013.21 721.134 1013.21 806.258 cv
cp
f
1296.12 754.388 mo
1032.77 754.388 li
1032.77 505.131 li
1296.12 505.131 li
1296.12 754.388 li
cp
f
1550.08 702.613 mo
1564.1 686.94 1568.59 668.08 1560.1 660.485 cv
1551.62 652.892 1533.37 659.44 1519.35 675.112 cv
1519.24 675.233 1519.14 675.357 1519.04 675.479 cv
1505.72 690.57 1501.23 708.464 1508.58 716.438 cv
1508.83 716.706 1509.05 716.995 1509.32 717.24 cv
1517.81 724.834 1536.06 718.285 1550.08 702.613 cv
cp
.87451 .462745 .376471 rgb
f
1494.63 724.35 mo
1496.81 714.554 1413.98 701.509 1429.62 760.625 cv
1429.63 760.697 li
1429.63 760.697 1433.43 764.9 1437.09 772.31 cv
1440.67 779.58 1444.13 789.938 1443.72 802.478 cv
1442.91 827.794 1520.22 816.361 1506.88 778.521 cv
1504.6 772.059 1502.71 766.568 1501.1 761.759 cv
1497.07 749.726 1495 742.305 1494.19 736.853 cv
1493.43 731.728 1493.75 728.287 1494.63 724.35 cv
cp
.843137 .564706 .505882 rgb
f
1495.63 743.806 mo
1495.63 743.806 li
1494.96 741.137 1494.49 738.857 1494.19 736.853 cv
1493.43 731.728 1493.75 728.287 1494.63 724.35 cv
1496.81 714.554 1413.98 701.509 1429.62 760.625 cv
1429.62 760.625 1456.45 772.379 1495.63 743.806 cv
cp
.686275 .411765 .364706 rgb
f
1383.29 655.75 mo
1383.29 655.75 1389.55 679.978 1387.65 699.85 cv
1385.74 719.722 1408.06 750.756 1427.12 759.739 cv
1446.17 768.722 1484.56 747.761 1498.44 732.789 cv
1512.32 717.816 1521.31 680.25 1521.58 663.372 cv
1521.85 646.494 1494.9 580.072 1446.99 589.056 cv
1399.08 598.039 1374.04 614.372 1383.29 655.75 cv
cp
.937255 .803922 .792157 rgb
f
1413.31 632.88 mo
1413.31 632.88 1398.72 652.603 1381.31 652.586 cv
1381.31 652.586 1387.55 667.872 1387.83 685.665 cv
1387.83 685.665 1363.49 666.045 1366.76 638.687 cv
1366.76 638.687 1353.28 637.054 1361.45 617.045 cv
1369.62 597.036 1411.67 553.345 1456.59 563.145 cv
1456.59 560.286 li
1456.59 560.286 1412.89 552.12 1414.73 533.337 cv
1416.58 514.554 1459.55 499.8 1508.45 506.795 cv
1533.68 510.404 1546.02 533.745 1536.22 537.828 cv
1536.22 537.828 1571.16 588.225 1505.06 577.655 cv
1505.06 577.655 1549.51 591.812 1544.75 657.322 cv
1521.58 672.729 li
1521.58 672.729 1519.61 701.411 1510.98 710.78 cv
1510.98 710.78 1511.74 668.087 1505.61 651.753 cv
1505.61 651.753 1489.67 642.399 1481.5 640.747 cv
1481.5 640.747 1482.32 646.036 1457.41 638.278 cv
1432.5 630.52 1413.31 632.88 1413.31 632.88 cv
cp
.905882 .666667 .27451 rgb
f
1384.92 667.047 mo
1384.92 667.047 1386.01 661.467 1395 660.241 cv
1405.29 658.838 1406.57 667.319 1408.2 666.23 cv
1409.83 665.142 1406.93 654.661 1396.38 653.572 cv
1385.83 652.483 1382.34 662.011 1384.92 667.047 cv
cp
.768627 .286275 .227451 rgb
f
1435.97 658.914 mo
1435.97 658.914 1463.73 645.405 1474.08 654.661 cv
1484.42 663.916 1477.57 652.507 1472.31 647.855 cv
1461.83 638.6 1440.73 650.782 1440.19 645.405 cv
1439.99 643.51 1429.3 650.169 1429.43 654.797 cv
1429.57 659.425 1430.17 661.397 1435.97 658.914 cv
cp
f
1446.38 679.978 mo
1446.2 679.978 1446.01 679.949 1445.83 679.885 cv
1444.98 679.585 1444.54 678.653 1444.84 677.802 cv
1445.18 676.829 1448.34 668.279 1454.01 667.884 cv
1457.44 667.664 1460.81 670.475 1463.96 676.573 cv
1464.37 677.374 1464.06 678.36 1463.26 678.774 cv
1462.46 679.187 1461.47 678.877 1461.05 678.073 cv
1458.68 673.467 1456.3 671.064 1454.24 671.145 cv
1451.24 671.349 1448.6 676.943 1447.92 678.887 cv
1447.68 679.557 1447.05 679.978 1446.38 679.978 cv
cp
.172549 .14902 .211765 rgb
f
1392.98 692.155 mo
1392.83 692.178 1392.68 692.172 1392.53 692.131 cv
1391.81 691.94 1391.32 691.075 1391.42 690.196 cv
1391.54 689.192 1392.72 680.355 1397.14 679.264 cv
1399.82 678.622 1402.91 680.983 1406.35 686.62 cv
1406.8 687.36 1406.7 688.373 1406.13 688.882 cv
1405.57 689.387 1404.73 689.204 1404.28 688.461 cv
1401.69 684.203 1399.45 682.123 1397.83 682.457 cv
1395.49 683.029 1394.27 688.883 1394.02 690.888 cv
1393.94 691.578 1393.51 692.072 1392.98 692.155 cv
cp
f
1415.86 698.54 mo
1417.47 698.342 li
1425.11 697.401 li
1425.62 697.34 li
1426.34 697.251 1426.99 697.743 1427.08 698.439 cv
1427.72 703.678 li
1427.81 704.374 1427.29 705.011 1426.57 705.1 cv
1426.07 705.161 li
1426.07 705.161 1423.37 705.952 1423.19 707.748 cv
1423.19 707.748 1423.37 708.645 1420.28 709.024 cv
1419.68 709.099 1419.2 709.158 1418.81 709.206 cv
1412.93 709.549 li
1409.85 709.928 1409.17 707.241 1409.17 707.241 cv
1408.67 707.303 li
1407.94 707.392 1407.29 706.899 1407.2 706.203 cv
1407.35 700.778 li
1407.35 700.778 1407.71 699.533 1409.58 699.313 cv
1415.86 698.54 li
cp
.917647 .203922 .309804 rgb
f
1414.46 724.486 mo
1414.46 724.486 1425.28 726.731 1433.24 721.22 cv
1433.24 721.22 1425.49 761.032 1414.46 724.486 cv
cp
.752941 .262745 .211765 rgb
f
1484.38 725.217 mo
1479.09 733.408 1469.27 736.478 1462.45 732.07 cv
1455.63 727.664 1454.4 717.451 1459.69 709.26 cv
1464.98 701.067 1474.8 697.999 1481.62 702.405 cv
1488.44 706.812 1489.68 717.024 1484.38 725.217 cv
cp
.87451 .462745 .376471 rgb
f
1405.88 725.397 mo
1402.73 716.623 1395.06 710.15 1388.7 710.848 cv
1391.09 720.613 1397.07 731.358 1404.5 740.516 cv
1407.41 737.438 1408.14 731.706 1405.88 725.397 cv
cp
f
1531.06 691.509 mo
1531.06 691.509 li
cp
1518.96 711.351 mo
1518.74 711.336 li
1517.88 711.235 1517.55 710.714 1517.43 710.412 cv
1516.67 708.536 1519.93 704.372 1525.39 697.734 cv
1527.1 695.651 1529.13 693.175 1530.04 691.796 cv
1526.79 692.654 li
1526.34 692.774 1525.91 692.508 1525.79 692.072 cv
1525.68 691.637 1525.94 691.19 1526.38 691.075 cv
1530.21 690.067 li
1530.43 689.974 1531.4 689.576 1531.93 690.299 cv
1532.66 691.284 1531.65 692.684 1526.65 698.771 cv
1523.85 702.177 1518.64 708.515 1518.95 709.814 cv
1519.02 709.815 li
1521.28 709.815 1531.84 703.233 1541.6 694.015 cv
1550.22 685.866 1554.82 678.862 1554.53 674.292 cv
1554.38 671.712 1553.47 669.922 1551.75 668.821 cv
1546.81 665.658 1537.04 669.393 1536.94 669.429 cv
1536.52 669.593 1536.05 669.386 1535.88 668.963 cv
1535.72 668.544 1535.93 668.07 1536.35 667.907 cv
1536.78 667.74 1547.01 663.845 1552.63 667.444 cv
1554.79 668.826 1555.98 671.098 1556.17 674.193 cv
1556.57 680.679 1549.07 689.198 1542.72 695.202 cv
1533.75 703.67 1522.42 711.349 1518.96 711.351 cv
cp
.768627 .286275 .227451 rgb
f
1469.95 513.205 mo
1470.16 512.951 1470.28 512.951 1470.35 512.951 cv
1470.57 512.951 1471.81 513.115 1474.49 516.358 cv
1480.89 524.098 1481.78 532.847 1480.47 540.684 cv
1477.84 545.525 1476.45 550.686 1475.71 554.978 cv
1474.71 556.992 1473.72 558.738 1472.89 560.088 cv
1469.7 542.689 1466.5 517.399 1469.95 513.205 cv
cp
1498.93 529.586 mo
1500.3 529.224 1501.42 529.039 1502.26 529.039 cv
1503.05 529.039 1503.37 529.208 1503.39 529.269 cv
1504.6 532.304 1491.84 547.218 1478.28 560.354 cv
1478.38 559.129 1478.55 557.652 1478.81 556.046 cv
1480.73 552.082 1482.64 547.12 1483.61 541.698 cv
1486.69 536.325 1491.46 531.567 1498.93 529.586 cv
cp
1479.58 563.645 mo
1488.55 555.043 1508.98 534.502 1506.43 528.063 cv
1506.01 527.018 1504.96 525.772 1502.26 525.772 cv
1501.12 525.772 1499.76 525.987 1498.1 526.428 cv
1492.04 528.034 1487.57 531.232 1484.25 535.114 cv
1484.35 528.197 1482.51 520.927 1477.01 514.275 cv
1474.42 511.143 1472.3 509.685 1470.35 509.685 cv
1469.56 509.685 1468.41 509.935 1467.43 511.13 cv
1462.2 517.497 1467.64 549.78 1469.85 561.607 cv
1465.85 560.976 1461.45 560.507 1456.59 560.286 cv
1456.59 563.145 li
1456.59 563.145 1488.68 567.573 1505.06 577.655 cv
1505.06 577.655 1498.65 568.755 1479.58 563.645 cv
cp
.815686 .286275 .392157 rgb
f
1190.1 1232.62 mo
1106.25 1550.58 li
1122.04 1550.58 li
1225.76 1232.62 li
1190.1 1232.62 li
cp
.945098 .823529 .662745 rgb
f
1470.83 1232.62 mo
1554.67 1550.58 li
1538.88 1550.58 li
1435.17 1232.62 li
1470.83 1232.62 li
cp
f
1652.79 1232.62 mo
1188.38 1232.62 li
1188.38 1195.06 li
1450.26 1195.06 li
1559.25 814.228 li
1737.45 814.228 li
1738.16 815.088 li
1747.13 826.015 1750.41 840.543 1746.99 854.265 cv
1652.79 1232.62 li
cp
.627451 .792157 .847059 rgb
f
1737.45 814.228 mo
1625.3 1184.17 li
1625.3 1184.17 1620.12 1202.13 1550.44 1202.13 cv
1480.75 1202.13 1425.13 1202.13 1425.13 1202.13 cv
1425.13 1232.62 li
1188.38 1232.62 li
1188.38 1195.06 li
1450.26 1195.06 li
1566.51 814.228 li
1737.45 814.228 li
cp
.368627 .643137 .717647 rgb
f
1164.94 1514.61 mo
1164.94 1475.31 li
1209.92 1486.74 li
1206.72 1512.22 li
1189.45 1550.58 li
1151.53 1538.6 li
1151.53 1538.6 1143.77 1528.8 1146.22 1527.58 cv
1148.67 1526.35 1164.94 1514.61 1164.94 1514.61 cv
cp
.937255 .803922 .792157 rgb
f
1103.13 1550.58 mo
1225.76 1550.58 li
1225.76 1550.58 1224.21 1519.41 1206.22 1512.22 cv
1206.22 1512.22 1188.24 1530.8 1169.66 1528.4 cv
1151.08 1526 1164.44 1514.61 1164.44 1514.61 cv
1164.44 1514.61 1105.52 1509.22 1103.13 1550.58 cv
cp
.192157 .329412 .482353 rgb
f
1302.55 1514.61 mo
1302.55 1475.31 li
1347.53 1486.74 li
1344.33 1512.22 li
1327.05 1550.58 li
1289.14 1538.6 li
1289.14 1538.6 1281.38 1528.8 1283.83 1527.58 cv
1286.28 1526.35 1302.55 1514.61 1302.55 1514.61 cv
cp
.937255 .803922 .792157 rgb
f
1241.23 1550.58 mo
1363.86 1550.58 li
1363.86 1550.58 1362.31 1519.41 1344.33 1512.22 cv
1344.33 1512.22 1326.35 1530.8 1307.77 1528.4 cv
1289.18 1526 1302.55 1514.61 1302.55 1514.61 cv
1302.55 1514.61 1243.63 1509.22 1241.23 1550.58 cv
cp
.192157 .329412 .482353 rgb
f
1602.74 1101.52 mo
1602.74 1101.52 1621.54 1202.04 1558.66 1202.04 cv
1495.78 1202.04 1402.02 1202.13 1402.02 1202.13 cv
1352.25 1505.76 li
1286.42 1505.76 li
1291.59 1239.7 li
1218.94 1509.2 li
1150.3 1509.2 li
1218.94 1167.83 li
1218.94 1167.83 1246.48 1101.94 1388.7 1101.94 cv
1602.74 1101.52 li
cp
.627451 .321569 .290196 rgb
f
1218.94 1509.2 mo
1291.59 1239.7 li
1291.59 1239.7 1281.66 1143.92 1302.55 1131.08 cv
1323.44 1118.25 1435.17 1101.52 1435.17 1101.52 cv
1435.17 1101.52 1294.86 1113.12 1285.87 1135.98 cv
1276.89 1158.85 1278.52 1232.62 1278.52 1232.62 cv
1218.94 1509.2 li
cp
.517647 .219608 .207843 rgb
f
1402.02 1203.77 mo
1401.86 1203.77 1401.69 1203.74 1401.52 1203.69 cv
1400.66 1203.41 1400.19 1202.49 1400.47 1201.63 cv
1400.57 1201.31 1410.9 1169.08 1410.46 1155.64 cv
1410.43 1154.73 1411.14 1153.98 1412.04 1153.95 cv
1413.07 1153.9 1413.69 1154.63 1413.72 1155.53 cv
1414.18 1169.54 1404.01 1201.29 1403.58 1202.63 cv
1403.35 1203.33 1402.71 1203.77 1402.02 1203.77 cv
cp
f
1269.23 1169.47 mo
1268.88 1169.47 1268.53 1169.35 1268.23 1169.13 cv
1249.11 1154.36 1221.95 1165.28 1221.68 1165.4 cv
1220.84 1165.75 1219.89 1165.35 1219.55 1164.51 cv
1219.21 1163.68 1219.6 1162.73 1220.43 1162.38 cv
1221.62 1161.9 1249.61 1150.6 1270.23 1166.54 cv
1270.94 1167.09 1271.07 1168.12 1270.52 1168.83 cv
1270.2 1169.25 1269.72 1169.47 1269.23 1169.47 cv
cp
f
1164.44 1503.9 mo
1164.34 1503.9 1164.24 1503.89 1164.14 1503.87 cv
1163.25 1503.7 1162.67 1502.85 1162.84 1501.96 cv
1224.15 1178.56 li
1224.32 1177.67 1225.16 1177.09 1226.06 1177.25 cv
1226.95 1177.42 1227.53 1178.28 1227.36 1179.16 cv
1166.05 1502.57 li
1165.9 1503.36 1165.21 1503.9 1164.44 1503.9 cv
cp
f
1295.13 1491.23 mo
1295.07 1491.23 li
1294.17 1491.2 1293.46 1490.44 1293.5 1489.54 cv
1305.47 1167.77 li
1305.5 1166.87 1306.28 1166.22 1307.16 1166.2 cv
1308.07 1166.24 1308.77 1166.99 1308.74 1167.89 cv
1296.76 1489.66 li
1296.73 1490.54 1296 1491.23 1295.13 1491.23 cv
cp
f
1497.84 751.611 mo
1497.84 751.611 1563.54 768.756 1577.15 786.178 cv
1590.76 803.6 1687.13 1024.64 1617.44 1024.64 cv
1588.04 1024.64 li
1602.74 1101.52 li
1602.74 1101.52 1440.89 1114.45 1388.7 1101.94 cv
1388.7 1024.64 li
1267.91 1024.64 li
1257.3 991.434 li
1341.95 983.29 li
1396.37 793.423 li
1437.09 772.31 li
1437.09 772.31 1443.08 789.309 1472.04 785.634 cv
1506.7 781.233 1497.84 751.611 1497.84 751.611 cv
cp
.192157 .329412 .482353 rgb
f
1384.19 991.434 mo
1564.4 962.578 li
1564.4 962.578 1561.65 845.543 1545.45 814.228 cv
1545.45 814.228 1558.64 924.681 1549.93 949.073 cv
1384.19 991.434 li
cp
.12549 .203922 .258824 rgb
f
1408.62 819.934 mo
1406.63 985.698 li
1417.55 982.906 li
1408.62 819.934 li
cp
f
1619.89 987.331 mo
1619.41 987.331 1618.94 987.124 1618.61 986.722 cv
1600.13 963.759 1561.24 962.655 1560.85 962.646 cv
1559.95 962.627 1559.23 961.88 1559.25 960.978 cv
1559.27 960.087 1560 959.379 1560.88 959.379 cv
1560.92 959.379 li
1562.57 959.414 1601.71 960.512 1621.16 984.674 cv
1621.72 985.375 1621.61 986.405 1620.91 986.971 cv
1620.61 987.213 1620.25 987.331 1619.89 987.331 cv
cp
f
1387.95 987.331 mo
1387.75 987.331 1387.55 987.296 1387.35 987.216 cv
1361.33 976.953 1342.78 984.709 1342.6 984.788 cv
1341.77 985.148 1340.8 984.763 1340.45 983.937 cv
1340.09 983.107 1340.47 982.146 1341.3 981.79 cv
1342.11 981.442 1361.29 973.425 1388.55 984.179 cv
1389.39 984.511 1389.8 985.458 1389.47 986.297 cv
1389.22 986.938 1388.6 987.331 1387.95 987.331 cv
cp
f
1454.1 874.241 mo
1453.24 874.241 1452.52 873.568 1452.47 872.697 cv
1450.85 843.537 1454.74 785.98 1454.77 785.402 cv
1454.84 784.501 1455.63 783.826 1456.52 783.884 cv
1457.42 783.945 1458.09 784.725 1458.03 785.626 cv
1458 786.201 1454.13 843.556 1455.73 872.52 cv
1455.79 873.419 1455.1 874.19 1454.19 874.238 cv
1454.1 874.241 li
cp
f
1396.12 1024.64 mo
1384.19 991.434 li
1384.19 991.434 1345.49 991.705 1318.54 1024.64 cv
1396.12 1024.64 li
cp
.937255 .803922 .792157 rgb
f
1269.23 1024.64 mo
1257.3 991.434 li
1257.3 991.434 1218.6 991.705 1191.65 1024.64 cv
1269.23 1024.64 li
cp
f
1641.03 1232.62 mo
1724.88 1550.58 li
1709.09 1550.58 li
1605.37 1232.62 li
1641.03 1232.62 li
cp
.866667 .513726 .454902 rgb
f
1641.03 1232.62 mo
1654.07 1232.62 li
1724.88 1550.58 li
1641.03 1232.62 li
cp
.945098 .823529 .662745 rgb
f
1426.11 1232.62 mo
1342.27 1550.58 li
1358.06 1550.58 li
1461.78 1232.62 li
1426.11 1232.62 li
cp
.866667 .513726 .454902 rgb
f
1426.11 1232.62 mo
1413.08 1232.62 li
1342.27 1550.58 li
1426.11 1232.62 li
cp
.945098 .823529 .662745 rgb
f
495.109 733.297 mo
491.849 723.807 572.686 701.557 563.779 762.054 cv
563.771 762.127 li
563.771 762.127 560.471 766.729 557.668 774.502 cv
554.917 782.129 552.646 792.809 554.455 805.224 cv
558.104 830.289 479.999 827.597 489.011 788.5 cv
490.551 781.823 491.819 776.154 492.878 771.195 cv
495.528 758.786 496.755 751.18 496.949 745.671 cv
497.133 740.493 496.421 737.111 495.109 733.297 cv
cp
.843137 .564706 .505882 rgb
f
563.779 762.054 mo
572.686 701.557 491.849 723.807 495.109 733.297 cv
496.421 737.111 497.133 740.493 496.949 745.671 cv
496.855 748.345 496.512 751.529 495.886 755.501 cv
495.888 755.502 li
536.989 774.638 563.755 762.139 563.767 762.134 cv
563.771 762.127 li
563.779 762.054 li
cp
.686275 .411765 .364706 rgb
f
426.432 673.693 mo
419.003 680.1 421.065 695.037 430.551 709.234 cv
431.114 710.077 431.712 710.915 432.327 711.75 cv
433.38 713.181 434.48 714.603 435.683 715.997 cv
449.417 731.923 467.542 738.804 476.166 731.366 cv
476.444 731.126 476.673 730.842 476.925 730.578 cv
478.176 729.27 479.073 727.657 479.688 725.843 cv
482.753 716.79 478.084 702.207 467.219 689.435 cv
467.114 689.312 467.021 689.186 466.915 689.063 cv
465.778 687.744 464.603 686.513 463.414 685.321 cv
450.237 672.12 434.342 666.871 426.432 673.693 cv
cp
.870588 .584314 .584314 rgb
f
598.055 652.646 mo
598.055 652.646 594.55 677.423 598.672 696.955 cv
602.793 716.489 584.092 749.829 566.163 760.893 cv
548.235 771.956 507.743 755.431 492.269 742.109 cv
476.795 728.788 463.655 692.466 461.493 675.726 cv
459.33 658.984 478.662 589.959 527.278 593.514 cv
575.895 597.068 602.612 610.49 598.055 652.646 cv
cp
.937255 .803922 .792157 rgb
f
598.125 651.565 mo
596.719 651.169 595.431 650.678 594.359 649.979 cv
592.764 648.937 582.503 650.797 581.072 655.199 cv
579.642 659.603 579.541 661.662 585.837 661.277 cv
585.837 661.277 590.851 660.848 597.201 661.052 cv
597.201 661.052 601.482 657.76 598.125 651.565 cv
cp
.768627 .286275 .227451 rgb
f
546.603 660.44 mo
546.603 660.44 520.185 653.661 510.748 661.064 cv
499.827 669.633 508.332 656.735 508.874 656.018 cv
517.302 644.86 532.284 651.305 540.049 647.896 cv
541.794 647.131 551.611 650.648 552.3 655.228 cv
552.989 659.806 552.75 661.853 546.603 660.44 cv
cp
f
506.438 727.09 mo
514.488 737.112 527.143 743.074 534.702 740.407 cv
542.261 737.739 541.864 727.453 533.813 717.431 cv
525.765 707.408 513.11 701.445 505.551 704.113 cv
497.991 706.78 498.389 717.067 506.438 727.09 cv
cp
.87451 .462745 .376471 rgb
f
570.945 698.937 mo
569.333 698.767 li
561.673 697.962 li
561.17 697.909 li
560.446 697.833 559.8 698.337 559.727 699.035 cv
559.174 704.283 li
559.102 704.981 559.629 705.609 560.352 705.685 cv
560.855 705.737 li
560.855 705.737 563.563 706.481 563.782 708.273 cv
563.782 708.273 563.619 709.173 566.711 709.497 cv
567.314 709.561 567.798 709.612 568.188 709.653 cv
574.064 709.892 li
577.155 710.216 577.788 707.518 577.788 707.518 cv
578.292 707.57 li
579.016 707.646 579.662 707.143 579.735 706.444 cv
579.494 701.024 li
579.494 701.024 579.116 699.785 577.239 699.599 cv
570.945 698.937 li
cp
.917647 .203922 .309804 rgb
f
591.88 684.237 mo
586.022 683.514 li
587.546 671.169 li
587.745 669.552 589.219 668.402 590.836 668.603 cv
592.453 668.802 593.603 670.274 593.403 671.892 cv
591.88 684.237 li
cp
.172549 .14902 .211765 rgb
f
542.277 681.576 mo
536.42 680.854 li
537.943 668.509 li
538.143 666.891 539.616 665.741 541.233 665.941 cv
542.85 666.141 544 667.613 543.801 669.23 cv
542.277 681.576 li
cp
f
583.422 724.386 mo
581.882 730.908 583.251 736.522 586.486 739.254 cv
592.843 729.321 597.579 717.975 598.861 708.001 cv
592.455 708.022 585.563 715.314 583.422 724.386 cv
cp
.87451 .462745 .376471 rgb
f
555.5 723.628 mo
555.5 723.628 567.205 736.483 577.55 723.628 cv
577.55 723.628 565.3 747.1 555.5 723.628 cv
cp
f
585.352 741.043 mo
585.349 741.044 li
579.665 749.514 572.861 756.759 566.163 760.893 cv
565.407 761.359 564.602 761.765 563.767 762.134 cv
563.745 762.164 561.231 765.68 558.733 771.741 cv
569.956 771.504 581.158 775.214 591.733 781.135 cv
587.002 760.397 585.352 741.043 585.352 741.043 cv
cp
.133333 .211765 .298039 rgb
f
415.555 792.691 mo
426.739 784.207 483.288 773.146 492.851 771.322 cv
492.878 771.195 li
495.523 758.81 496.75 751.21 496.948 745.703 cv
495.215 744.495 493.641 743.29 492.269 742.109 cv
487.808 738.269 483.554 732.486 479.688 725.843 cv
479.073 727.657 478.176 729.27 476.925 730.578 cv
476.673 730.842 476.444 731.126 476.166 731.366 cv
467.542 738.804 449.417 731.923 435.683 715.997 cv
434.48 714.603 433.38 713.181 432.327 711.75 cv
432.446 723.525 431.408 747.184 422.655 768.483 cv
418.956 777.484 414.289 789.135 409.632 801.635 cv
412.131 796.894 414.161 793.748 415.555 792.691 cv
cp
f
615.933 649.695 mo
609.672 605.15 573.056 571.259 528.889 564.725 cv
484.722 558.191 437.355 599.025 430.821 633.325 cv
430.821 633.325 425.922 619.033 408.771 626.384 cv
391.622 633.733 346.705 685.592 373.247 712.134 cv
396.825 735.712 423.931 722.65 430.551 709.234 cv
421.065 695.037 419.003 680.1 426.432 673.693 cv
433.201 667.854 445.817 670.879 457.574 680.141 cv
457.726 680.535 473.323 721.335 479.688 725.843 cv
479.688 725.843 472.107 703.538 469.5 689.235 cv
473.52 690.005 480.476 689.234 491.302 681.576 cv
491.302 681.576 530.649 685.666 543.823 649.695 cv
543.823 649.695 561.216 648.569 568.294 620.122 cv
568.294 620.122 583.12 660.628 597.387 658.79 cv
598.585 658.635 599.779 658.219 600.961 657.417 cv
600.961 657.417 614.844 692.933 608.311 709.746 cv
608.311 709.746 622.193 694.241 615.933 649.695 cv
cp
f
471.545 731.078 mo
467.384 731.078 453.653 721.75 442.768 711.467 cv
436.457 705.506 425.947 694.276 426.453 686.038 cv
426.682 682.33 428.104 679.611 430.682 677.961 cv
437.47 673.629 449.812 678.339 450.333 678.542 cv
450.754 678.704 450.963 679.178 450.799 679.598 cv
450.634 680.019 450.157 680.229 449.742 680.063 cv
449.623 680.019 437.643 675.447 431.561 679.337 cv
429.447 680.691 428.278 682.979 428.083 686.137 cv
427.738 691.752 433.352 700.325 443.889 710.28 cv
455.94 721.662 468.978 729.696 471.628 729.441 cv
472.343 727.998 465.838 720.085 462.344 715.832 cv
456.419 708.623 455.114 706.826 455.917 705.735 cv
456.479 704.968 457.564 705.407 457.924 705.553 cv
462.492 706.747 li
462.929 706.861 463.188 707.309 463.074 707.744 cv
462.959 708.181 462.506 708.44 462.077 708.326 cv
457.695 707.174 li
458.655 708.774 461.355 712.059 463.605 714.795 cv
470.204 722.823 474.146 727.855 473.267 730.048 cv
473.132 730.378 472.769 730.95 471.821 731.062 cv
471.733 731.073 471.643 731.078 471.545 731.078 cv
cp
.768627 .286275 .227451 rgb
f
869.287 1232.62 mo
953.132 1550.58 li
937.343 1550.58 li
833.626 1232.62 li
869.287 1232.62 li
cp
.866667 .513726 .454902 rgb
f
588.557 1232.62 mo
504.712 1550.58 li
520.501 1550.58 li
624.218 1232.62 li
588.557 1232.62 li
cp
f
406.594 1232.62 mo
871.005 1232.62 li
871.005 1195.06 li
609.127 1195.06 li
500.131 814.228 li
321.933 814.228 li
318.263 818.696 li
311.152 827.353 308.556 838.863 311.262 849.734 cv
406.594 1232.62 li
cp
.74902 .878431 .937255 rgb
f
321.933 814.228 mo
434.088 1184.17 li
434.088 1184.17 439.261 1202.13 508.949 1202.13 cv
578.639 1202.13 634.257 1202.13 634.257 1202.13 cv
634.257 1232.62 li
871.005 1232.62 li
871.005 1195.06 li
609.127 1195.06 li
492.878 814.228 li
321.933 814.228 li
cp
.470588 .729412 .819608 rgb
f
695.707 1472.79 mo
700.594 1413.92 li
750.683 1418.82 li
746.547 1487.96 li
746.547 1487.96 712.325 1528.65 695.707 1472.79 cv
cp
.847059 .603922 .576471 rgb
f
810.402 1551.54 mo
713.808 1551.54 li
713.808 1551.54 697.965 1530.24 687.743 1551.54 cv
653.5 1551.54 li
653.5 1551.54 639.19 1553.92 650.945 1528.88 cv
662.7 1503.84 693.708 1459.42 696.774 1459.93 cv
699.841 1460.44 707.825 1501.35 730.674 1495.15 cv
748.097 1490.42 747.157 1477.75 747.157 1477.75 cv
747.157 1477.75 760.827 1510.99 783.826 1518.15 cv
806.824 1525.3 810.402 1535.35 810.402 1551.54 cv
cp
.698039 .156863 .286275 rgb
f
640.174 1472.79 mo
645.061 1413.92 li
695.149 1418.82 li
691.014 1487.96 li
691.014 1487.96 656.792 1528.65 640.174 1472.79 cv
cp
.92549 .756863 .729412 rgb
f
754.869 1551.54 mo
658.274 1551.54 li
658.274 1551.54 642.431 1530.24 632.209 1551.54 cv
597.967 1551.54 li
597.967 1551.54 583.656 1553.92 595.412 1528.88 cv
607.166 1503.84 638.175 1459.42 641.241 1459.93 cv
644.308 1460.44 652.292 1501.35 675.141 1495.15 cv
692.563 1490.42 691.624 1477.75 691.624 1477.75 cv
691.624 1477.75 705.294 1510.99 728.293 1518.15 cv
751.291 1525.3 754.869 1535.35 754.869 1551.54 cv
cp
.815686 .286275 .392157 rgb
f
453.416 1101.94 mo
453.416 1101.94 441.438 1202.13 508.949 1202.13 cv
576.461 1202.13 658.127 1202.13 658.127 1202.13 cv
637.438 1442.78 li
637.438 1442.78 663.571 1474.36 704.949 1442.78 cv
704.949 1442.78 726.728 1459.11 756.127 1443.87 cv
756.127 1443.87 851.949 1219.56 858.483 1189.07 cv
865.017 1158.58 871.549 1142.33 794.238 1113.93 cv
716.928 1085.54 453.416 1101.94 453.416 1101.94 cv
cp
.188235 .32549 .482353 rgb
f
743.047 1103.3 mo
737.655 1102.65 732.066 1102.05 726.3 1101.52 cv
766.017 1118.22 766.652 1140.21 765.655 1155.17 cv
764.43 1173.55 704.949 1442.78 704.949 1442.78 cv
709.979 1445.66 li
710.119 1445.72 li
710.225 1445.25 767.294 1189.85 773.005 1156.81 cv
777.415 1131.29 762.863 1114.77 743.047 1103.3 cv
cp
.105882 .211765 .317647 rgb
f
813.022 1161.3 mo
812.363 1161.3 811.741 1160.9 811.494 1160.24 cv
811.175 1159.4 811.601 1158.46 812.444 1158.14 cv
813.801 1157.63 845.848 1145.72 862.452 1158.37 cv
863.169 1158.91 863.308 1159.94 862.761 1160.66 cv
862.217 1161.38 861.194 1161.52 860.472 1160.96 cv
845.31 1149.42 813.917 1161.08 813.6 1161.19 cv
813.409 1161.26 813.215 1161.3 813.022 1161.3 cv
cp
f
470.156 1157.88 mo
462.474 1157.88 456.313 1155.92 455.87 1155.77 cv
455.014 1155.49 454.547 1154.57 454.826 1153.72 cv
455.102 1152.86 456.027 1152.39 456.884 1152.67 cv
457.059 1152.72 474.451 1158.24 486.409 1150.26 cv
493.065 1145.83 496.896 1137.99 497.793 1126.96 cv
497.868 1126.06 498.679 1125.39 499.555 1125.46 cv
500.454 1125.54 501.124 1126.32 501.051 1127.22 cv
500.066 1139.31 495.744 1147.97 488.207 1152.99 cv
482.515 1156.78 475.909 1157.88 470.156 1157.88 cv
cp
f
670.474 1445.52 mo
649.023 1445.52 643.853 1435.33 643.586 1434.77 cv
643.197 1433.96 643.543 1432.98 644.357 1432.59 cv
645.173 1432.21 646.137 1432.55 646.527 1433.35 cv
646.639 1433.57 654.725 1448.53 693.402 1439.13 cv
694.276 1438.94 695.162 1439.46 695.376 1440.33 cv
695.589 1441.21 695.05 1442.1 694.175 1442.31 cv
684.643 1444.62 676.84 1445.52 670.474 1445.52 cv
cp
f
738.559 1436.61 mo
723.76 1436.61 717.69 1432.27 717.381 1432.04 cv
716.657 1431.5 716.506 1430.48 717.041 1429.75 cv
717.577 1429.04 718.593 1428.87 719.317 1429.41 cv
719.421 1429.48 728.212 1435.56 750.731 1432.45 cv
751.649 1432.33 752.451 1432.95 752.572 1433.84 cv
752.697 1434.74 752.072 1435.56 751.179 1435.68 cv
746.409 1436.34 742.216 1436.61 738.559 1436.61 cv
cp
f
839.143 829.928 mo
839.143 829.928 829.338 817.169 841.641 791.335 cv
853.943 765.502 852.601 778.536 851.706 787.226 cv
850.812 795.915 853.034 806.91 864.534 796.028 cv
876.035 785.146 909.338 754.748 900.507 769.733 cv
891.675 784.72 880.204 793.444 880.204 793.444 cv
880.204 793.444 922.793 758.997 914.321 773.563 cv
905.849 788.128 887.038 800.752 887.038 800.752 cv
887.038 800.752 914.146 783.959 910.105 792.501 cv
906.064 801.042 893.755 811.595 893.755 811.595 cv
893.755 811.595 916.94 799.808 908.945 810.419 cv
900.95 821.029 858.512 857.424 839.143 829.928 cv
cp
.92549 .756863 .729412 rgb
f
434.088 965.708 mo
451.238 934.267 li
451.238 934.267 452.055 965.708 453.688 970.608 cv
434.088 965.708 li
cp
833.438 816.718 mo
727.271 904.05 li
727.271 904.05 661.938 862.396 648.872 839.531 cv
639.602 823.311 617.552 795.592 591.733 781.135 cv
581.158 775.214 569.956 771.504 558.733 771.741 cv
558.733 771.742 li
558.733 771.742 558.253 773.914 556.915 776.757 cv
553.837 783.295 546.156 793.441 528.889 789.309 cv
495.338 781.278 494.257 771.057 494.257 771.057 cv
494.257 771.057 493.741 771.152 492.851 771.322 cv
483.288 773.146 426.739 784.207 415.555 792.691 cv
414.161 793.748 412.131 796.894 409.632 801.635 cv
390.199 838.516 342.164 973.102 340.716 991.434 cv
339.083 1012.12 332.277 1024.64 397.61 1024.64 cv
429.951 1024.64 439.206 1024.64 443.344 1024.64 cv
434.088 1108.22 li
434.088 1108.22 549.238 1150.68 659.488 1108.22 cv
659.488 1108.22 638.8 1024.37 633.083 997.422 cv
627.366 970.472 626.005 944.066 626.005 944.066 cv
626.005 944.066 711.755 1008.58 737.889 1001.23 cv
764.021 993.884 871.005 842.8 871.005 842.8 cv
833.438 816.718 li
cp
.815686 .286275 .392157 rgb
f
564.465 990.889 mo
453.688 970.608 li
451.238 934.267 li
488.286 826.467 li
461.33 938.622 li
467.027 961.489 li
564.465 990.889 li
cp
.486275 .196078 .262745 rgb
f
626.005 944.066 mo
626.005 944.066 631.994 903.778 626.005 884.722 cv
620.017 865.667 599.248 824.289 599.248 824.289 cv
599.248 824.289 630.034 871.655 633.192 890.711 cv
636.35 909.767 637.438 941.072 637.438 941.072 cv
669.265 973.613 li
626.005 944.066 li
cp
f
434.087 967.342 mo
433.736 967.342 433.382 967.227 433.084 966.994 cv
432.843 966.813 408.868 948.597 375.113 962.99 cv
374.285 963.348 373.323 962.958 372.969 962.129 cv
372.615 961.3 373.001 960.339 373.831 959.985 cv
409.425 944.81 434.847 964.225 435.095 964.423 cv
435.805 964.978 435.93 966.002 435.374 966.713 cv
435.054 967.125 434.572 967.342 434.087 967.342 cv
cp
f
715.022 975.247 mo
714.331 975.247 713.69 974.807 713.467 974.114 cv
700.27 933.02 725.784 903.269 726.044 902.972 cv
726.636 902.299 727.669 902.229 728.347 902.821 cv
729.025 903.415 729.094 904.445 728.502 905.125 cv
728.255 905.409 703.96 933.829 716.577 973.112 cv
716.853 973.974 716.381 974.893 715.521 975.167 cv
715.355 975.222 715.188 975.247 715.022 975.247 cv
cp
f
555.499 1026.28 mo
554.597 1026.28 553.866 1025.55 553.866 1024.65 cv
553.866 994.154 li
553.866 993.252 554.597 992.521 555.499 992.521 cv
556.401 992.521 557.133 993.252 557.133 994.154 cv
557.133 1024.65 li
557.133 1025.55 556.401 1026.28 555.499 1026.28 cv
cp
f
856.848 847.154 mo
856.498 847.154 856.145 847.043 855.846 846.81 cv
831.346 827.755 li
830.635 827.204 830.505 826.176 831.061 825.465 cv
831.617 824.754 832.641 824.623 833.353 825.178 cv
857.853 844.232 li
858.563 844.784 858.693 845.812 858.138 846.522 cv
857.815 846.938 857.334 847.154 856.848 847.154 cv
cp
f
555.498 841.629 mo
554.71 841.629 554.016 841.059 553.887 840.254 cv
548.807 808.631 541.604 790.132 541.531 789.949 cv
541.201 789.109 541.612 788.161 542.451 787.83 cv
543.294 787.505 544.239 787.913 544.571 788.75 cv
544.645 788.937 551.971 807.729 557.111 839.737 cv
557.256 840.628 556.649 841.467 555.758 841.61 cv
555.498 841.629 li
cp
f
492.878 771.195 mo
492.878 771.195 527.188 788.324 536.988 790.245 cv
526.376 815.033 li
492.878 771.195 li
cp
.752941 .886275 .941176 rgb
f
543.051 789.35 mo
543.051 789.35 558.701 816.667 558.733 815.033 cv
558.767 813.4 558.733 771.741 558.733 771.741 cv
543.051 789.35 li
cp
f
564.465 990.889 mo
564.465 1024.64 li
633.192 1024.64 li
633.192 1024.64 627.812 990.889 564.465 990.889 cv
cp
.92549 .756863 .729412 rgb
f
406.594 1232.62 mo
322.75 1550.58 li
338.539 1550.58 li
442.255 1232.62 li
406.594 1232.62 li
cp
.945098 .823529 .662745 rgb
f
338.539 1550.58 mo
456.377 1232.62 li
442.255 1232.62 li
338.539 1550.58 li
cp
.866667 .513726 .454902 rgb
f
633.271 1232.62 mo
717.115 1550.58 li
701.326 1550.58 li
597.609 1232.62 li
633.271 1232.62 li
cp
.945098 .823529 .662745 rgb
f
633.271 1232.62 mo
646.31 1232.62 li
717.115 1550.58 li
633.271 1232.62 li
cp
.866667 .513726 .454902 rgb
f
2226.71 1118.16 mo
2226.7 1085.49 li
284.672 1085.68 li
284.675 1118.35 li
387.748 1118.34 li
322.75 1550.58 li
330.372 1550.58 li
403.901 1118.34 li
705.043 1118.31 li
723.461 1550.58 li
739.373 1550.58 li
739.373 1118.31 li
1925.52 1118.19 li
1860.5 1550.58 li
1868.13 1550.58 li
1941.68 1118.19 li
2169.5 1118.16 li
2187.93 1550.58 li
2203.84 1550.58 li
2203.84 1118.16 li
2226.71 1118.16 li
cp
.945098 .823529 .662745 rgb
f
2259.99 1085.62 mo
239.956 1085.62 li
239.956 1024.64 li
2259.99 1024.64 li
2259.99 1085.62 li
cp
.501961 .819608 .929412 rgb
f
239.956 1085.62 mo
732.172 1085.62 li
732.172 1024.64 li
239.956 1024.64 li
239.956 1085.62 li
cp
.333333 .67451 .768627 rgb
f
719.105 1118.35 mo
719.105 1101.94 li
2226.7 1085.49 li
732.172 1085.53 li
284.672 1085.68 li
284.672 1118.35 li
328.099 1118.35 li
309.683 1550.58 li
322.75 1550.58 li
388.083 1118.35 li
645.061 1118.35 li
710.394 1550.58 li
723.461 1550.58 li
705.045 1118.35 li
719.105 1118.35 li
cp
.807843 .439216 .388235 rgb
f
2109.53 1118.35 mo
2174.86 1550.58 li
2187.93 1550.58 li
2169.42 1116.11 li
2109.53 1118.35 li
cp
f
1847.44 1550.58 mo
1860.5 1550.58 li
1925.84 1118.35 li
1865.95 1116.11 li
1847.44 1550.58 li
cp
f
2225.13 980.289 mo
1885.14 980.289 li
1863.13 980.289 1845.29 962.448 1845.29 940.439 cv
1845.29 774.561 li
1845.29 752.552 1863.13 734.711 1885.14 734.711 cv
2225.13 734.711 li
2247.14 734.711 2264.98 752.552 2264.98 774.561 cv
2264.98 940.439 li
2264.98 962.448 2247.14 980.289 2225.13 980.289 cv
cp
.352941 .627451 .854902 rgb
f
2079.57 996.807 mo
2079.57 829.325 li
2030.7 829.325 li
2030.7 996.807 li
2001.58 996.807 li
1986.21 996.807 1973.74 1009.27 1973.74 1024.64 cv
2030.7 1024.64 li
2079.57 1024.64 li
2136.53 1024.64 li
2136.53 1009.27 2124.06 996.807 2108.69 996.807 cv
2079.57 996.807 li
cp
.14902 .52549 .776471 rgb
f
2079.57 829.325 mo
2099.29 980.289 li
2079.57 980.289 li
2079.57 829.325 li
cp
.0705882 .396078 .576471 rgb
f
2030.59 829.325 mo
2010.87 980.289 li
2030.59 980.289 li
2030.59 829.325 li
cp
f
795.327 1024.64 mo
572.105 1024.64 li
572.105 1006.13 li
795.327 1006.13 li
795.327 1024.64 li
cp
.270588 .388235 .486275 rgb
f
771.372 1024.64 mo
898.771 857.5 li
1165.82 857.5 li
1027.8 1024.64 li
771.372 1024.64 li
cp
.388235 .529412 .666667 rgb
f
898.771 857.5 mo
911.021 857.5 li
783.213 1024.64 li
771.372 1024.64 li
898.771 857.5 li
cp
.129412 .2 .294118 rgb
f
301.005 981.771 mo
301.005 975.43 310.296 970.003 321.933 969.116 cv
321.933 994.43 li
309.287 993.511 301.005 987.463 301.005 981.771 cv
cp
321.933 954.646 mo
321.933 962.552 li
306.291 963.563 294.472 971.638 294.472 981.771 cv
294.472 991.992 306.507 1000.12 322.358 1001.01 cv
324.717 1015.81 337.502 1027.13 352.966 1027.13 cv
370.105 1027.13 384 1013.24 384 996.098 cv
384 954.646 li
321.933 954.646 li
cp
.886275 .72549 .490196 rgb
f
1425.25 1024.64 mo
1283.69 1024.64 li
1283.69 1011.58 li
1425.25 1011.58 li
1425.25 1024.64 li
cp
.639216 .454902 .27451 rgb
f
1221.06 839.412 mo
1295.13 1024.64 li
1011.47 1024.64 li
943.908 871.618 li
937.265 856.571 948.273 839.659 964.722 839.645 cv
1221.06 839.412 li
cp
.945098 .823529 .662745 rgb
f
1221.06 839.412 mo
1208.02 839.412 li
1283.69 1024.64 li
1295.13 1024.64 li
1221.06 839.412 li
cp
.709804 .588235 .443137 rgb
f
1208.02 1024.64 mo
1031.07 1024.64 li
1022.35 1024.64 1015.28 1017.58 1015.28 1008.86 cv
1015.28 1006.68 li
1015.28 997.958 1022.35 990.889 1031.07 990.889 cv
1208.02 990.889 li
1208.02 1024.64 li
cp
.639216 .454902 .27451 rgb
f
1208.02 1018.11 mo
1026.17 1018.11 li
1026.17 998.511 li
1208.02 998.511 li
1208.02 1018.11 li
cp
1 1 1 rgb
f
1247.33 991.144 mo
1097.35 991.144 li
1088.63 991.144 1081.56 984.075 1081.56 975.355 cv
1081.56 973.177 li
1081.56 964.458 1088.63 957.389 1097.35 957.389 cv
1247.33 957.389 li
1247.33 991.144 li
cp
.627451 .321569 .290196 rgb
f
1247.33 984.61 mo
1090.92 984.61 li
1090.92 965.011 li
1247.33 965.011 li
1247.33 984.61 li
cp
1 1 1 rgb
f
1807.4 1500.86 mo
1819.82 1372.28 li
1765.63 1372.28 li
1758.58 1499.73 li
1758.58 1499.73 1787.91 1539.66 1807.4 1500.86 cv
cp
.92549 .756863 .729412 rgb
f
1671.72 1548.88 mo
1829.4 1548.88 li
1826.14 1517.91 li
1825.41 1510.94 1821.28 1504.79 1815.11 1501.46 cv
1808.35 1497.82 li
1808.35 1497.82 1772.09 1519.63 1759.54 1498.95 cv
1759.54 1498.95 1671.72 1494.22 1671.72 1548.88 cv
cp
.627451 .321569 .290196 rgb
f
1923.76 1498.95 mo
1911.34 1370.37 li
1970.95 1370.37 li
1972.57 1497.82 li
1972.57 1497.82 1943.24 1537.75 1923.76 1498.95 cv
cp
.92549 .756863 .729412 rgb
f
1835.93 1548.88 mo
1993.62 1548.88 li
1990.36 1517.91 li
1989.63 1510.94 1985.5 1504.79 1979.33 1501.46 cv
1972.57 1497.82 li
1972.57 1497.82 1936.31 1519.63 1923.76 1498.95 cv
1923.76 1498.95 1835.93 1494.22 1835.93 1548.88 cv
cp
.627451 .321569 .290196 rgb
f
1944.87 506.612 mo
1955.72 488.594 1956.6 469.227 1946.84 463.354 cv
1937.08 457.481 1920.38 467.327 1909.54 485.345 cv
1909.45 485.484 1909.38 485.624 1909.3 485.763 cv
1899.04 503.08 1897.98 521.496 1906.69 527.955 cv
1906.98 528.172 1907.26 528.414 1907.57 528.604 cv
1917.33 534.477 1934.03 524.63 1944.87 506.612 cv
cp
.87451 .462745 .376471 rgb
f
1915.56 521.051 mo
1914.8 521.051 1914.42 520.64 1914.25 520.383 cv
1913.16 518.681 1915.58 513.979 1919.7 506.44 cv
1921 504.073 1922.53 501.258 1923.16 499.734 cv
1920.13 501.185 li
1919.74 501.379 1919.24 501.207 1919.05 500.8 cv
1918.85 500.392 1919.02 499.905 1919.43 499.711 cv
1923.01 498.004 li
1923.2 497.867 1924.09 497.298 1924.74 497.908 cv
1925.64 498.742 1924.91 500.306 1921.13 507.224 cv
1919.02 511.091 1915.09 518.291 1915.63 519.51 cv
1917.72 519.268 1926.98 510.758 1934.93 499.752 cv
1941.88 490.134 1945.08 482.395 1943.95 477.957 cv
1943.32 475.453 1942.08 473.864 1940.19 473.105 cv
1934.73 470.909 1925.85 476.415 1925.76 476.471 cv
1925.38 476.709 1924.87 476.599 1924.63 476.211 cv
1924.4 475.828 1924.51 475.325 1924.89 475.086 cv
1925.29 474.841 1934.58 469.099 1940.8 471.589 cv
1943.18 472.542 1944.77 474.551 1945.54 477.556 cv
1947.14 483.853 1941.37 493.622 1936.25 500.709 cv
1928.86 510.941 1918.87 520.824 1915.71 521.046 cv
1915.56 521.051 li
cp
.768627 .286275 .227451 rgb
f
1889.21 540.641 mo
1892.19 531.06 1810.75 511.161 1821.4 571.375 cv
1821.41 571.448 li
1821.41 571.448 1824.84 575.953 1827.87 583.641 cv
1830.84 591.185 1833.42 601.794 1831.97 614.257 cv
1829.05 639.417 1907.04 634.463 1896.9 595.645 cv
1895.17 589.014 1893.74 583.385 1892.54 578.458 cv
1889.53 566.131 1888.08 558.563 1887.73 553.063 cv
1887.4 547.893 1888.01 544.491 1889.21 540.641 cv
cp
.843137 .564706 .505882 rgb
f
1888.59 560.112 mo
1888.59 560.112 li
1888.14 557.396 1887.86 555.086 1887.73 553.063 cv
1887.4 547.893 1888.01 544.491 1889.21 540.641 cv
1892.19 531.06 1810.75 511.161 1821.4 571.375 cv
1821.4 571.375 1847.16 585.322 1888.59 560.112 cv
cp
.686275 .411765 .364706 rgb
f
1783.97 463.005 mo
1783.97 463.005 1788.19 487.67 1784.64 507.314 cv
1781.08 526.959 1800.74 559.744 1818.98 570.283 cv
1837.23 580.822 1877.22 563.131 1892.3 549.367 cv
1907.39 535.604 1919.47 498.915 1921.14 482.119 cv
1922.82 465.322 1901.5 396.887 1853 401.849 cv
1804.51 406.81 1778.19 421 1783.97 463.005 cv
cp
.937255 .803922 .792157 rgb
f
1785.39 474.654 mo
1785.39 474.654 1786.21 468.929 1795.26 468.456 cv
1805.63 467.915 1806.2 476.473 1807.92 475.524 cv
1809.64 474.575 1807.62 463.89 1797.2 461.926 cv
1786.78 459.962 1783.23 469.42 1785.39 474.654 cv
cp
.768627 .286275 .227451 rgb
f
1836.2 470.546 mo
1836.2 470.546 1864.99 459.396 1874.53 469.481 cv
1884.07 479.566 1878.2 467.626 1873.33 462.553 cv
1863.66 452.456 1841.62 462.839 1841.53 457.436 cv
1841.5 455.53 1830.28 461.275 1830.03 465.898 cv
1829.78 470.521 1830.21 472.537 1836.2 470.546 cv
cp
f
1812.86 508.359 mo
1814.48 508.296 li
1822.18 507.995 li
1822.68 507.976 li
1823.41 507.947 1824.02 508.493 1824.05 509.194 cv
1824.26 514.468 li
1824.28 515.169 1823.72 515.761 1822.99 515.788 cv
1822.48 515.809 li
1822.48 515.809 1819.73 516.372 1819.4 518.146 cv
1819.4 518.146 1819.5 519.055 1816.39 519.176 cv
1815.79 519.199 1815.3 519.219 1814.91 519.233 cv
1809.03 519.086 li
1805.92 519.207 1805.47 516.473 1805.47 516.473 cv
1804.96 516.492 li
1804.24 516.521 1803.63 515.976 1803.6 515.274 cv
1804.19 509.882 li
1804.19 509.882 1804.65 508.67 1806.54 508.606 cv
1812.86 508.359 li
cp
.917647 .203922 .309804 rgb
f
1880.07 545.667 mo
1870.87 555.021 1858.71 557.986 1852.93 552.29 cv
1847.14 546.595 1849.91 534.396 1859.12 525.043 cv
1868.33 515.689 1880.48 512.725 1886.27 518.419 cv
1892.05 524.115 1889.28 536.314 1880.07 545.667 cv
cp
.87451 .462745 .376471 rgb
f
1800.68 534.292 mo
1798.27 525.286 1791.17 518.197 1784.77 518.361 cv
1786.34 528.293 1791.4 539.498 1798.04 549.242 cv
1801.2 546.419 1802.4 540.767 1800.68 534.292 cv
cp
f
1854.36 496.007 mo
1848.51 495.284 li
1850.03 482.938 li
1850.23 481.321 1851.7 480.172 1853.32 480.372 cv
1854.94 480.571 1856.09 482.044 1855.89 483.661 cv
1854.36 496.007 li
cp
.172549 .14902 .211765 rgb
f
1791.19 499.563 mo
1797.05 498.841 li
1795.52 486.496 li
1795.32 484.879 1793.85 483.729 1792.23 483.929 cv
1790.62 484.128 1789.47 485.602 1789.67 487.219 cv
1791.19 499.563 li
cp
f
1804.83 532.059 mo
1804.83 532.059 1813.41 544.513 1832.6 532.059 cv
1832.6 532.059 1815.45 559.417 1804.83 532.059 cv
cp
.752941 .262745 .211765 rgb
f
1914.79 378.116 mo
1901.66 378.881 1872.88 374.402 1855.33 371.365 cv
1847.37 369.988 1839.79 366.91 1833.22 362.216 cv
1808.64 344.662 1783.67 360.437 1772.98 371.175 cv
1751.86 392.402 1754.74 430.111 1769.44 457.061 cv
1772.23 462.168 1776.14 464.95 1780.63 466.118 cv
1781.98 475.74 1785.87 497.35 1785.87 497.35 cv
1785.87 466.791 li
1785.85 466.768 li
1804.86 467.012 1829.98 446.444 1829.98 446.444 cv
1860.57 471.761 1862 450.256 1862 450.256 cv
1877.79 470.4 1912.91 471.779 1912.91 471.779 cv
1919.44 493.304 1908.09 525.43 1908.09 525.43 cv
1923.16 511.316 1923.91 468.626 1923.91 468.626 cv
1940.35 459.23 1949.13 465.233 1949.13 465.233 cv
1990.26 430.668 1944.03 376.417 1914.79 378.116 cv
cp
.639216 .380392 .447059 rgb
f
1977.56 922.425 mo
1778.7 929.366 li
1742.55 1423.72 li
1741.78 1434.16 1750.05 1443.05 1760.51 1443.05 cv
1819.04 1443.05 li
1828.52 1443.05 1836.37 1435.72 1837.02 1426.27 cv
1865.27 1013.62 li
1901.39 1426.61 li
1902.21 1435.91 1910 1443.05 1919.34 1443.05 cv
1970.97 1443.05 li
1981.08 1443.05 1989.21 1434.73 1988.98 1424.63 cv
1977.56 922.425 li
cp
.192157 .329412 .482353 rgb
f
1865.27 1013.62 mo
1901.39 1426.61 li
1901.79 1431.15 1903.87 1435.15 1906.96 1438.08 cv
1873.43 1001.78 li
1865.27 1013.62 li
cp
.105882 .211765 .317647 rgb
f
1789.2 1437.33 mo
1759.57 1437.33 1749.75 1426.9 1749.35 1426.45 cv
1748.75 1425.79 1748.79 1424.75 1749.46 1424.15 cv
1750.13 1423.54 1751.15 1423.59 1751.76 1424.25 cv
1751.91 1424.41 1761.3 1434.07 1789.2 1434.07 cv
1817.3 1434.07 1828.18 1424.26 1828.28 1424.16 cv
1828.94 1423.55 1829.97 1423.58 1830.59 1424.24 cv
1831.21 1424.9 1831.18 1425.93 1830.52 1426.54 cv
1830.05 1426.98 1818.75 1437.33 1789.2 1437.33 cv
cp
f
1944.44 1437.33 mo
1914.81 1437.33 1904.99 1426.9 1904.59 1426.45 cv
1903.98 1425.79 1904.03 1424.75 1904.7 1424.15 cv
1905.37 1423.54 1906.39 1423.59 1907 1424.25 cv
1907.15 1424.41 1916.54 1434.07 1944.44 1434.07 cv
1972.54 1434.07 1983.42 1424.26 1983.52 1424.16 cv
1984.18 1423.55 1985.21 1423.58 1985.83 1424.24 cv
1986.45 1424.9 1986.42 1425.93 1985.76 1426.54 cv
1985.29 1426.98 1974 1437.33 1944.44 1437.33 cv
cp
f
1862.74 962.139 mo
1809.98 962.139 1779.87 941.92 1779.4 941.598 cv
1778.66 941.084 1778.48 940.066 1778.99 939.326 cv
1779.51 938.586 1780.52 938.401 1781.26 938.911 cv
1781.98 939.409 1854.39 987.863 1972.37 932.024 cv
1973.18 931.645 1974.15 931.982 1974.54 932.803 cv
1974.93 933.619 1974.58 934.592 1973.77 934.979 cv
1930.27 955.561 1892.82 962.139 1862.74 962.139 cv
cp
f
1977.56 987.621 mo
1968.77 987.621 1961.77 984.728 1956.76 979.023 cv
1945.54 966.26 1948.27 944.092 1948.39 943.154 cv
1948.51 942.261 1949.31 941.613 1950.22 941.744 cv
1951.11 941.862 1951.74 942.679 1951.63 943.575 cv
1951.6 943.789 1948.98 965.233 1959.21 976.874 cv
1963.58 981.838 1969.75 984.354 1977.56 984.354 cv
1978.46 984.354 1979.19 985.085 1979.19 985.988 cv
1979.19 986.891 1978.46 987.621 1977.56 987.621 cv
cp
f
1865.27 1015.26 mo
1864.57 1015.26 1863.93 1014.81 1863.71 1014.12 cv
1863.42 1013.2 1856.55 991.258 1859.82 960.505 cv
1859.91 959.688 1860.59 959.063 1861.41 959.044 cv
1873.4 958.754 li
1873.85 958.764 1874.26 958.91 1874.58 959.22 cv
1874.89 959.525 1875.07 959.947 1875.07 960.388 cv
1875.07 1001.78 li
1875.07 1002.68 1874.34 1003.41 1873.43 1003.41 cv
1872.53 1003.41 1871.8 1002.68 1871.8 1001.78 cv
1871.8 962.063 li
1862.93 962.275 li
1860.09 991.574 1866.75 1012.91 1866.82 1013.13 cv
1867.1 1013.99 1866.62 1014.91 1865.76 1015.18 cv
1865.6 1015.23 1865.43 1015.26 1865.27 1015.26 cv
cp
f
2036.77 811.767 mo
2020.79 747.067 2000.91 621.505 1972.53 608.384 cv
1972.53 608.313 li
1971.09 607.794 li
1970.93 607.743 1970.78 607.645 1970.62 607.6 cv
1970.43 607.555 li
1893.28 579.771 li
1894.4 584.182 1879.15 605.15 1857.49 606.341 cv
1835.84 607.532 1830.17 590.659 1830.17 590.659 cv
1791.82 608.158 li
1778.95 613.679 1766.98 636.665 1760.96 666.153 cv
1752.61 707.06 1764.5 816.122 1764.5 816.122 cv
1691.87 765.798 li
1670.98 780.71 li
1667.29 783.342 1666.38 788.426 1668.94 792.162 cv
1684.01 814.155 1732.25 882.769 1750.84 887.921 cv
1761.73 890.937 1771.53 890.567 1779.46 881.526 cv
1778.7 929.366 li
1856.69 972.241 1977.56 922.425 1977.56 922.425 cv
1975.77 884.332 li
1975.77 884.329 li
1985.55 887.971 1993.71 890.167 1999.2 890.167 cv
2031.87 890.167 2053.1 877.917 2036.77 811.767 cv
cp
.768627 .262745 .176471 rgb
f
1758.13 721.317 mo
1759.07 766.26 1764.5 816.122 1764.5 816.122 cv
1691.87 765.798 li
1684.85 770.81 li
1690.13 781.412 1699.83 800.833 1706.29 813.307 cv
1715.54 831.181 1772.71 825.378 1772.71 825.378 cv
1779.46 881.526 li
1781.97 824.289 li
1781.97 824.289 1789.59 825.378 1809.19 824.833 cv
1828.79 824.289 1826.61 804.145 1826.61 804.145 cv
1969.39 889.622 li
1977.56 922.425 li
1975.77 884.332 li
1975.77 884.329 li
1826.61 789.337 li
1826.61 789.337 1786.86 749.858 1758.13 721.317 cv
cp
.537255 .152941 .101961 rgb
f
1833.01 722.951 mo
1832.94 722.949 li
1832.04 722.911 1831.34 722.15 1831.38 721.249 cv
1833.4 672.836 1850.46 606.512 1850.63 605.847 cv
1850.85 604.978 1851.73 604.437 1852.62 604.677 cv
1853.49 604.901 1854.02 605.793 1853.79 606.667 cv
1853.62 607.327 1836.65 673.322 1834.64 721.386 cv
1834.6 722.264 1833.88 722.951 1833.01 722.951 cv
cp
f
1834.78 753.511 mo
1967.04 808.465 li
1947.34 655.783 li
1957.14 795.842 li
1834.78 753.511 li
cp
f
2009.82 848.108 mo
2009.28 848.108 2008.76 847.847 2008.45 847.362 cv
1988.64 816.806 1959.07 804.417 1958.77 804.294 cv
1957.93 803.952 1957.53 802.999 1957.88 802.163 cv
1958.22 801.329 1959.19 800.927 1960.01 801.272 cv
1960.31 801.397 1990.83 814.182 2011.19 845.588 cv
2011.68 846.345 2011.46 847.355 2010.7 847.847 cv
2010.43 848.022 2010.12 848.108 2009.82 848.108 cv
cp
f
1885.28 750.998 mo
1909.64 771.918 1933.53 754.254 1937.54 750.98 cv
1937.54 707.728 li
1917.27 717.421 1892.79 710.089 1885.28 707.41 cv
1885.28 750.998 li
cp
1910.26 764.207 mo
1901.71 764.207 1892.12 761.398 1882.56 752.967 cv
1882.21 752.655 1882.01 752.211 1882.01 751.741 cv
1882.01 705.045 li
1882.01 704.499 1882.28 703.99 1882.74 703.688 cv
1883.18 703.386 1883.76 703.324 1884.27 703.536 cv
1884.58 703.667 1915.68 716.285 1938.38 703.619 cv
1938.88 703.337 1939.5 703.343 1940 703.637 cv
1940.5 703.93 1940.81 704.466 1940.81 705.045 cv
1940.81 751.741 li
1940.81 752.211 1940.61 752.655 1940.26 752.967 cv
1940.07 753.136 1927.22 764.207 1910.26 764.207 cv
cp
f
1868.38 935.017 mo
1816.82 935.017 1784 921.286 1783.5 921.066 cv
1782.67 920.709 1782.29 919.749 1782.65 918.922 cv
1783 918.09 1783.96 917.704 1784.79 918.067 cv
1785.57 918.402 1863.91 951.113 1969.26 914.214 cv
1970.11 913.911 1971.04 914.363 1971.34 915.216 cv
1971.64 916.067 1971.19 916.999 1970.34 917.295 cv
1932.05 930.707 1897.28 935.017 1868.38 935.017 cv
cp
f
1765.22 857.092 mo
1765.19 857.092 li
1764.28 857.069 1763.57 856.319 1763.59 855.42 cv
1763.98 839.422 1750.95 820.651 1750.82 820.463 cv
1750.3 819.725 1750.48 818.707 1751.22 818.188 cv
1751.95 817.672 1752.97 817.847 1753.5 818.587 cv
1754.06 819.388 1767.27 838.413 1766.86 855.496 cv
1766.84 856.387 1766.11 857.092 1765.22 857.092 cv
cp
f
1852.21 606.258 mo
1852.21 606.258 1861.48 634.822 1861.6 644.35 cv
1861.6 644.35 1927.88 592.355 1929.24 589.089 cv
1890.31 568.886 li
1890.31 568.886 1881.89 596.477 1852.21 606.258 cv
cp
.356863 .631373 .858824 rgb
f
1852.21 606.258 mo
1830.15 642.444 li
1820.44 590.722 li
1826.85 581.208 li
1826.85 581.208 1841.06 600.832 1852.21 606.258 cv
cp
f
1669.66 662.589 mo
1762.07 662.589 li
1766.45 662.589 1770.32 665.452 1771.6 669.643 cv
1812.34 803.259 li
1814.29 809.657 1809.51 816.122 1802.82 816.122 cv
1716.09 816.122 li
1711.85 816.122 1708.08 813.438 1706.69 809.433 cv
1660.25 675.816 li
1658 669.346 1662.81 662.589 1669.66 662.589 cv
cp
.133333 .215686 .298039 rgb
f
1812.34 803.259 mo
1771.6 669.643 li
1770.32 665.452 1766.45 662.589 1762.07 662.589 cv
1669.66 662.589 li
1666.82 662.589 1664.37 663.789 1662.59 665.611 cv
1758.52 665.611 li
1762.74 665.611 1766.46 668.385 1767.67 672.432 cv
1809.69 813.307 li
1812.26 810.827 1813.5 807.048 1812.34 803.259 cv
cp
.188235 .32549 .482353 rgb
f
1736.57 733.299 mo
1741.48 743.864 1740.99 754.51 1735.47 757.077 cv
1729.95 759.646 1721.49 753.162 1716.57 742.597 cv
1711.66 732.032 1712.15 721.386 1717.67 718.818 cv
1723.19 716.251 1731.65 722.733 1736.57 733.299 cv
cp
f
1834.78 753.511 mo
1834.78 753.511 1817.9 746.774 1804.02 739.355 cv
1801.35 724.491 1787.76 722.633 1787.76 722.633 cv
1791.12 733.662 li
1791.12 733.663 li
1778.29 721.642 1748.61 694.869 1757.01 709.118 cv
1764.48 721.802 1773.82 729.976 1776.52 732.195 cv
1770.82 727.634 1735.39 699.542 1743.19 712.947 cv
1751.66 727.513 1770.47 740.137 1770.47 740.137 cv
1770.47 740.137 1743.37 723.344 1747.41 731.886 cv
1751.45 740.427 1766.31 748.884 1766.31 748.884 cv
1766.31 748.884 1742.8 737.592 1750.8 748.202 cv
1757.47 757.056 1787.2 779.258 1800.45 780.459 cv
1800.45 780.591 li
1800.45 780.591 1813.28 784.786 1823.89 788.083 cv
1836.14 791.891 1847.15 769.017 1834.78 753.511 cv
cp
.92549 .756863 .729412 rgb
f
1671.96 709.515 mo
1671.96 709.515 1656.58 739.939 1665.1 772.723 cv
1673.62 805.506 1701.4 789.511 1694.45 774.233 cv
1694.45 774.233 1688.32 764.827 1694.04 747.191 cv
1699.76 729.556 1698.37 724.894 1695.56 729.691 cv
1692.75 734.49 1691.42 736.634 1691.42 736.634 cv
1691.42 736.634 1702.75 710.092 1696.73 716.728 cv
1690.7 723.362 1686.83 728.059 1686.83 728.059 cv
1686.83 728.059 1704.34 701.823 1698.49 703.048 cv
1692.64 704.273 1680.7 719.178 1680.7 719.178 cv
1680.7 719.178 1693.77 701.721 1689.48 702.129 cv
1685.19 702.537 1673.55 713.665 1673.55 713.665 cv
1671.96 709.515 li
cp
f
1084.43 335.902 mo
916.3 335.902 li
916.3 322.835 li
916.3 276.408 953.937 238.771 1000.36 238.771 cv
1046.79 238.771 1084.43 276.408 1084.43 322.835 cv
1084.43 335.902 li
cp
.368627 .643137 .717647 rgb
f
1003.63 278.764 mo
997.098 278.764 li
997.098 0 li
1003.63 0 li
1003.63 278.764 li
cp
f
1591.63 161.919 mo
1423.51 161.919 li
1423.51 148.853 li
1423.51 102.425 1461.14 64.7886 1507.57 64.7886 cv
1554 64.7886 1591.63 102.425 1591.63 148.853 cv
1591.63 161.919 li
cp
f
1510.84 113.354 mo
1504.3 113.354 li
1504.3 0 li
1510.84 0 li
1510.84 113.354 li
cp
f
233.267 1371.72 mo
233.236 1371.72 li
232.335 1371.71 231.618 1370.96 231.633 1370.06 cv
231.729 1364.78 234.549 1240.32 285.085 1196.44 cv
298.594 1184.71 314.426 1179.87 332.128 1182.05 cv
333.024 1182.16 333.661 1182.98 333.549 1183.88 cv
333.439 1184.77 332.61 1185.42 331.729 1185.3 cv
314.983 1183.23 300.009 1187.81 287.229 1198.91 cv
237.791 1241.83 234.922 1368.84 234.9 1370.12 cv
234.884 1371.01 234.155 1371.72 233.267 1371.72 cv
cp
.207843 .470588 .686275 rgb
f
235.913 1424.89 mo
235.867 1424.89 li
234.965 1424.86 234.254 1424.11 234.278 1423.21 cv
238.291 1277.16 149.759 1202.71 148.865 1201.98 cv
148.167 1201.4 148.067 1200.38 148.64 1199.68 cv
149.211 1198.98 150.24 1198.88 150.937 1199.45 cv
151.844 1200.19 241.603 1275.58 237.545 1423.3 cv
237.52 1424.19 236.793 1424.89 235.913 1424.89 cv
cp
f
234.185 1553.71 mo
226.656 1553.71 li
184.259 1553.71 149.89 1519.33 149.89 1476.94 cv
149.89 1371.86 li
310.951 1371.86 li
310.951 1476.94 li
310.951 1519.33 276.582 1553.71 234.185 1553.71 cv
cp
.188235 .32549 .482353 rgb
f
244.682 1268.98 mo
244.682 1268.98 222.598 1235.85 208.042 1253.92 cv
193.487 1271.99 202.27 1352.3 256.477 1366.6 cv
256.477 1366.6 312.691 1340.5 298.889 1277.26 cv
285.086 1214.02 246.94 1228.32 244.682 1268.98 cv
cp
.352941 .623529 .878431 rgb
f
255.599 1356.08 mo
255.194 1356.08 254.843 1355.78 254.791 1355.36 cv
243.873 1269.08 li
243.816 1268.63 244.132 1268.23 244.581 1268.17 cv
245.018 1268.13 245.436 1268.43 245.493 1268.88 cv
256.411 1355.16 li
256.467 1355.61 256.151 1356.01 255.703 1356.07 cv
255.599 1356.08 li
cp
.188235 .32549 .482353 rgb
f
212.046 1312.94 mo
211.875 1312.92 li
211.434 1312.82 211.153 1312.39 211.246 1311.95 cv
211.32 1311.6 218.97 1276.87 245.265 1273.58 cv
245.699 1273.55 246.122 1273.85 246.177 1274.29 cv
246.233 1274.74 245.916 1275.15 245.469 1275.21 cv
220.315 1278.35 212.916 1311.95 212.844 1312.29 cv
212.762 1312.67 212.422 1312.94 212.046 1312.94 cv
cp
f
282.278 1322.32 mo
281.943 1322.32 281.63 1322.11 281.511 1321.78 cv
277.145 1309.72 250.276 1311.4 250.005 1311.42 cv
249.521 1311.5 249.168 1311.11 249.134 1310.66 cv
249.104 1310.21 249.444 1309.82 249.894 1309.79 cv
251.048 1309.71 278.265 1308.01 283.045 1321.23 cv
283.2 1321.65 282.98 1322.12 282.556 1322.27 cv
282.465 1322.3 282.37 1322.32 282.278 1322.32 cv
cp
f
193.729 1352.67 mo
193.729 1352.67 208.003 1331.26 217.411 1342.94 cv
226.819 1354.62 221.142 1406.53 186.105 1415.77 cv
186.105 1415.77 149.771 1398.9 158.693 1358.03 cv
167.614 1317.15 192.269 1326.4 193.729 1352.67 cv
cp
.352941 .623529 .878431 rgb
f
186.674 1409.26 mo
186.57 1409.25 li
186.122 1409.2 185.806 1408.79 185.862 1408.34 cv
192.918 1352.57 li
192.976 1352.13 193.391 1351.81 193.831 1351.86 cv
194.279 1351.92 194.595 1352.33 194.539 1352.78 cv
187.482 1408.55 li
187.43 1408.96 187.079 1409.26 186.674 1409.26 cv
cp
.188235 .32549 .482353 rgb
f
214.823 1381.38 mo
214.445 1381.38 214.105 1381.11 214.024 1380.73 cv
213.978 1380.51 209.223 1358.99 193.185 1356.99 cv
192.738 1356.93 192.421 1356.52 192.477 1356.08 cv
192.532 1355.63 192.95 1355.31 193.389 1355.37 cv
210.585 1357.52 215.425 1379.46 215.622 1380.39 cv
215.715 1380.83 215.434 1381.26 214.992 1381.36 cv
214.823 1381.38 li
cp
f
169.428 1387.44 mo
169.335 1387.44 169.241 1387.43 169.15 1387.4 cv
168.726 1387.24 168.506 1386.77 168.661 1386.35 cv
171.825 1377.6 189.62 1378.71 190.381 1378.77 cv
190.831 1378.8 191.17 1379.19 191.14 1379.64 cv
191.108 1380.09 190.746 1380.48 190.269 1380.4 cv
190.102 1380.4 172.947 1379.31 170.195 1386.9 cv
170.076 1387.24 169.762 1387.44 169.428 1387.44 cv
cp
f
328.95 1180.08 mo
328.95 1180.08 292.436 1132.65 274.743 1144.69 cv
257.051 1156.74 253.663 1200.78 298.082 1247.08 cv
342.501 1293.38 360.947 1288.49 368.852 1310.32 cv
368.852 1310.32 405.742 1287.74 388.427 1238.05 cv
371.111 1188.36 329.326 1133.24 318.41 1142.73 cv
307.493 1152.22 328.95 1180.08 328.95 1180.08 cv
cp
.352941 .623529 .878431 rgb
f
369.912 1305.83 mo
369.754 1305.83 369.594 1305.79 369.456 1305.69 cv
369.081 1305.44 368.982 1304.93 369.235 1304.56 cv
397.948 1262.02 329.03 1181.42 328.332 1180.61 cv
328.037 1180.27 328.074 1179.75 328.415 1179.46 cv
328.756 1179.17 329.271 1179.2 329.566 1179.54 cv
332.457 1182.88 400.001 1261.9 370.588 1305.47 cv
370.43 1305.71 370.173 1305.83 369.912 1305.83 cv
cp
.188235 .32549 .482353 rgb
f
339.424 1275.34 mo
339.089 1275.34 338.773 1275.14 338.655 1274.8 cv
338.515 1274.41 324.947 1235.23 350.16 1209.24 cv
350.478 1208.92 350.993 1208.91 351.316 1209.22 cv
351.639 1209.54 351.647 1210.05 351.333 1210.38 cv
326.834 1235.63 340.057 1273.87 340.192 1274.25 cv
340.344 1274.68 340.123 1275.15 339.698 1275.29 cv
339.607 1275.33 339.515 1275.34 339.424 1275.34 cv
cp
f
387.335 1255.74 mo
386.986 1255.74 386.664 1255.52 386.555 1255.17 cv
381.563 1239.24 364.245 1234.49 364.069 1234.44 cv
363.634 1234.32 363.374 1233.88 363.489 1233.44 cv
363.605 1233.01 364.055 1232.76 364.485 1232.86 cv
364.669 1232.91 382.848 1237.88 388.114 1254.68 cv
388.249 1255.11 388.009 1255.57 387.578 1255.71 cv
387.335 1255.74 li
cp
f
149.001 1193.08 mo
149.001 1193.08 176.988 1156.72 190.549 1165.96 cv
204.109 1175.19 206.706 1208.94 172.66 1244.43 cv
138.615 1279.92 124.478 1276.17 118.418 1292.9 cv
118.418 1292.9 90.1431 1275.59 103.415 1237.51 cv
116.687 1199.42 148.713 1157.18 157.08 1164.45 cv
165.447 1171.73 149.001 1193.08 149.001 1193.08 cv
cp
.352941 .623529 .878431 rgb
f
117.605 1289.65 mo
117.343 1289.65 117.086 1289.53 116.928 1289.29 cv
94.3042 1255.78 146.166 1195.11 148.384 1192.54 cv
148.678 1192.2 149.193 1192.16 149.536 1192.46 cv
149.877 1192.75 149.914 1193.27 149.619 1193.61 cv
149.085 1194.23 96.3555 1255.9 118.281 1288.38 cv
118.535 1288.75 118.436 1289.26 118.061 1289.51 cv
117.922 1289.61 117.763 1289.65 117.605 1289.65 cv
cp
.188235 .32549 .482353 rgb
f
140.974 1266.28 mo
140.883 1266.28 140.791 1266.27 140.7 1266.24 cv
140.275 1266.08 140.053 1265.62 140.205 1265.19 cv
140.309 1264.9 150.4 1235.7 131.708 1216.43 cv
131.396 1216.11 131.404 1215.59 131.728 1215.28 cv
132.051 1214.96 132.568 1214.97 132.882 1215.3 cv
152.288 1235.3 141.851 1265.44 141.743 1265.74 cv
141.625 1266.08 141.309 1266.28 140.974 1266.28 cv
cp
f
104.253 1251.26 mo
104.009 1251.22 li
103.578 1251.09 103.339 1250.63 103.473 1250.2 cv
107.542 1237.22 121.14 1233.5 121.717 1233.35 cv
122.151 1233.25 122.599 1233.5 122.714 1233.93 cv
122.829 1234.37 122.568 1234.81 122.133 1234.93 cv
122.001 1234.97 108.826 1238.58 105.033 1250.69 cv
104.922 1251.04 104.6 1251.26 104.253 1251.26 cv
cp
f
2273.19 1371.72 mo
2272.29 1371.72 2271.57 1371.01 2271.55 1370.12 cv
2271.53 1368.84 2268.66 1241.82 2219.22 1198.91 cv
2206.44 1187.81 2191.46 1183.23 2174.72 1185.3 cv
2173.8 1185.42 2173.01 1184.77 2172.9 1183.88 cv
2172.79 1182.98 2173.43 1182.16 2174.32 1182.05 cv
2192.02 1179.86 2207.86 1184.71 2221.37 1196.44 cv
2271.9 1240.32 2274.72 1364.78 2274.82 1370.06 cv
2274.83 1370.96 2274.12 1371.71 2273.21 1371.72 cv
2273.19 1371.72 li
cp
.207843 .470588 .686275 rgb
f
2270.54 1424.89 mo
2269.66 1424.89 2268.93 1424.19 2268.91 1423.3 cv
2264.85 1275.58 2354.61 1200.19 2355.51 1199.45 cv
2356.2 1198.88 2357.23 1198.98 2357.81 1199.68 cv
2358.38 1200.38 2358.28 1201.4 2357.59 1201.98 cv
2356.69 1202.71 2268.16 1277.16 2272.17 1423.21 cv
2272.2 1424.11 2271.49 1424.86 2270.58 1424.89 cv
2270.54 1424.89 li
cp
f
2272.27 1553.71 mo
2279.79 1553.71 li
2322.19 1553.71 2356.56 1519.33 2356.56 1476.94 cv
2356.56 1371.86 li
2195.5 1371.86 li
2195.5 1476.94 li
2195.5 1519.33 2229.87 1553.71 2272.27 1553.71 cv
cp
.188235 .32549 .482353 rgb
f
2261.77 1268.98 mo
2261.77 1268.98 2283.85 1235.85 2298.41 1253.92 cv
2312.96 1271.99 2304.18 1352.3 2249.97 1366.6 cv
2249.97 1366.6 2193.76 1340.5 2207.56 1277.26 cv
2221.37 1214.02 2259.51 1228.32 2261.77 1268.98 cv
cp
.352941 .623529 .878431 rgb
f
2250.85 1356.08 mo
2250.75 1356.07 li
2250.3 1356.01 2249.98 1355.61 2250.04 1355.16 cv
2260.96 1268.88 li
2261.01 1268.43 2261.38 1268.11 2261.87 1268.17 cv
2262.32 1268.23 2262.64 1268.63 2262.58 1269.08 cv
2251.66 1355.36 li
2251.61 1355.78 2251.26 1356.08 2250.85 1356.08 cv
cp
.188235 .32549 .482353 rgb
f
2294.41 1312.94 mo
2294.03 1312.94 2293.69 1312.67 2293.61 1312.29 cv
2293.54 1311.95 2286.12 1278.35 2260.98 1275.21 cv
2260.53 1275.15 2260.21 1274.74 2260.27 1274.29 cv
2260.33 1273.85 2260.71 1273.55 2261.18 1273.58 cv
2287.48 1276.87 2295.13 1311.6 2295.2 1311.95 cv
2295.3 1312.39 2295.02 1312.82 2294.58 1312.92 cv
2294.41 1312.94 li
cp
f
2224.17 1322.32 mo
2224.08 1322.32 2223.99 1322.3 2223.89 1322.27 cv
2223.47 1322.12 2223.25 1321.65 2223.4 1321.23 cv
2228.19 1308.01 2255.4 1309.71 2256.55 1309.79 cv
2257.01 1309.82 2257.35 1310.21 2257.31 1310.66 cv
2257.29 1311.11 2256.83 1311.52 2256.45 1311.42 cv
2256.18 1311.41 2229.31 1309.72 2224.94 1321.78 cv
2224.82 1322.11 2224.51 1322.32 2224.17 1322.32 cv
cp
f
2312.72 1352.67 mo
2312.72 1352.67 2298.45 1331.26 2289.04 1342.94 cv
2279.63 1354.62 2285.31 1406.53 2320.35 1415.77 cv
2320.35 1415.77 2356.68 1398.9 2347.76 1358.03 cv
2338.84 1317.15 2314.18 1326.4 2312.72 1352.67 cv
cp
.352941 .623529 .878431 rgb
f
2319.78 1409.26 mo
2319.38 1409.26 2319.02 1408.96 2318.97 1408.55 cv
2311.91 1352.78 li
2311.85 1352.33 2312.17 1351.92 2312.62 1351.86 cv
2313.09 1351.81 2313.48 1352.13 2313.53 1352.57 cv
2320.59 1408.34 li
2320.65 1408.79 2320.33 1409.2 2319.88 1409.25 cv
2319.78 1409.26 li
cp
.188235 .32549 .482353 rgb
f
2291.63 1381.38 mo
2291.46 1381.36 li
2291.02 1381.26 2290.73 1380.83 2290.83 1380.39 cv
2291.02 1379.46 2295.86 1357.52 2313.06 1355.37 cv
2313.55 1355.32 2313.92 1355.63 2313.97 1356.08 cv
2314.03 1356.52 2313.71 1356.93 2313.27 1356.99 cv
2297.23 1358.99 2292.47 1380.51 2292.42 1380.73 cv
2292.34 1381.11 2292.01 1381.38 2291.63 1381.38 cv
cp
f
2337.02 1387.44 mo
2336.69 1387.44 2336.38 1387.24 2336.25 1386.9 cv
2333.5 1379.3 2316.35 1380.4 2316.18 1380.4 cv
2315.75 1380.49 2315.35 1380.09 2315.31 1379.64 cv
2315.28 1379.19 2315.62 1378.8 2316.07 1378.77 cv
2316.84 1378.71 2334.63 1377.6 2337.79 1386.35 cv
2337.94 1386.77 2337.72 1387.24 2337.3 1387.4 cv
2337.21 1387.43 2337.12 1387.44 2337.02 1387.44 cv
cp
f
2177.5 1180.08 mo
2177.5 1180.08 2214.02 1132.65 2231.71 1144.69 cv
2249.4 1156.74 2252.79 1200.78 2208.37 1247.08 cv
2163.95 1293.38 2145.5 1288.49 2137.6 1310.32 cv
2137.6 1310.32 2100.71 1287.74 2118.02 1238.05 cv
2135.34 1188.36 2177.12 1133.24 2188.04 1142.73 cv
2198.96 1152.22 2177.5 1180.08 2177.5 1180.08 cv
cp
.352941 .623529 .878431 rgb
f
2136.54 1305.83 mo
2136.28 1305.83 2136.02 1305.71 2135.86 1305.47 cv
2106.45 1261.9 2174 1182.88 2176.88 1179.54 cv
2177.18 1179.2 2177.7 1179.16 2178.03 1179.46 cv
2178.38 1179.75 2178.41 1180.27 2178.12 1180.61 cv
2177.42 1181.42 2108.5 1262.02 2137.22 1304.56 cv
2137.47 1304.93 2137.37 1305.44 2137 1305.69 cv
2136.86 1305.79 2136.7 1305.83 2136.54 1305.83 cv
cp
.188235 .32549 .482353 rgb
f
2167.03 1275.34 mo
2166.94 1275.34 2166.85 1275.33 2166.75 1275.29 cv
2166.33 1275.15 2166.11 1274.68 2166.26 1274.25 cv
2166.4 1273.87 2179.62 1235.63 2155.12 1210.38 cv
2154.8 1210.05 2154.81 1209.54 2155.14 1209.22 cv
2155.46 1208.91 2155.98 1208.92 2156.29 1209.24 cv
2181.5 1235.23 2167.94 1274.41 2167.8 1274.8 cv
2167.68 1275.14 2167.36 1275.34 2167.03 1275.34 cv
cp
f
2119.12 1255.74 mo
2118.87 1255.71 li
2118.44 1255.57 2118.2 1255.11 2118.34 1254.68 cv
2123.6 1237.88 2141.78 1232.91 2141.97 1232.86 cv
2142.42 1232.75 2142.85 1233.01 2142.96 1233.44 cv
2143.08 1233.88 2142.82 1234.32 2142.38 1234.44 cv
2142.21 1234.49 2124.89 1239.24 2119.89 1255.17 cv
2119.79 1255.52 2119.46 1255.74 2119.12 1255.74 cv
cp
f
2357.45 1193.08 mo
2357.45 1193.08 2329.46 1156.72 2315.9 1165.96 cv
2302.34 1175.19 2299.75 1208.94 2333.79 1244.43 cv
2367.84 1279.92 2381.97 1276.17 2388.03 1292.9 cv
2388.03 1292.9 2416.31 1275.59 2403.04 1237.51 cv
2389.76 1199.42 2357.74 1157.18 2349.37 1164.45 cv
2341 1171.73 2357.45 1193.08 2357.45 1193.08 cv
cp
.352941 .623529 .878431 rgb
f
2388.85 1289.65 mo
2388.69 1289.65 2388.53 1289.61 2388.39 1289.51 cv
2388.02 1289.26 2387.92 1288.75 2388.17 1288.38 cv
2410.09 1255.9 2357.37 1194.23 2356.83 1193.61 cv
2356.54 1193.27 2356.57 1192.75 2356.92 1192.46 cv
2357.26 1192.17 2357.77 1192.2 2358.07 1192.54 cv
2360.28 1195.11 2412.15 1255.78 2389.52 1289.29 cv
2389.37 1289.53 2389.11 1289.65 2388.85 1289.65 cv
cp
.188235 .32549 .482353 rgb
f
2365.48 1266.28 mo
2365.14 1266.28 2364.83 1266.08 2364.71 1265.74 cv
2364.6 1265.44 2354.16 1235.3 2373.57 1215.3 cv
2373.88 1214.97 2374.4 1214.96 2374.72 1215.28 cv
2375.05 1215.59 2375.05 1216.11 2374.74 1216.43 cv
2356.05 1235.7 2366.14 1264.9 2366.25 1265.19 cv
2366.4 1265.62 2366.18 1266.08 2365.75 1266.24 cv
2365.66 1266.27 2365.57 1266.28 2365.48 1266.28 cv
cp
f
2402.2 1251.26 mo
2401.85 1251.26 2401.53 1251.04 2401.42 1250.69 cv
2397.63 1238.58 2384.45 1234.97 2384.32 1234.93 cv
2383.88 1234.81 2383.62 1234.37 2383.74 1233.93 cv
2383.85 1233.5 2384.28 1233.25 2384.73 1233.35 cv
2385.31 1233.5 2398.91 1237.22 2402.98 1250.2 cv
2403.12 1250.63 2402.87 1251.09 2402.45 1251.22 cv
2402.2 1251.26 li
cp
f
780.487 287.337 mo
780.487 349.653 729.97 400.171 667.653 400.171 cv
605.337 400.171 554.818 349.653 554.818 287.337 cv
554.818 225.02 605.337 174.502 667.653 174.502 cv
729.97 174.502 780.487 225.02 780.487 287.337 cv
cp
.937255 .458824 .596078 rgb
f
768.51 287.337 mo
768.51 343.038 723.354 388.193 667.653 388.193 cv
611.951 388.193 566.797 343.038 566.797 287.337 cv
566.797 231.635 611.951 186.48 667.653 186.48 cv
723.354 186.48 768.51 231.635 768.51 287.337 cv
cp
1 1 1 rgb
f
676.227 287.337 mo
676.227 292.071 672.388 295.91 667.653 295.91 cv
662.918 295.91 659.08 292.071 659.08 287.337 cv
659.08 282.602 662.918 278.764 667.653 278.764 cv
672.388 278.764 676.227 282.602 676.227 287.337 cv
cp
.133333 .211765 .298039 rgb
f
756.777 288.97 mo
667.653 288.97 li
666.751 288.97 666.021 288.238 666.021 287.336 cv
666.021 215.056 li
666.021 214.153 666.751 213.423 667.653 213.423 cv
668.557 213.423 669.287 214.153 669.287 215.056 cv
669.287 285.703 li
756.777 285.703 li
757.68 285.703 758.41 286.433 758.41 287.336 cv
758.41 288.238 757.68 288.97 756.777 288.97 cv
cp
f
467.134 1550.58 mo
320.131 1550.58 li
320.131 1324.96 li
320.131 1314.14 328.906 1305.36 339.73 1305.36 cv
467.134 1305.36 li
467.134 1550.58 li
cp
.486275 .270588 .321569 rgb
f
570.85 1550.58 mo
467.134 1550.58 li
467.134 1305.36 li
551.25 1305.36 li
562.075 1305.36 570.85 1314.14 570.85 1324.96 cv
570.85 1550.58 li
cp
.647059 .403922 .486275 rgb
f
2423.87 1553.85 mo
34.8438 1553.85 li
33.04 1553.85 31.5771 1552.38 31.5771 1550.58 cv
31.5771 1548.77 33.04 1547.31 34.8438 1547.31 cv
2423.87 1547.31 li
2425.67 1547.31 2427.13 1548.77 2427.13 1550.58 cv
2427.13 1552.38 2425.67 1553.85 2423.87 1553.85 cv
cp
.0745098 .137255 .2 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.0.2
%%For: (progr) ()
%%Title: (Colleagues in coworking space flat hand drawn Premium Vector-temp_01.eps)
%%CreationDate: 3/19/2021 3:05 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3XrZp,Mu_51_[L!UL7h+jD'#'LbI,?3:=dPTXOLmWn@&m*Aj^Vh'Bgr+:uIE-m@nA@L+4hWudG`iWRRA2YrXld)[E'8j"<
%*t*'CJIO?KrF^-?aLj>j6d"mq*r]S6-7T>-5YEK,@]s2s]@jVm1ch1\<O^\QX\e#Dh@,t?'mQI.mYlJJqBH]Xlbsdl;:EC?B%@F9
%C,bd&8;o=b-N?C^?Zi"W1k=3OrH,AJn!/h_e2L"a#!D@9-diCuOu'[T(b51#ieT2tj8QmQnF:GYiR4ZlSSh[#RTB#o'oT)+O`m0L
%=uq'3NBoYq[fR(-8Y`B]l<QH>OB2cA];m)k@Qehi_E/c998&=-o#KC4oG]<m2k7VgMuUJ"+0Y1&$h9o-m3eAt@NQRA+>TXX!09.P
%!rJYn]X'p/M)`]uNE0?R)MFb7`sGTd'TlN):4;#ii]nS`<9=l3-PVDpU*p%qd!nGk)=l<1m.#Vr]4q2J'fn,BP0p^0XgYi%o.M48
%E_a\e,l?h;YAU_NRV!?I.$Aoa--<,d1?t+"Ft6a%7j@iXKV)"r]\]e.?/T"hhF!19fGV\XG1LG>oNqfC-?"*KhD1OFl^Ebk_D0CI
%(R5[@-l<[e(a]n(.;[5%S0Z!nVb]Wd]4Gd_)f_=5,fIi7(ARI5D-"mCQ3[a1A"q5QLMaBY0s&<IAGSUGNlo('E=R?2!.MCm1`_gb
%ge6YVCPcJoV`DAMI'qQS1j'JZa2oJBro9C*_#MZThUUSn,]arel-E3(=-lGk"93Te5=H/K'a6f8$0Nq($pX82cf7rqVb]10<2\87
%&W6[.M"lhG6kP?6U8Br1.LMJ='J-#p5>kcaYaD.m0tbA!/=&h7Ys\Yo-5-)!Oh``@L/0[$'M3FA_ZH8r/($Z3+k%%N53Z"Il9$GA
%LaOa.E8`/[6b"+Lkq`GL5HtUuKqAKk#9C0,_M+WW%=uAlCl0Ep2N9u\-\39kn2A.;]i(BK&R[<r%6q+VVVs[n8n@E*dhJ,_<VT.d
%;WoP0FSKs"[!siULK%"\q@AK-N;/6(;*n1%kqefJG_*gF7YfD+27,-ULnFGO!Mk*nTD%45(4K^IKFpEt0e'_2jO+WJT+3N9_)n1J
%OH'g5iZ="Tj>j`Dcr0qci9AU%ca7PECp]#i&'H)G%Z_faUcO4"5"6CZ'8o^o7i3[]BP%+[1'f"%GIZFj,`4e>#N^&_SK4SIpl5cS
%Z4(:O7n=WR;XDm&;;BWl.ItR<*Psf*dG\RiVgmD_D1FgJs6RR#6)C)GBho=/S']5@b0$=JdlL=]O^:i/*+X>85WRY_!KRmcFcW"3
%anMb$i7aq1NlaR7WU?Iu)6Pc+Ve=^;XidpXq1iTe<O2<_Nh_ZJ1]8,JdI5q[re'Kf5]:p\qG3:<GOJ6*aYNfIbAQdSrD-GX,O\>+
%`T-U&GGbD5H88'1H"Zt,Q(m0L1]>A(s(jiZ1rN0^?i&US7aD>b(JD[L/W&+ZiD3+PMK:)`1ej"X4*\d6n3h9=+G#]M?l,!aQE85\
%,0*Y#mW38u5U'2?).(*G:e=S*l((cfYTeL+*ssI6?o?@4Q;FfsTEqQji)sT(n#Y>,'Z$eE"8%P;iINcpdYo00"ZTteGC#)W`=b.f
%KUR]C<0bpqL`nM\W/:6].Rb4]_c&$''H+Q@='49B6XLg>Z\c2(h^<&s<lKg8i*"X6j;\Le-Ws>=rHLS?*7,h%U0Pb+<hVGVDo,nM
%3*$041^X4s:f7,9PjSYtEG*YD,@=:NK"%5/d;^lBrJoZ%L5Y+X9FD,-El=XJ%]i*-Vn=k#E0B8Z,G9jgC*?>kM*.\]9OWu-mXX<h
%kW`"_.1Sg]5:iuI.GB9+dBF=-1?fa4,UK9$%L`7MQ)3M\E8kMA8f,,6c_0^HJ6+U)FZN'F11XW0V_*<V/sLSWP)$Q/18Dl,T:K]b
%MT=fms$<+sFD"SMWt.Z8'tt"`SOBolj\M\JojjX&?;RKJ+B!e3KQ'<2nZ12W&-a"?UCog+"U,!B5]Htoj`0*I%Kj3eW3.B[qeUb+
%7)h^NGUDfBgLD8E2E!<nQW<6L9(QK3Y&5`jknBja#um^V$!IS//4l'C79*J7.UOHldsI6t<9,G[Zdfh#*U/Y^*EB'O@O)29p+&Q=
%fEXn>G[<s$Kie=%%NrS0>Y>@R31_3I:kpo[Eh2#B_Ltr8iFk4t:j&85,7-i3-WGpg3`3]^N.ci4QcQ!`FL$8nN(m<u1jf(DI!$O1
%5!2WN^nTSE7$8hCIg0@2T8gsY3$6b#Q"d45`/M"^j)r(Gj2OZX,@/@u0%o$48t>OM?<sjr@bP7'H&/*O2\T]I`1Qi"bf2c\W":h"
%T0^neGjqW084Z'@=k/*qSC?Mr`#PI#KDIMO26H2^q"WVjVrA[uSQl5dT_tW3)?H+e6u[>OOE&W<IE>SN&nbG#0h)&TY4#%mf,RT6
%/+-BG<O,(6'66PB!CYV?/h=lh;Dg\-7ZPCkEWGedE4cmd]&n=mT#^4H/D6#YJ7,[WW1_cVSs>KZT10uC-AW+1Gh$F3D4^J@g`]%-
%aS>uij7%GgE/pqn9tk,/J2diq_'V-tbW.X5eB:KEg7:t-kU7i-QSPhMY"RugL]/@&@=I*YO\oAgO[iFL5WHf&ELK/U").g1V'T6/
%n^0`J5cAeo!/lo955:F-2gJXbiA_t<[IRR[K0\(S"Dni'pBMp\eE.^_"uK08ck<^*e;LI0d87oM,ub_[*_A?8C7^W\(r]Mt0b;Y=
%,N'Xk0aoE9]Zot6rJ[G'l_=IjT=#2$d8\GWnEW-m_+H0+o"<%:W#G#!3#Kt_&guF($:0c:<*2AEAXp)dIJdSo\-2]STt/f'ed0sK
%2,GFe,VTg0OVKPtaXb:uA#[L/Sn[;RT\uIDkH]N3n-GiQI4X[[)?eeMJ07dlq`3PPAOq%H6g#1ZOou6p&Fir_`K[+LK-)#9pqd%K
%.RUI9LG!Nq.r^FI]aaS=1sI>:s,l;U+1ri8J5J.k"D7f[do'_p,c+)'!]WHN5t-X!_Fl)h]6t7W-\c'E%s<K`%3PT-=qZCV!.s]k
%j'<VeR"CH*0.@6n6imQ#oMA*>6URQ#+siq2pu>6R+,^e[H\Y):M@74%VM2k(nBj+F`]06Y_#ZS,,RMuHgi6[4g8FC<k\j:O8B`dp
%eSKjI$j2k/Oh@(T!QOc99Fk!q*,i1-E!&R(,dId`VO.@(6/+NdO%89hE;S;@al0bNm3<T*5?*8.^]TIrV?hYR@Ym)')90ZnUuE'm
%_(Y^0#^n8pO]?,P:>c:^8tneLBcf0e3,JR]5iT_JI4F#$RilEm*gsjiePXith\dQ,PZ24Y4d8#J)'TcMN.4r^9oKJcBWr`NW3B.m
%W*+iZqiHYfZPdr%6kY9.*1jF08cl@#8;2k'R+QVuE^-=^6P;]JTt$:3TQ__C@[=S<Na(]M^9Tn0?sP6++:l,G=oH@`FcEb:LWeEj
%5qW6K.?9VSTGU%i,dK"gZFLq7LOLd)Os%\g;2E-:#L6YI[NG6=QjL>[Q2i(g;gF_fRjrdIP'U.A2:>gf:`X@i]UfoR?k5L9U5T\@
%?_KKr+*'A!fKaS$aUkfnATERh;[UX*,"-DFcQj<fkr7-G#Bkc[]d'glnUqMWh'/ni&r17f0To(&lIQZq"Dt5Ue7T*gFX[e8(q<1W
%L2-q:Q4I:7W4$^5MF/iu5'i2H(Wcf'f6?@G3rl/bG/"Y6hf4APln76!!0@&s0gQ!#i>N^Q0Dm2c&Lo&$<q:=[&_PL6UO:f$JJB('
%#j%G<&lUMYGfIPq0M!f_1)i@">nF+AB#5jZs6tCu=0)[3i=hA'Q'.AJ%f+n$N5epW@,sBM9X('Y-P4b6rhJB=W!#']P%Ko=P#3GJ
%6ZV(W4/d/=5K?`Jf7]Y*fn-CTq?_sl?CQZO"E_"5O:U:QR>=_Ur+AEg$@MnC<>RA^*%<H`+c0E<q`_Hco:LkTA6Wj,6(i:$<VG(r
%9D$,83',BWl=X)Z40e,j0/CY1P"<YcB>iRZKM8G'T[OnO%6Xua7,Ot`eFV`Zg,9Rs#S*A>IkHGH_(Cm7\L5'`WBQbsf.rn%+o-AJ
%G[:6?++USj=E8B^4\@VeOSOU:O/Ud*<"dj"$'cL(KZ5EnhKPI;0EBcA?=&Iu(4eFmcn-RYP_#4=G5rh7lic1;8B;'7M9^r0TJiWF
%%V8'uN[:n_A^F"9qhKY0@c!sJ7mZ5o-PWI7OFejDoH8hYhnn].n\li*$7_SUkpIg#M>amtLSfl?'[,H'jYV0j70F]nEmc(9OjX:a
%&gbAP85)f]4\a+H>"-t<qp</PN(ZVZ30BH"I&b,@J^u6!n`7K]f*AR&cR_VbD*m;#&s%:&IB#h]6rgJS-cp`m<2$TgjH64C)+0`m
%i)'Y48U:d^8kM@;AjT_#&lV(Q&(6/F)\4]MQ5HW9d>%o0c;TnB!TqOretMY)_Z>O$adGGKKuRg4_([F9h_fT^*/6s_,!a>j?srUL
%0!L)K6BL,dJL\*B*&Nd'd/\Y)L^/P8"!8lX,9'E(:<$qr4Ap&2G_13o%_7Ce.2[4P6Dd6$4gS%Lng(%D<gRY(P[-p8H?p<Gn'Drs
%-\EsBc<-*o#p^B7*(&C5H":C3G*3Cr<V1s%AB=:/jGTBtimD`;)KcD\8r;[AO)Uu`*`Fj<-`@8EB=m/Z7U/]=R%XEeeLiHl*Ie=]
%47SbL2YlDt9&%=\'F7SDJ4gJJ&D%4&!$&F;9c4TuNkrFrM%pioErohVF:!MkckMkj,Yio`k<VO+,;AqL-eMim_@$_s4#B4p!I75?
%,*Hn1&m_J0H!6F65ZO[RF:`F*4K6hHJRq4f-W'M)JcRPS?buh?$&H%=r4XCIomBB)hIDEE5`t1W8,iVMODKh.gO<F[\,^W>')4M=
%It/kd36h+<eEY/-K6]m(e2Xm=nmj3Z!U:%ma9ib%llgA.!+NdN/\#c)mk")_++WP^@k&?n.M0%^QNKa:3e$LBi46phYMOJBR`i.B
%l\b?2:`Wb_%U_uLT#T4b-m&psIJ>$LTKuV=O$6ClNHtHT0r2CRg7AcBHEYCXb,FV!!$,eu9+9jj@0cI>'ro`sILn[BeS6N(eFF,)
%OTJYiAMX`Tqap+ZXFPa8[;dHBjIF72#p.S"DkB$fh7;l6%m(K"D4H6+-RQ.fp:udjogO]BC5hc6.!6bJFjG\Z%Tb2q?HraMT`C6h
%>K#tgm.:n'Ka.qX-$kMh<$]MuWrkMcj+)+[[)i3rO\(Ca9h@o0RO%lMJ('A44&%oc`HS=D2aJc(^dUZf'?,f"/oX]t#pKW4Yi'S=
%KS4o:5o+^pk5dnVKm8+*$^!G_oHH\?pfS5D`X$E(NFG%;P,7tB/8[%?o7`gT)-9B2:pr/LhUJPlP>ENj6"0j92.C9Uf0G;#I0^f=
%/LG!K/Vcm9A0_INd/?3k2X66/!&+HXL`H+Gp+H,YnT:=q(JhV[J]`"r6VP^ng"?J>-uh7eC&q`e(6rEG:ts^]EW1LLWc5sG_,ULC
%;-'@G5!&Wkb2:9MPa1H\RLZ#s;V:B[rj.h7n.JhL@2*]YA/'S^SV$]j&rrn7>MH0:X)1deJ!L'uM8Z+:6X`;]Ulr(h7SRt;&a_!l
%%gb(Y=$3)cjcKrmEK.!EVKp<E'*5!&Q5pRsA3rtZY_;1pe(gY%MZ\MO%M.Ki9m?4HqWR=V5Ui2ZN_SmW.@+Wd+$AU=?9/!9:0Rd3
%(c5R!4X]PbfTbP^BpW>Z#WN(cY:0>pV=.=>p+;%o.esUF!5RB95P50iI*3f*/Q3qZKU3BniW.]c=[ESORt?hSY-$g!N"R:=6D\QC
%#*pHK9>!UN'o()-YS3q^&C$D`RWK1)k?W=Ca(KSF'&N/"J3t!CPsAb"/+%rJLpWcVBTVeS]9_)0@[P[>PbK.=p^R"jFeg*=JFCB<
%O_3-pO%MCgVr9&%3U=JN+;I6HgF9OOmmLtWU'20cZ$eqi-[;/^6nV;8QO@>mqFH`oR%\Qh0lfVNkrMVsE?Ph;`?c3/f.*>f@@W0Q
%:%NBu!f88:Dud"u0Dg\\.)P/C)G&K_-q(5B=83CJn;Q`Q&Ifh[8<F'*0N]$KTjPCYEWZdO0<kZ!!=h:Zo*&f#dAi/c!BdCkQ$A7p
%8]lr@!h@V(l([-k?`L(7U>I9;UBWnQE)8\5G9$"!AO(h*72/u62;nf$"b<)DJX&dgKP4L4.%jc2Jg*si80g8Adq"PI$L$7_R?NdZ
%LD:e-+if\+l=\9s=fUYAg;cG#$5i-a1NRt;<UA6hp35eEfEjJcQ/HVYagUfRcd#I>iYZdlN(qBo3pUX=k?or/G/OXK"5JJZ.OYj4
%%"^ntOlT'4*#Ukq$Pc_h,jZooRq(Ib>Bknn!TCVCXUYpJL_-R!cljW.',R_\BoHg,U4LCtjMoGrP2Lj$Zse>Ie@(0L7Cf$,?(Q8,
%"Z\#:9m%%:e9YA/]T`u$'3PE/"?(h[3>u1'7iZPR)%[9ZCcN?4"mk(ZMJN!NUht\kP3h/l1'sHHNcc`D.I7D`:>7)r&.'?7)C3Q4
%&?/:#UH0<S6rJ1`e[P;]kT2+3&46o)P`3T?00sRXk6/Y>Y@o4W&GAb&IDp75D#1I0q$=R,;C79_(k%(o;2>2sL[.V'q#KenL!E-@
%qHS$a!O)qZq-;AZeYk\cgN4f<;%*tJ)*1J?o:e&<8s%'(FAJ")7sDOZOq:Hd]T9Ft5.75j-uTM8p>>sgBLA^'&&RPWT'APPBuP5>
%ks8st<I8'(UHP>?A\@qt?YN?!+c7L5H?\-aP\kaNQ]37\0M'1ne#aVKI%1!6#:/-g/co)<$m79-U?4E;1d?Zf5?`V%[h,<'LZ4n0
%8>sk`11\e0Z_Tm,r-=#(!3Rej11erL42JJC&)nQ<$;Gg9:6(@'7X&.1Vt8nkh?F'Ma[^]?=;`BGK)s#^[o[l0./TUe_9!2%j5=Yk
%k8#EEOQOX]K`8nAOqO>g@AhjNH'`B(![L<Vk9Ge)-[7R4)-i*Y\AW:#Mt;jHf,8au9A8'>btCDb*'do0C&eq%'RiWJA4"aqJt1b]
%!rs1WE>&<``qAX]VubfV`tbC6-.N0$WK0^=lE9`0ZB!BMkRK\22<&[2?D;:m`1]5tN>"/e,dMF,J\L?j73lmRO`uQe4:ZnZG"65+
%K^ouCS(=Gli:-XUo8cG;[ND,'p>=9eWY7fJ5#u6n@WW6#aRM[1/'ddl,Q5CQ<]UhD*/nHaE.FF>G.^Gm21XaM^]>@b"9M(I^tW:U
%:Ylgj&<r4qJ/XM1JLF25#<:h9liG5G$nr2I$"XZ',N<bUl$%F:\k:24GdG\=go>T=i1IKde,-9dkVE>7cQFJo"sm%87d-_M5-At+
%DGtYm"\>?A@.QTT]Z1&34cSbBF^/9\%)G"T!rm(b9<<-MD^,,\JYot=^]u6lJNaRZk@@K4Ru'D\5KjQ::.WeA%Sl2LR;i(6LWI)E
%e,%i"WWR)J83.aKKL,dLK,B67:!s3dW/8Vi4@,N$A`ddFocBsDAL,cQqL98L:hQ]Qg_m$KY(3PV=D(>6:%s3q&uj.H9D\t#7-9:N
%C:o?_;2B!UI\4H<guuf<"7ZIfZ-rQ9X_DM3'a\<XlE<P*CP*Bnq0;t(OqdoQ]\a(Dn:D\me);#>J2:Tf6&$r0-d)dEUC/H*M.RJD
%I):+Me$>uj18mVhkl<JS+H[Y0mE\^hNf1;-j):h^A6TP6-<MpN6rl@B,h\L54U.??i'8>0Qas*5lMd1&q2$Zb@djqJQ7CuIBV=Z.
%EKMC'J=c;/hpae[i,VdjmfAji'&uB&Z+-aO"9K2WfHg=i.Go>CqiFY2SHgDrIWSI(R_Uq%Vs:KBWK+\RS[QNoNlD#=Nkq_E*%`c^
%K^*Fh`R3`[l;5'h`;+7&;%s(0#hP[#Z:?T[VgW5`kS3.<oZY>R7=@mmT=8TXG6N:YR?63+9JoJQF,PI7YSt%/%dr(<GBM$9Xh%N;
%T6akcZ^fG1[=4m_eW:_'B,4H#S%*O`DuVhmcfCF/]a#&YgK(MCDO.E^rj/>bXF_%q2Mte@D>n+26Ka%]pp(fA+o<mGnnl&GD8:A)
%9N3rTX.M5Ieb-?_U/.I8q<FK&e5$uoX537`TQa>Zhi54tnhj+a"_f\qf:.(J6lriIB$B/kM%4e$R`'eIpGPj;7_@+N[#e<ZR=Y(P
%'_"6me.lj0e8C"=,nm42U:7C=Ee!</@PqX23^NU8kk2MiC$Vn$=U`:(]hUGL\#d0qf9#/J#5ulh,HNo>;]'hgCc4pU4-]'!?,Q!K
%C:%rPZ;@^(\+$h-1A:sbSN!h10L-VR%D\XF]<k<u!5>3e\(7dTi8HNcOt.0h%-s\gOkYqFHNJPfaJp3(;TEXGIeDD`bsUq')Y^F)
%_5`uqL,WApSZL]9R`2k#qpjpL5%Q.TJ>Ma>Jk4s$)o4<%@IEtg1[A?%iGI&W%W0%kgXFB7<AMX<dOaB9CjQ!1-]b]'.t9JB9m@KU
%I(%9dYA4,Y2P?_sDX2pdMH-uhC)]lFJdZFm5s`*nnY>shPlX!P@2;p3RlP/f=m7U1]3asZAc<ZHUo?:d$1++@juYh9R34cm@@"LT
%!.`_`^'bc8rM%kI<W.XM*$hj)!$3[Jfp&HSAu42j!/a_E]>1\-Ds,mLo5iR,7.A=\N<'%G/,`aM"sM['!5SMQ<PrJ0S2?eXI?&hi
%YAmn8lG"9(aQbGV>u^4bg4^RbbbFVfE4"2o@(D8H$U@E:f/:Ahru@O=.>QZc"sI#Sl0kG!kCBt":9P^,EB49<9r15qiH&rFHH4Cd
%`d86+1l-`$-m):=N.QR##JoSLhT10n@(r=qVo-!*#efNLJ@&KL>DLQb!,]BCho0XsX4JsBLGXr"i(K&]^X&6]::a%OS"kpD59/If
%b6uEcF@`PYJ@PMEUEKQek6'@1)Wf?>/<lWcJ77.u\_&Ht)['^fb"[a_pt;?G!7@:I:p/U)@0lN^bO!H)\QLW\5?B>^!3+(C/2rLK
%B!L,BQCGj6ruHk_\=X>W`I:iE(H6e%lFEp$ZMsV:drU*(1Gpmm0U_ainIDsk,jk('lstY1Xj\jJNSdJ$b/$=DJ\Uu(_,[H.7Tlbk
%@mogW?GN8klZ>h6)'9=DAGaWfaRU"?VA)E+Q@;Od$phOudPna%<k7!?\mqOEMIlaV^c%DIn)LQ33a9*BYt/3[qaYdNpsj"0J(91I
%"7:-d"^HT.!hEZ0X;?k$;%Ek-?h*T:$^[repI<9L1hHgl`'FZNYHG>J<jU9*RmE_D=QS;q@tFfMqQj`jN@t=r<LM9c,D*,_SGGoJ
%KY3fHF"mS#!6/C'#R24VN5%:Urhk.&XCX<%R:+-lNIPg_3EoH=[_\M,Vru)p#m@]4'CX"j0kKsA3J#;Lbd>>O?^p/E1_$+ec#0pt
%FG!8[9pI(#Bp4/M4R-)],uC'8*A@Zn/:]rb)jRSkUIT.+H&<+6"$bI\(^4Oo%.*`):cH#IkOLFhpjYX0UtO>&A9u""J%h,>Vae:-
%+==#7gBfKG5Ed/gkU:&DI/^S8g#CMZc<0dQ/b2J8<^#:tN5#G<VT`*9b^Qti%qpY^7/P['QqCsr%l0b;KpdgjZ8a??$kofdUB1(7
%B^6tN(IWU0"XfZ]dhYuU>4#?*pZ`-ZmNsUrq2oFY-Rc/@5JNR7Y6guF9R0>N74)BeJ&:Y2,!TL)D\,N7Rt+<+.bGkq1$R+,@%$6.
%rOT`T^o1&A`gUaA0O7ls"C\m@=d$u3nV_$!'[2N^s$0FWrplAlW-'32A8_ObcjBP9Omi7&8.]f8N@)@J0Y<aOlHQ2'cP^lrJrCh9
%SKFkZ(OTtJBpu6CpT_k">FVGAC";mNJM0t_eQ^L:Ee:7#8N/Y'aS?3l\7GIh56mKZ#'!J1K&<F;J&:o9%3:lF0O6gVThl;X9Nrto
%J\RpB*Clq4f5EsNACC-TO<9Z]jaJ9P&lfUK_L_dX:J(M\8XhEVE;DB]6$>PfV7qk`FgGfG!S/eh85q^ZJh0(X(&]bX!b_i]BQ!!G
%"Gfk4)^t_l5W5`VJAeHo/G:!q0hW)S+S-?I2?u0k>SW2i+@Bb-q^t_;qB,R;!8rASm-<tg3g5m-/s+3VQc598H9KnibPLr6'>U&Z
%XWXdV2:;D$\SX3Ud"2u//i_PhaY*cnBVglKYP\g'cJ5/O)Hl8uZOob.DZ!EXp^%nGrIEOtp`ih6a?O&Y8e=Tg>P_fd=/#g1N(KB(
%+PT:Yh,9KsCamLTVf0!XjZAlJC*l2Y00YnoT1KW`.9ML+r!@.9!k?<MZ5+_l3Mo7\cdni7etPiqan_'7;:pB7>*S#_/]rac6:!"T
%D98;^?],Of8g[iYrRA5'`Lj@M,mY(2-M;lO/Bp#SW<pM1?dK_K8^$AT4>5'%[2C9fDl\l^+iHT+MXMP$O4q?F9tqsq%Q?%jF5h'U
%mFRESlfY0_Xr\j`q-WKUo<!oCCV.g7o\*C=RQ/c31VG[MH7],hcLfgaYGGT(D7DBCfD`*c+<kE$D5+GlbZgQN[4c4$RBng#C/^eU
%B"ltmWs-pdrY_Dr^NnqW1b,s7./:PPa\L@hi(T*D/k48_MuoY[-:TdGlJib5#mgVJnkl&5"0L\VQ2N=2%$X-1r6qTWlh[fOTCDa%
%s7m%cVG[A]c&tp^S"nk@fscd9Aa%r\TWMIHA\X0&Clf)_VI3o&:(+P.q&GWug6h"YjZ)"[Af,%lYU^/%@^e?E`!Z"UK](L;CH-7M
%K?t-4h*0SABDa7,n(iDiD)A>V4.f4$mQ7`q?RBg,iQlg;iVt%IrLW\m_-Sr^l+otG0`K>?pqJ7?qI/tc!QAWu[FpnE_']3Fr`5e*
%FW_/Ymu7tL.96QX#J-na!d`Vf<Z=Le#cg[b2Y\3>9tXL4OL;.n;$=:Fe,s(M3[\7;"\=m07a5N<d3LX'Ho5Ya<Z_bJACFs$S:*)q
%PG,..i4anpRus5\M23h5G4nSDfe<;9o=t=Xr9mG6luG#a)^rNWS,]&Kq;3:i@ZoFBY799oc2SF:LGQ^cZQ7C(cK9Mh+_<O#o:=/%
%IS\<HS+E28I->ClGG52(fpqM!l@9s372e-ORL?V+G@0V'JuW@IbIo#OYF'S!%mV3UfS%cXf;fcW#CNK?D.,a2e'i*!_$(1gIf77#
%$a*i+]l*f=3H0,I;XHf%8.kU"%056mKo$VMJ'7.pIr^9[p?LMVc&`+W+L<oXKVlkiS_1*P%AUHC*i6+NHGlmegV94Yh<8acNRG8c
%esdn^j_"=p=oN6'5F^c\VCQg*"&&q:Fnc_+hrH<bD,-66!%.XtZdJ*!H3n"%P;sr(3DG\o8VEHs0B69gVBflkOg3`5WFYmuOtum5
%;*0#,5<*3B[#?3=]Bt+7QNQ-PHm8VIg5pe-6h[e-6qa"4g=2`HLm,OUTN>]jGaTjaAr2jWih[a@+.@GZdk!?G@V9+?rahC?R3c0O
%M3hB)j_#oHl=8iKBpod/-'2^FUb<3'B*UOtSO**l)bk]/.5C@\Z(L`jm!h-/oUVFb[b8SeC4r5Ql@L.nW1W_<-A!nKS:$n$'6]fM
%!lLi&1_F9-N(Mo@U2G.\\iDP'4u83Tj7lmg2t;(]-g\_B`TUlF)^g<B-J^TZKO'rb<AiN^l"BD!oEDhOG$g^*^@Y]IWhs-D<P;rA
%0mcL:^L`V'TCo8_!./M[i*YSARnGI43W!>X9n;tDQ3+^<Pn]Zt(e,Bn4rF:s7Y=\nGDn.H6ea!m<6<T9oB-7rIq&oVhba&["p:&Y
%R=B2LCjLmmMpS=E6Ar(bio_:"`6`q-SRZ/'!$M7p97[jqg#]pU(b]M##oicIHk=_*NF49cgk,Qp'Yji%KchH7Y?;oV+sJd^QH,Ae
%QtDZ)QjfsVIm>&"#Rn%%`qR[S/<;O/@n[ePApK><*b.h5(`5,Sog!:%-U).6bqfSi;Xn[3qD,>QVDNXZo3tf$4j]8ErIquoW8^Uo
%>F!r(i3@`CR6c:A60iq+OPB[lD'G,.Rbcu%'PLi'!6aKKH6AgF.m;!J2`9>=1!p!U%2JMqTs]mST$](n#snm>:T<(J_&Ej.p)+bP
%chHla'L^ScgC+ODC]_$_RVbt:+<^I!D/,GOJ<q@#XWS+>2;q$:gpS+ekWt)S+*5]8%Jo89/k3S,0(eF:8>\0lpu?N^#o'R<H7%Sm
%h"9Yh;mg!0Ok2-])Sf#u:B,>fk%?:?ndNCYW8GNg;sGnNH"K^`I*VK\0DPrAZCehg/&4K.WCt3S5BA\p3UDaIa^HF%IT.)PR@#i)
%/=-0W`,`[^BGSj@O0m-*\QLc`Di3ZYR(lc\2iHg1dG3W?JH.plT=S]R[O,](c[BRk(I4p2iS5uSRtYpiE:0L*begp:)(!0!KRchm
%=TR?<AX+`^4c"-Lr+I\oD._2N6q)15[)1.LkC2+m8HQEM5BoPMM:[rtI3g3q_"f/N8m(,&lT\*Q1>D#6[R%oTD349N.u]+oS:'>8
%]j-=hLq[VPX&.E+[I"O=A[V0)g&8;n-q2eQri-4F9\\[C$eTttRl3"LOC2!976`E:),r1]LHG+X%=BN%4\Qm%$YSISkjEqQM_NuU
%bPNI!:#K)Ijbe@,5G54PG<luAjf=TJ#QiAn"u]mIa_Tph"@%Mr^'hLP9<L=hG$-I:6.rHVpijRI7lAYZ(NmsB6\3<<hnfo[@"jH(
%YCF\A9q!p^K_Yp9.>\*!\2*@=/RY1)=8(BJ-m(_!k^T"[?D&`B\)]K[:J$`umnBt-^Q!_`+@I)XCu$r>k%==/Al$/Y]RJt=aA]DJ
%0nA`X!<*/boja8*K.hbWF@MbrZXl"R0*19:R:`@1jqH!eU48e2Pd=qGWh#k+QbrccR@SS8miPf44SdKp-+j2DUs[q/\(WM;D:h$P
%)W@SG<".]ae:K*#g,J;Ji5tl<f4dP70kq:i+$F(s%E#-8Ykhbc-TVsDN@NB^"8dL#eBMl32b/Ua1ZLGNNo.fp'5n\>aT&'j`@j\6
%1YXl4Ho:/s0aJe3[W1SLj"tA0B.k3o<2\oOnI;@N*rkFPVNN0Qegn7[jLa8\>7sZ^Q:.?_E&3KS!bV>R::_eP$JS:h+qHF%hlnX*
%cKC:Pb93h&.JR0[2fr^c^tou.U#-BSG%]$&[Af2Ql;me(*3ghp:&HPtn#('nn[!^42YDE-r,]E.n(IUeJ8[C:HV?hV_BorZs+4U>
%:@TYE5Ak>o(EBi>f4+c>lqG6K)bq\%;#,TWVrJjR;)/<^R<T$IK=kN7.fF'GT`Y/MF5!F'l5f/^A;?8uDTbLR1Y^fSs-PVMGP+96
%l:scoM[K]UB-I=_#>IGVQ2YB4U@jtobGeGc5DdLV;MYYXF>c4NZ.X?-)>j#j=o;J?LQE&PIhJ8ilci0baI<kjOQV*ulJlYtg;J?/
%?iEdL<$XXU<8["5cVbk&W'cl`WV-*=_YJ-GFgf6ZT35Y!%uoM*00rc@dk(*RC6mYA+d%*QhKh2gRTX<XCgn'_n&LEFg%7N)m6>58
%nk>q,ZLo8dSs.d2^jspt<A6c0G-=gRSa&q_@^JMcm1PBJZ\K_#1niOeAq_-3]4g',lC7:r.oqEfhHULYm/[5!rPSF95T;FAKOE:8
%=7)hO>V*fK$p!g<U[*X5ro#C"RG.)kE$O`[LuV(UqP-WrThMUO!'BD;eXh;4c@AQDaQC]9X)>G$R*[jB33/S=moIIjQgbTP=IrLm
%W2LPC=9^D]=d0$i/gMSenp%tXS.`_0CeS4Nft4aoYoRK=eEnpeFpqGjE:4=Q:ZsY-nAKuP^VRf\'G9Q?"=#1m`0$&Xr2_#qI'A'[
%[&dRm\m9qTQRs=>$Hl$m%TSZ\=l^,H<Y9Sh:o%2eQL(lZ4Bt2\SSjp-NWFP6`pI,hdf'Kdr?kehL;&olZMg$dq#?.>SP8nG`L>W>
%8n&TU#KIi)-bI0-p4I2:_i"p$f=342_"D]m8*&,Cs!?-G=s=Ju^D[9VN_TJ%IW[MeG>o+HTT`E]f7;L#WHSA5M_CRF%:j;Qg1Pfl
%L<hUcGs'g+6"/BnrND[cRsGr`O;;3C3Y[K*.ne.4bO9bhZi-j^!JU'[VpW%:RSNn7WCKr%6L5gsWa!H2n`en1A0aptNJRY>?oINY
%CnInVKsJKM3MUpjTEtUs^\H^.'`WBQN:kj>?\4ug`,ns$aTt5tDeB2P$H6>LCGl)W[4i1hISKKPr>lqN/Gg_gs$p46X.uFWLc,t.
%0K?!00B=JSq,4?poltqO.!Ng`9YPeE">T/jc/R&Hj%O.Xda7=?#TerW';D]kLm0$FP(c]j$M7A.1(s&h`8;(I/+S(PLOYr5([TD\
%A1509qgLb_Ol.@2\e^eEj4Aqa#-'%g=l\Eh=C#mD1.Jg$hDQmV-YCJ.5$"*hO+O<&RYrLGDOq9'!\E.qN2'g'ob.%'J&>ZYs79X\
%96S/t&C:/EpKNc)h(VHHX**fFgJu4JFfV1e09'#9hJnii%bA<]:#rM6rtsGEs3r!hRV(67S+QgVXOdenF^TWmBs^7\[a?h@+^]'M
%[]?9jd&GElL+`-of4^Y'Ob@')dcag+??aIMZ,1digZin`<$>ci2R\S$XRu.B&^":Z?>DfY?l*+=VJk^9r)%L5dPaalNqo#[oMh0=
%VB'E)C/(a2ZX@1+[cKEiqARo=h1DK49-J6"qB;lcD7uWeC3CblEM+bgbc#qGB&A3kg0S^)DPq&g#=kiH9h,HYU4^dX?7L6%V5?Up
%YA:\IFh*<dEUlXk6<pJ9a"n3KPYb"k!<[Gf7^&ulB_,qbQ+#YoQRE-P0Y/sm=8:71gMSq4drp.)I9P3;Fp*#V^n,l(J4:!2_\o6e
%.8;(arOWZa)h3#uWKPrb$YJ5]3`ZrrZcp&!E0r\[2h0F@3?PeB='i1%)g<CiR_Kes^rA#q`)D//8#_P/0kbtRA9;=[&-gm0A<)#Y
%!>!Ucb$(WMU;MZ,Y)34aWLHU,e-3@;'GZ$bok)ea!AEaK1Ttc&-kl8,AZ2SBX]M\fppl,f"7O(T;)1(<PB04l8FJn<N)eBnW4+g`
%^i0\LQ3P]qFun;Xf)IjnYq'u<&/h$VgT%f56d3T"[VeNA07#Z7818!GDUaFqPn_C6=tS[5:5DSuK[,'+g9%g:r+m(d]%I/Y`h^PF
%^togA=6CfrrAE:sCIEUV%KVstCSR)Q#X/[=?`3")]]BR&1Q"_R8p@-5*c9n@(><;eRG%]=dQ'$EU]\LMX`hf7%;@?"H"M3rT0"fn
%!=2Y/[*qTZk^q.WYZqHujC)7GR4-U3ZXhgo61[HCG(6V&&f$i_[>9KcW7BcA)bO[_?giqS$ddXp9k;"V_d:W*?HmhK.gc2eYn/c?
%S(ElZiZf>9^WB_&qm1aXd^2,c$(4N)VY2d6+h@cX)Cc12Q%l2_rIkN*L;:Y9Q:[`K,]'Him$!<lLJssYp)6+W5HXYT8>LrZIaMeU
%l4@d\M^gXBX?s:%FrNK"dKm%u?bTNSe=m,roiAUCV#cNbj[PPSkj;R:6[<jrE;H'mFU[1Y@Tba%#M!QZbm(CVZjo!*>k:dr6mkDf
%GbP+WSSgS_'BH8rBlu9+YWZ18_#[AHli>eSE.(DgJ)8%Kb]%hE%m@)"MBY9fXpuOsYn:i\Xg2+0i$f0Y9\4$iguhmQ0XPPp?8i.6
%q&!udM@jthMMZj$NnKY]OjNeJ0h-.3Bhe%mAdqYhNsKW._1E]cNbu(4FNdA+mtQ8q]urF2GmqhP^qH^+qgt:JXVU6iBZ"nD`jA5j
%mV?]b=TkZ`,bXGgPYfB*IqnpR\N^.]qioO)'T&GGn'`p7^qQIh9;05+:pLNOApXY&A&V6kdk8$i;8(Yi`f:aeNOg34[i0qEWR)+>
%^lN%upPtHdl&9%0(k[l&L+t]Q5aLmZ[P8?fBsJ?,3?T+W^M78?6UBonMk=srCPN:.BoELV1phM>'XcZYb323_&:_ed>>_G$l?u^-
%1JWoq$$9Ur[t2AKhX;5=C<L>nUg<8LO)NN#lAK50>;rWsjb(hO6N)J0m12Wk7r+c.^ZRc0l?/gDlc>atloBab.3JGEq0^H'-EDI7
%BH-"(0U/TDkcO+0";=B.%_H7/a7qt1'%r4V-7IM'.QU&$T.s<m)QU1Ms&PkSar6"`/43[inRKFFA`1k6ec'?Cm),JWG4\71UhI/f
%N6dpDAqs:lMiloM"ts*W"I)Zd<A4@JUeo[EO-_WU;R+mmDhS`pOKZ7P)ETS2L`0!H%nf4Cqu*kp3k4b+.2:lsOUa1W&/\(8/_gVQ
%L8Cm+p3A`0b(AaDRbdgBd;XO'cO(EAei4+1b?tgXTXVta2&:"ZEAX.rla(VKhqH?5ObteG#Z/+gn"kD4h".9C`'D&!"=W(B077*]
%)p'cG.6"ld;SCJE:`ET:djoO[WE@kNX'N0HN!hj:@J=E#L(u/)(p\VQ9mdMlTalcdBNnLr?t;En1&GTVm(=ep$<3p*aHqSWR"#qd
%idV`9%muBoq:+_*g:/q>bXi7KY-0c7T18oWS,Uj26D-5uZJ@5dngf5u6iNlMN%4Mg3'RgEF_YLrr53,`-s_k865n@n!*.fB1.f_!
%Ad<_fm&\TBM>eJ+()`D@ngCJ/:I0&%I2SgZ<7U/g+?JS'R38)\`V^s%ZZB9<*XMSirL7fUiCGhm8>g#B$!^UW^GAuNm@Q$pXRFs2
%/oU'b)oqm)GpIjc5&=3-.a@If(>`.r:7-@7ZQNQpV8W23K<)o'e(FY#k&L4hT\V+j>)GD,(L];p%+@e^,qBqY_SPqeFR<IKUX_Bg
%S8atEc,"QMgic:1GN4s`Mp0"4bfD*Sh7[8Q)I9LnkUTTCK+=`R[^[X>+*Nid:\!(cA4(39R?!`]FfXhTid=Np`YNIODtW32kU'GE
%NXJ3Y>EG)TFFE]KW9+c@ld<EBbABB_m*rD?K<7nUZ(B`QltIu*V)!-[n>3h4SG/3.V].'k5H*IWQ/gD4U+5!*I2I688f$+(qn^SW
%ndTFA#2Mj5=.V"R>'`uA9BgCX,/5_.\]B/^%cUMBoq38cD.UDJ.LHtBM/)BgHUhB&Qe(20)mAQ4M<-6>@J&.EY)hbHgVomn_^fdk
%<R+QXf.=8-95Sb/Fj#.r0#d.7qob,qqI<=GjHeX7JCT;>j!kSqLtgNW#AUTTgfWGsh;4A7O1V87D0F(7g+K8Up"C2I2H`]pGHLsf
%d]t%Pn4[Q>9PiuZAG1+h-*gstlVb/W@CXK3*[K/qo/EWX7DN8^,h!:`r19.WT%A1h9+P63@K)+j]@U9jOS6W#GpLRcGU$NO&QO2J
%g8Z!p)>(M)@G%LRe)[C?Z_W<,n(ZKSL_$(K/#3Gm_\D7]1%Jn(:YW.XG&C2*[!Z=-oh&HKm^P)mn1Cu\\!Ph,P5CMM]:k_MSaFk[
%fe]>!4(;ml4>&VL5cOO`4+nu"#jf_%-'g;qjIQpC-XR.jP=B1L-JjZ!75^]b>>LPD:Yo$]^:Y!n$We-+8'.)\2.%qYea,Wm<6]JH
%Z@FDfh9A<`dXCESFhd*KM)&uk[m&EVf&V.aIH1t,c:XCDW=hKG[&^C5n',e.:b#nscqWeZ?,)E?DND2XG.W&8gH*%$-WH64ZRl4^
%f/D4?QL[.oc$n%<W-;',M2P(o2r!Z1]bN,%BB.4@YQZ,(N(FuB'+<C-G.p&9k)[-fO4YGFV@W>0ol&Sn]U)-Zp)Z*A5udM0'gl2.
%C98h_ioPTg_!J-KNHTZ$0s\FGmRS`q>]aKdeX'd3nD$e"<C;m3M'g\iP&>%98l[nGhDeBYTAuhQU3nLJlq*nH,ta.YU.L-ei@nRS
%GAk.6`GT;^5(8`gh]3O:F9CPWcBF$k70ECtfKj)d1Zb_Xlf33pb8&uNUO1X^.k&R:G3j#F-ei?S.2-=6'T)+64Cl"Qq=KdSf=%rl
%e,YoN>X]u$?/IfZ5B_@T4G$>giTXf`mBHIcC8e\pj5d)J];![Wb0*;LRQn20#M8dYY,13;>Nf[3SOkuU(hog)X><UU'";b0n3&'t
%XM$8I4V0oYlVpS34Y152=7.]AQhApu^YFNl"KHE$-='[(U?]j+XpNqZ1qHWDjWH3.SL62]H+)%PX=YaAlLK"g8\!9WQdp&?!!3M;
%Bn0k'Kn6-3$XeNhTB5TC?N[W\BVdWX`Ebai`=7XumDA_VY/lg)C2W()R4umD&crlh,5L<Aa\bI\8I;HY.=nA%ethF!V[&.MqCrXP
%H9HM).`qSM>3t1YYUO.E:+t;;o9IHOKbmYBlG@Uo4\TArn7iInS_[k9_U^o_Z'*a`n*ND"rKV%nEY#q);*u[$:%D<.A[i+q\kB'8
%4XBN'S2R536o7Jk,VQ]pqc4&^m%B*QnouPHp(bVGB3ms4)sjfDN<=D"HZ"g[;?Vc=-"A-O5\Qf6Pn"!AV(gr6&4(TS[nU&t\fko!
%@L39&XB4uC5oMYLlUNA&[#Iif+T!3<Bjhu%7:`a1IGl@n7o8JoZf?h\UYt!2q?A:d!%";-!FjDJLbGrO!XM(l5=Tf&>i&Q1PhYl)
%2[JWET:gPK(iLs.kb-%_$Q&3\qeC3+;"b11)d#)[_WC=2+QqJ*N5X=#Kp>2jK99FMC+O`r%'KaW$f/=+g`:pp7E\_])uKTO8U,C"
%dt(gGg3<\_j-r6\mWm#L$6q=U+X48[%Pd:L&^%+31`F1VBf@HOI=iB[1^*-c!f0LYn\&AbO9"Idkgu2ad)8E-NnXXRjeXB3X68Q$
%P/)cO'!J'A;!2c0D$UlaWEtl@-fAs8Zj,lPR_M%#C'Q:oK5M/8%po;g_M[RK=F(dA45*=d^NQj+AAd`4le<Z)[RCsZ5).B^(_!2;
%jcH/jDP0`6=QO[4nAZphd%&%nAag"-+%Cuhde8)Y;u,.a0o6P>6!>Yp"*>bla,H7?Cm8GOPPt6C^RP"VTjBWu=)+n-DPYi>Rk+G5
%le6oqfQ(G]b>g2XUHPCpo'bjh,+^*PNU:jGqJZOF.XGb+YkgHnBtJV4WCi5lQc\:]g?YsI<8m$iXe+<QTFYn#m:rnLfJtnE[SN8&
%j'^"OUMa`W*?SIDO"6%0iIi!!RNu0%)(3Ps745QYAfngb:;&$R1X:&_&*'F]OeED0j,]Kg7Rc6K+F^A_CWX&TQ\>/]DJkd[M\U2Z
%f2t;]hQ%o-Q7O"]`,hDa%l[R>nsVn"[TiW3JVUbt-4]a4Q,r5SmGWZSHNaZBHoY&0^IrC3Hb3K?^%tUV(TPu8qkKSr/Yc)4dij'+
%8-$?oo9a+1:u8[,e2NOf0uq]`ATpo[Z:B$G4M:0V5;r!?<N-i`#lps3Y._R9.ETIhW=2XNMIX06f]ceU(ZEobJJcDh[$9&0lUA+,
%[=/Bb>>'";V%aY5'$d4C:oG"RhH?k<OtTCRITi5m;U+&K\#;,oLBViZ(,d7FWL,]+?XsZIR_-S-SI"H8/ZKV"\SEe->&k[/4Duf+
%;QX$A17==mbDW/$P7u`"%;D$)5)-PtpC:P:*<(8A!Z@a\n_34g3<%U:-bNZNQ$JDA\D=C`^eGY">GXf[6(;nL#f$-)+rD"(l2C)=
%g30.7r'K1r?EEU&lgIRZH0J`6jDGGob\FZ&nT-R3=F()'m'aHWX0=qS5_uYVdc1aH]J=b_3c2Xckn-N<(SG62RqEbqaELN8/[fW&
%IC1'f-.OuK5.=hcA`)#8Q$rs$Ct0EjnUQDR*(=+<4dbNMHs0g^b+n`dFc5B&1%r'l:lP4a,ij2AAiNXn8etl*mSbk6N<I51Jdec`
%B'\2T;Rko@p[4X(4uO9$)rPKjitLHtk+t[HMR;%MO*f"4ALVZ(FnSjWD,su5e!^S)Rg:P^Bt[__Eq=JO^d74jYurrU?P0+THZY%b
%?!ElVlj@G%\Tm.^&'\:M4)u*pTD/,-5keh;[D!uRI4!1u5%H']@K'OrfXc>e\'%9qb/)Z2k&6.BD]7Uc"jB?/(#R]S'9>]E5'q/`
%AQBqDmhUJ/pY/97Fe0a?L,bf^c/Ur>H'1C_oD4fVl^9k;^AWc8$e'JqQLd[A&>qFfe"/$/W"5k:[_=f\7G6A<b$kgeX"l&F2UAPV
%I-(Fj;2KZ?rm&YP4/2Asm,dBYQME(uJa,108/n2Q6g`@j-La`A%G[8i/+$o[\iJCn\+e_Z8lrk7n,#PkH[tbRWH+\4M6]Y')tlE;
%1\th]L%gD3@O\>[ce(Q2c$=09-5Qo8(5^W^9Gs4pFt`9#S_kH([hSN\E-=6.)^m2X(Y7<];P_B7WDn-B=QDZ/A<ct&/RaGm24rCO
%G[6o-)/eKj4P2^0W"Yp$Q-BP?,-r6#`S1V/T&cksR6Prra<:)FKXlH`3S;aqF`Cd$4\V@lY4l52;0;/aZssjnP3Lt;2BKKh\f[mN
%4<Fc;_H^b)a86b9kY^["%^JgM.'VH_\:(ZUQBRU0VjOjAMC-,11=s19W&og;Pmn+HmpTjO@IXMhHm_qH]PmJTj`G<ZIVBt'^!&.k
%!5eELeFQnR8CEeG;0pkh(#j!Zd*:/+3rbl8o1S%+QJ#'Gm:P^\QH^?dWfipVO!D0qBO4?1:Z+;UUbOs0,rbCHRqAJV<GH7uY=crK
%7>\^t)ZXK?)-I+0Jr[+cC8AD&GMP05e+2,f[=b$`(/>O^lV1u*8/k%2[bO$+a6r)mNclLSbCO'/rP-'I<hbYNRp,Xs_NU5G(I7N+
%6Ml"d#uUb*i9)88\6$=$[TGP;VQJ]d]B[KY>OqHuHZE.ZQ5[n8hi%f!D$?1'H*-(?A#b]of;daB=a0:dWo*J*lRc7?NpFg(R^oA-
%?J@Q1>&V]K*9mOQ+:I+\i7;%?o.bN2ZEm,N3:7t,d8Fe+7GC]nk8^MYXFMJ8Di2/q\ec/!>=(*If,$ZMU3^ttYk)snMD^hb8^Ch>
%CI"&+2L=%<m==H8!9'CN/\JO.6C`CVPnX]RLjoSRgm<HVnnTbV1]Wg3d^(b.Fg*hZKkKFS>?aZX<2KG92QnF5V`AV!'a$U?@oNs5
%pjL@"9%uFZ/'mZ.'7m0JRnou%*$+B6U8u2D_,<p]Qt1Z!;CVU?Yg(eLfLl&k[F-KdTh]#$n\oT.mKjIjJg5K7]?+XDghJi6Zjh3S
%\:fG+M/$&:fDM>m30>NBmfnJU"i/C;5EH`cU_fBIF,,g3Mhb(`0MS\4/)8B_:V[#:$cG7Q;k:j^((X0(dIZX`O*UK<%80o0h%7Ca
%MCh/jEDS$(QJ7-l]XI"n`8`@4XSuJD5,W79b^"4-7o&ZFnlD`kXdg@\IS(9>]m-'f#B_n*BU*9sabb)(G[jKto/TVP8$-u:4?\$Y
%]"-dDFD:X34KIUj=56:J,IE[!L=lSh(2pu"l_=*!\u:S]$I6,(0[Z.F/S4("e(eq"AB!7RV@(mOjHFW[V44BIrgKF:2qF=C2V[=M
%T22bBFpm@hIHpk;>4W'Y#?]BhP[As&7r.SONi13.,>FEe>C60H>O&VTGcV^::^@,C?g(7B1fe-`VpSI,rq;X@8>]#rh;n+KMMC`%
%Bfbj]f(B7;Qr;b:FP,jS(oLGjppHMucE6Km[c^<)I2hIjg'cQW@Y=>(kMom88O"3_%#BT>%Ce"/r79PBTr5RfEt.1ehOU.NpG:=%
%&bfE1P^&(B7AfbY[c2HV=^GjfMqsTbY4bbSDYA9a5&XDN,+UT*lZkXK1J6tc[,G)U4?*X%?&^Eh>7,^uZDl!%SM%'4!(S]Eh]?l?
%Ds*92a%u.qA*8-_,8uOI?=RBOb:V'dO.5-0iI!(fFf_W/oQ>8O]l]kjg;1(Wn"7u@M7hK``ebY?@''q`<>djQ3'=j?o8fk;?G/p2
%KI(\)PIX<0d9j'8VCKb998\f5=$PVBAto.+o<,(GK@\UfVe>[8'1MG^<A'KSKO.<SR@?WZLJJeeqf4aZVDLl,*6<S(6X-CfE[3]$
%=d)4I_'ma;pJV"`BN%Rt<&2.4!H,u!,cNZO;m<4reTbqX-Xs\>"&2f]g#[PUP.)9]C.>h_Mn-@%Wo6".<,!jcnYo9q5^qS0[#MdM
%p!V!qML4fm21K"nBT=b7A5X@BnM&JS)I?%&i!ZXVUPVOrHXAj0(2f+)&A,WN_n28d.oD\:(lc>F9-?=&\-qRaU<SV`Mkb]>M"X,C
%T=i4dR,!oUGHoRbY1aJkZDC8,frGR!O^3P%qVlN?GoSFmIMcbW(+W_+QW7K<[)J!22:/j;(cb;p]!!rSAa='$,asH7^2;+:QSGP2
%5O:gCcg&XNWpHtj/h'mt'mk#Jo(`li=87d8D=(opH>='1\"S2l)DL:O%D=)<<G`W:d,hu-]+)-c6e-MOCuUV?oAl*\2r?RemAY]>
%A,Z8R6U>(`I0%(PWO@2aW#[bN\-X@XRtYPHG^WofG?sYiUl'kc&m:N>_sQ3f)fnYCr>0S:G5?7?:X[)QF/5_r'@I7VVBlMd2^>nK
%WJ9PpNjcg.W7qR3:KMP8REi.\Vof[.H%B6!@+/g!<(FA"JnXQPb^Ef48m=@#[(N51dI<<>/W.S\7Ee9im^Z:V'&TcK9DX6<\S8rh
%O7;o1EAh6[+-ocAf%5fJ8S0-o,UQk(-e;B*)&dQ-$sXMW1#9F^o)EXS>Fijo]#;s@$^^=)6:nIaaQLb6_VoI6VdtkK0B'OV4[-E%
%I\^dqqI4e1Sh$GYBDCl#E4C>6KU6.<QOpSHF;7_9IJc`%^["l+N.:g!=#dkhRLFu'QKQ-DQ/al`d"P0Yr%IL\F;*dHg)"H=/f*19
%(#l!d8f]N"0Ap>85)^R#LNGpW<@f74>X,p*_Su($q3lU]VN:952Ye9Sjm@KoH;4k2mu(EF[7J$3ncdp&Mj6;=Hq0I.De6F^h8QRr
%Ae16'l3;W=_btQBJC-.oXu=S0H3tXGr$Hk=6PVl+,9=:MYiI7C6LB!pHA,]NWRniX'thoP6P8<_[Ep7-.5VBj9b\LP!O/q,]75CO
%D,nDe0QYqXB](;2fjEe"Ruse@J+"q'WV@A:pg/5<'c+5!88OSSl1*(&CBU7ld1eisF`flQjcX?WPY3VkCb`-Fm,_T(/[ZAJ#9Pq.
%Z+'/J"KLL=&/n,b<OPK/<kG7gI8:[5J=ZKr`:`s7\V\kqr\8r7I.@^?CSk$TD@9$XrW5mDQem6=_DLe@gqLusSjh>MptbnFH<Js/
%MPiAq@q7tXdE;@XH?-3tRp*+8f+-i%ibQ38<SBEW^GFn6Nq/W%7t/@AI4-KqeM&4Hl"N4_qHO_1MR^UqBPTbRRUIr",d!t"g6p#8
%oSS.s[95RT!V=`V99*6uDqPM,.OElW=DBtd7597Q^s$P5ih1.[Ph0DCj+4l^(shGi\oVs'8opa43ao`2oR'l(8!Jo:>[+a4ic#0'
%j)ne8d'p)RGsXfb]/YPZ1D\VE:uq-\=$BU:Fp+.6(*#.0a=$#GVgF&L[41qg@HP>Ao;c[Q4MP$8K]brtDrG[+-3h]K:5$O^a'B\L
%S5$6<[AUS)lIkQOG\p)V,Kro^$Unmr?$X;*T][npq+JAWeCVO5WlXr`JkR4l$I::eD2%.3P%W_WDS6TfPX(+mG0_n2)ID90%`9go
%onW$O.VFIe::?qVFmp$\)qWEfiQ,No/K??1<l:CAF#V<"Z56rX,8jp=^:Os=HWOZY=P>bFM];96@>TDHLZO.e5-/G&U[Zi7pc5um
%,TEJ5GF*3CnD<$lH$K@8[h:l<ZKpKEelji!GaNseVj?$E@4hA*&3a964bhGKXnhGmfRe'3?[N0PmB<^JZV+agHr3_bE%ZPW$XYWt
%=5iK%gKaO)g.6qd?Zn0b#X@0P8`AijqIB:X05Q:Lf9a$el*du2/sl8eiMr_u_mLfQ.,<IdHOj?DdDPI#n`E!ih;F=U_J-\B2rBLb
%c7R#uQf_>K[o[Y:M1&tgdTLsg@nu^a3M&BN5W<c$gXbnbI($[C\%U=>SD.9!GNKChGOKU0l=Fj.HTm;2V4Z3/\]j*]q:p8[1cBP\
%^M(nuFg(CXG76>#W7L.o??5"k\O$D0/oRYu3V*RrB[!rWk#tn*A*CJkns)1!QYS7u0?*Xco;cK^Aj2@kO60UE:7`8fq"8pCTm,XC
%?FS,L#FBB'o?"?!oD,.$UWmFhC:j)ja,AStrbXSLIlG-R4TD4ak2u?<hOZYU\]4OdGObsobVq0gebRLR>$74Sh_-W6D^6e?ld(@:
%"_RYmD*\G72&;FsQhQ3IP?)oOO^sdpNd*FeE4UKC/6m(7Fr,%j>DETIS(H<sI;AgjTmV/a?)YG'.,4#.7Mits4^=2V\9*(`=^:DI
%K>2W-2]'H9]"Y[q[^<L\B?Id(_s0[5nap@9FYP74%i4Wr]!mUDp"K:Pl-0nYhd0WqMlh$)YnShTZ)-Pcl!c*Qe7^GQUq,lhXXs@R
%FC;,9&Qh(.Y>:HZDemUor6iUQdf%-n@7b+UfM]["*gW8:S*3a'Z?ijie@CDe7uY^Ijk06)FF!amqf+WF@`=Y^kIK#]p2P##q8QZR
%/O0!0VorZADLK'X8\Zg#CBsa8%@?g4_^j-?Ek<MFimu9?S(q:@C"p*IVk>89o$,t<b2]7'>U^]&1+W#W,Hc.K-Zc?3EML%TR97e<
%8t!o[lMbiP\pF.Cm&Xfo[F4@-ET1U'eI%qMRX9>HB(`hi$Yt[Bp[trXd_l!Oplp/5gHUSGerKM/A*maIdb!n<j*@b'f,rUZk0q4O
%f6V^E?X9crX`Lf@ZG(`D='/841?J28NF[J9k4H*qY0V5+fAB?bk^%I@;M&dE<aOqK)k<3XgXq?b%i_L.Ao=+T47aD8:K`.Apr]Km
%)MQm>A?M?(73[Y:lOdh]U.3Y=pRB5q]kg-?Kh">tqKR'"WC8J@O^@.@M6=l@:8?fHTcQ@q[]l7ban<eNoK'=b&CjRZNhZ4,Apnag
%R,?SU>[A1(jjLfGRHPYSDk:liq9Af;j6'-E7q)!PqcmN0<n&.E^RD>\qgtt*a5-)EF'VAo0SKm@@%,Fs]9lp@W0:f=<]A^fghN*K
%lc^f)AP!kG?kX=14N^uOMsmOcEP'E[gn'e2F!lh-4778DHH;A1SA`*Rk*PnoA?O%4Z.2o>+hV.O=XegD5:HsFr*-$Ba6%9bEQ0fC
%fhJQgG'BaYf^[eo>jQWNTc5fU(-8]1^X*SDCMR3A\WQ$-_aIs2\Cs&P'oJ+\,J7rr8`JH-Hs`,kf-=.NDs#"9AaVu<e5tqp]5kA+
%XZaZl8QdX-"`T7C-b%Os*`nOtD/2l2PgJ'QT&7UN7n50,,S?*ZpNtY-Z?^K[VTbYSE!g6JA<lr<F\B89<Hj[/@f[i^hV$Ob1[cs)
%[^<S!W3?0;XZN9bNc9G+M,X0W-Zs2dQ8mC&PKDq3G!>_dfe2)#05l&Wk%9BOR2:#V&oZo-[TZAnkjmd!c?oBdFZ6UUQe:+u/$862
%l.+e]bOr`oDX1E_pGNLWg3^HR_UIApa]a#Zjo,rs@'=.MQM)Pc6u@GBXSoMUhTBC'F_rA6heq]$_<1RPk(,#Pb6PSC`UH0m;/</i
%kGOcklOTk].c"+SS'"H.I9Y:'&:W3eilX]n&O0tamJ(c#E'E,n(Y:CIM4Uj>$'i^#-$%i0EM?\t]M:*7p.@p@r2c)E5*&0s:H)92
%fm5g+V)F\6bZ%hR>>8BdL=MO!f!s1pDr*P/p1@=PcA^JB<]KPk%`;MO]8&^@IQgH/SmaR5:Q*3@_tWiSp(='i,`\&@G4"M%RbBi<
%XOSicNVpn)>$YE^94'gr'BqI;Y^O1<j3E\ZN;</,>e^&V>eN&h:0,X^3[_Q6cdsP2L9?'t1qT.j\UBgtIGo.q?m`@aY%=Wb%r\AH
%D#!jKc\s5Ho2d8_qA.ruT<1bOlBs-!*mSYVq6REIc=?E-HE(hS-_D:Er*cb;EW2Q0/SDVo5+bR<5PDB9h<42ppo3&\O>UhAi`oVh
%KPiEblf.3kb%?sMgumRjbA2BEs0?WfFe%2CQEG7`S!SiaoD*,O+.dgaccc._SU>TrjZHo7Q4$c0`U!?#pqt5)eU?lDii8R,Y$DF]
%]Bo3)Fmnt6]Td`S=cMTRd*7PR.::odbDUF#mIFTK<]k\S]00M.ftOT<:5a>^Y7&cao'*/np[l8CpL2l/heuLNqtKoG/aL-5>0T16
%jj)St$"%t,-p8C?*`mQDiQ&m2H2mYAB^Is:T;&hNm:lH6X714ROiojiq7?2<e&D.GoC.2(fp('j?D:M&WL*5a/%lX8X6ZsiZ#oFl
%d:@$rcO\j+^5ss0lMCh<2u<J=2Q-;tfo*`@AN!c&/mW)tmBsfB;*O=*d[+FG_`ed:PI+X/2_&aBM^$V&26J$%NS#s1(tmaB\5?%<
%?^CM_pL<srk-e?oPn3Wscgg8BH#DlC;X7HD.Y#k$Y%BU3f@>2Lh)8c(X4udUe^fB+4NjC-qBfg4l*oI.HK2,-8ak5pV0]+aSQ)Fh
%kH1T4G>]5trN=0ZNOdf`?K5E@f4[9fg2V1Z79ON*QJ';jEKf(`2Pb$<3^2PAXD20^Vo:CRo;uisjgA[%LQA-uGPQAWGeZi9F6tY'
%2;/;_VsF'"RWR1b>q@N)61'FLP5-;+H_6aC;R:k8L-IT)BEUH-PEA'hpAJl'OqdpCE.,]G6aon9l+\18]mA:HeI?ZZpQ>L#IRn(W
%<pt.*7B>V>R,Rtu0\rgan?"%TIqbhiDLp?dRif+=)r(NKfDMk>c!V-K>\<;J1[%"u.hClj]gmMrD7)`\f>^!F&>8Cuh*2QsX(ulq
%0#3oYX)>L5iZGlD"_&'J3452UZ.cW)7ah..8U%?;Ye/Q7m4#cXA_b?-3#a1?d"K"W!cAWsMsd!HNnoN.Bdhjs)lNJclMtM&HGrGL
%rP&6jO1Cgec<dT'bJsLMb)@:YV,?anGT<"^pAPmO<e8;2l2/$f9"kXG%d@gTe?'W4HX!9W-jIV3-hKpZBSJSEn&UZ<1PE\K-1r8'
%,mm-1i'U;J3*Ti]6WY;V0RS%W]tT5N=hRW>(a<KJ6O"hh)$XrbU79Dhfqe:-5!IU)6-!jF9`QWl[BQ@!&MhIGEI+RddsAcJ]2lVq
%!lh.MaEI'D@PH_^1J)bJnf"8dg\h-WHSB38lj_&&KR1l]^A'3>6;AQkK9hF4Zh;EM+V%@+OH:EVE,?MC"J@a1Vq6$?BK`NbOGtC'
%E)PM,a2dWLiP:du"%M+=q2Z@YN*sNZ)D3^bB#\a!kDUP8eXIj=,@brTklYd])B4IK@=%F]CmOukF;RP7pFmZ?pL.;+Q1-]IZ1e8>
%\']k%Gd>eb#/^Yan;#Psp$!Mm&3n'5*Z2WKR")!rL[=Ij!k-E666/RAgRP+07F29iPs1Zq?7\TK70b?u#\u>WLXN\,Qs-`L%>VYe
%Nr7N]5R'rU>&7CH]pmE!)=>8R@`S)AO*c7J4!%;\\hS_q[mknD^PQJ!<[nAX'3;G-p1-d^J@oLI*4u5>n==O=X-S3FI?<kmj_Qo-
%^9AQ6CIHtVJuN,GG8,an3\&4jm%4o<W+(^F72p:2(`jX(n'[k%G@UQ[9G0V<J.W$AKHT@a3lY7em'A8PSN?J6/q<[HHqdWC)GQ^]
%E:]V2RWGQ39R!R+N9C(ED)895fT!PaahrY:oC:72)i5U">pE_D2%!(6X9Wb:D.1Q`?3(VQlN(@Y?m>'sj_VR]7@49Q.6BHSb4Q*4
%>-$>i6ll^!,Relk4p`1$rP"ic+bYS?<-onGJFd8-cS<-BKDDEBLL@W.%,LJZ(gE1%,X\6UlT#'&@<h5op_ZR!?<TG[QI83LcRFVE
%^\Q`O8rP0H"YOT*0p`>h+\;u[Jq,3q,iHp@!T+%g<6d<l3"Mc&p26k1F:uH;;NRauQkq/rjmF[[UO0iOerhuahYo7l28Do4fCq$D
%h`H3(Ztea4s59rGHrn$;R=REg^&6W71;7tb'!1`?<-B[a=9hKOLf+m6LR71*B??ePo2Q'P3&[S@`h5!SgQ0$L=:Lo8DrR7C#;G>t
%Atf_5P8k:kNJtA1M!bj'q=M[!](nFd;#e.$F`V=+KE+?39&5"jg_q%OTPiW?@L#9&J^Ok*%3"h9#QLOYQ2\E4>*&BnJ#Nrr:u2FM
%iu;,#0K[9%Xf?XB;U9_ukk];_e5M_Og\8.__;5U-MmicqGG%dDC#TW0i!\QLDN=941-3(u)ulMO?_Rr&?c),,B^jP["1=0ermo\U
%`r)/jF6^l1+@S^rPfAmGmRumYHq\u[=O1;_WJpYbOfRdB,ceEIL:]lZ?P<N9q^NWNbu3A2pV3$'Y=u]#r,:*Y./S0/5>ENq\UZ`q
%/KIYrpW.j(Vm`??b:u,<+j+adbM_.5)%je[`c4IZ:5TAQ??V$"A1!$I]S*'ZU4O1l&_cD5@gee>'dYbmlCF-'-l:o01Q*t2.^:N@
%idfcD;.N$+=luK</BaaE!Hk[^jmY;4AXI->GqL;H;*g"(8WJj#=]1[LU.e8=64ofK77F:Sr9Z^'=bqs?)"bZq!]DZb^j9D)===f?
%ajHIYr='WQOVeCjkG0LNnCT4LP*LQ*0QpKQM,BCdmR;h\]/#IK"P(H[#`lpo;3@(+i$D][+U\Y4#(^2..2Lp1QkED0&K@"#-nfU#
%H@SoP6l;1#KBa'ZJE&X5.T:R,GUsH0@:Z=\6%b[19d?/Je:W*5^Bhlad9%qHP3NIK$S!=^!"A3r!rNY;@E4aY?tGph_LS9fcR@2.
%!f[m+5_Y1I![<I'N(A34ZHs]_"SBS%`5jF%@JHO`P@UW2@FkRJ@)5;P`rkl9:@,T"-he?h0a@S*+s2NNd%;Mu<K+o&$l;8dM?Kc-
%J7OiY]FX'<(e"e:JE*THM`afN#0_m"Q=WK2b&VG9i;l4qO;eEP93bG(#m(i064?tJ_8hFhZidh#Z93*!U>RUl^qOZC^u/a$O@=bP
%Ar_R-8/Y`o19A?JL&b#S_F/ZW4bcKIJ:Z\j,6SKQLr9>$X<aP(5oCQdOrWM]8&aK/!)M5qn1Ej2i[+,6S"PR+MCH>?,"Mi)5r_>o
%"\&T65dVspM4,'e%@;aMAGdp0huMV9#+:8]:k1bJ?sLPTS0HZL8?pE+b:G:Hh_G0oY_"D.].tc85Q[5RN<(t(\-5n[C^>+c2N1MI
%JP.%'j&d`7:b%VM8&'dG=XU/[!Y@[KX.e8eU;h$<'@8-84R+7o+gM+8K/gjVL)GMK6F@PLd)keZU)FFVl8FN$3>Ots!Seff5^\DZ
%\-QQ`b:&Fsh+Z^3*p&h&aBc!'iHK]%bT+snF?G6o-k0#kjbWkB*)BlDOT5J<C!L@M#8n;f$$8<r!Cp"tr*)>1'g'?FHu6j_C9cE,
%>ZuPoqJ`"@_>'Oc_).fh'Ec>Z(!]aS#M/hQBCFZ&/k_5s]R'\U%s9<,W1'"79_h:5?V%s;fcF;'GhF]I)T(%#_'.Rk^NVeY7..b^
%iN'-H.[nUZcX8HWnZBK**[2ihpdR&.l9p*3+e.gV]r[!>McW"eSmUuFd/,m>H6rYdJc>:-qaj+Mb"A8/)398/Tf5X^+/Vj4r.H-f
%FY78ir$(et;sIY!;)>=q<jQU[A__ue/*#nM';_'fG9bD)&^N-*7E59Mj8PW\>Y[LN)->)BmrQ0#ZsRA!K8dFOMN:`nj^].jgNiF8
%\W&&3G9Ru-RN,OMQC4ZHW#:Z>JZ@;YQp#>E*,_kdamAb1S$Es(Pm_^SB$e[0Ed?JtZp2cQ02roA$#drID8#%T.?ANGm"P'4J&NJd
%KmK3-Ibh=:L[,Gj77qrA[*#n,,t`VF\d@p8p#Uq^Nb0q>IOSN/nI#*aNaFDh^WR!mY'IZ9A*#R0pM2>W?J^r.?[MD%mK1IPi?A+Z
%C:U9BUTIm>qk&0:>U)?X;[6b#j'==O*r%tSRPbhj7MgMl*6]J`WU:>:HeRck*s%DT@j\#GOl,im:4e3RrBUDMZ^Z'G2]HVfb;7#h
%rcJW3o$)'1UrYm3J!l<S4L3=s]kY,\\*JYoM/j*@!)+?4LWT4$3d.KN)/Yc):"d5-OE4RHaVk,jBW7<V[*hEbg/7?"6`X]ts7nsZ
%M6I28)e1dTIO'8;eh!^NKO$Tp+A81/&jGu4[ESEWO_5`kalC0Rh@BE\F37[/3i-A]/0bTn4(IL7h+S'9TNpC!;L#Qj4P5ifkIWin
%0:o9ANZFqDf4'q[)EDNdChU@/IQ%H6_?GXQ[9^*.q6SO\O>[e'VJ!Z(mGb.hIGO\Ik+VZ'R@.P7nXF':nnq/An[:1G&mKoTA>L[5
%8],_Ya-MO].#Y%Km%L)3&iBJhcq<!+?FDl_q71?keUs_K*&*Rn-2o1fk1MTA<>>*\[]gQJ3TQNDh-uJC,G_D2-]sG*YA8DBCsc)c
%ZL.SZ+9_\BFheQsJa^V,/nZB$,_t#m^FPk*<\l=:%P?(q=G3r)VTABS,p/@'.;Weg+(F`e].H!>5a^fOf5EKD'paX(Co-Mu,hU%G
%YC`_,N3sEca&dEqZ%A9tC^jm5g%,-M/Q(p[gInlMBsc7nGE**pN&T(+GB6Nfl$'YR:0p_*$escr9M#-'"Ff_lk5fWQ"sm.)//4W'
%fK;m$^b!;]pXGPfZIK`.X_;F^qUk(Dq+%\GeAdPCet;m"aaOCDM\hj'p8X7mH=Q6ppN-74/F(WO$VrkM8.F.U'+7",TlN5W7p0$R
%Z#VT;W9#;9Qks5,2j6f0+;+i8q1ruH*aeE>d0AQ"']ue/4q8S<'1qmZ(HcZ$flP8'nN3ATZC]!F`p?8JDS5a^'T\.+BeU!>E(E[g
%h7k9ngU-J#:5DY4>n_M-cd@h!W,A?R<_$e=8>rf2G#XEW-#k;*U+=#m9o#^C$^oH25<&0*C"bPHcD$[1ceDZf]6743U5DM'l](Bf
%'B81d/\bcOg3mR2Sm<h@g:rG,G2%4hl.I9Lo5L(maU/gWdQ2`rg_>(BX-(aV=Uu.8":LLX@[#5Ol0#m-WZ74.Z%Xo`iRW_)HFmNT
%:?-N(PGJ^^0#^4o`;P)da1G@eg[DS*[W!G8XGbVRY#iplYT_^=,qYkI(<3!?V#>'cs8:sAH=XZFS$@RV]gQ,^*_jK"`p`nJIk(bS
%-uhU4'r&9_ne&/#W#Zj>;gaEHdI_Q;g5)FUB:opk(5;j;e?[_9Y\Nk91YS"FZu(U>AKFi0;iK8PN:DWdjsLlj0HP'd(G!/dpTP/L
%\SP0u^Wqc6jMl,["I;G'.2dn:W/rsRi4308crf!>aUKI<p;C$r$ijuBc-B'2s'jW3,N1r!#*hG3q$gk&9G1'Y7UT;62=)1@a@_!7
%Z%VN2g/6g5+%'K$#:kDqWCbfA+tj$N)%"U[hqR/VHBSQPJndt;9Q:Q/8TE%TFr4UYNfT_u<!&iJbEmC_P".5"U\6tD8,M.S)g+;%
%n!JK^7u`Si%E5K*fX_;?s,0WK.%2JMntG)R.oW6ZNc+TK-PG)iZ:*Y`Gp=s3)^_0e&d]^SU4d#qTR46qA2j<<m+W++7JEV]@@,42
%*AZl4ihRf32iA]&"<mNE[`DcYd`O0^e!eI@;(b@P0;bhqigQq4RClNa=5&>@dV]po_I=<Sd7W'=BNpWCKkIB)[O^5f/:!B/CPkI,
%D]e-Z5)NOt]B'.&_(Rj2l<YbA`WoM/:r!PciC9H;62;#F`L;4Om$a+d2Pl2('b1s?3Vn$XigK.o/PE,rmo2I\b[?bq=">8TQW=go
%9L2<Mno^!a5;.1S8[R1,BR4UPXP((^E?hV_#HQ1k`bqM4>r5&MRp,%S==!T0I\^u;cjGgt>GVil-U\hc^\QL]Wh4+#88ap*Oh"#k
%-eELb#[-0/IZ,H'D@G<b/<Z7oKK^gOa+_0sR=\an]oKkbQ`!tak?GMiqC%gB>*\5H`>ile:KGg1?BV]gG&fCX`td:)lm5RQ9_t"A
%Zrsu3ZQ4tBXQjM#qG9\XksNp%DRnuP@rVQdS],u*]7g!TU[L3eSa9'b7i`VH8T*2g%:-uX&iuIFdRFQ)Wp=D:5,*Y9'(&N(&L04T
%3dtthcZ7_V23\S4&B8Xn7VR`[FhCfK8*:^a3gq]@[Ub5+CZH@i>*'$7n##([VFgEt37B7Hm/T3W[6K,"OZ2=JU6Ea*Fd%YGb>jId
%EkGU*^-)d;qkDh[boD\hRQb&g@?5HT"a:CH54SuGR3+ejh#:kC?7:3p+&g=YaKG$c^Ub'US<f_q9%kQgOKJk/-"XbH@>UcOi/gZM
%3pdb9BJo6p`RX;9f1ih^[gU/cjR`tN5+,Z4.oIPX$mHL??aIk2M\\5BOb74dQAi4S-J)W8R!cCt/QMApA9uQl$+\6-0#9n!Sb%ig
%9Z`P,BtQ8pd-PMH:7GLm+%#63f+fBTd<0/LJ4\!([!\+2A`(%TEIX,IVWfY6gr.Hrgg7K3RQcbHfp;fC_7sHl$_.%C8\EP(Mcno;
%puQ$%<o1`Yk%1nEbCaZtDX(ei?eaQ1oje;h6_^!=*koIGm,]TGoDTD@k'qIAN+iYa`Gq\qhdmJ>1,Q<]HiDeT,SO7r.>2Zq[S64M
%i)#,%bV`\-VYrEc2j0?$D-$&-;%)_<gG$g=',dp;.t3\/E%Pd].kJeY]OM2hagiG];oU6<D_RZ^\<V+Dh9HigG[+e)@Hls,d=.0U
%4''!/E@UYI5bQYP6XFa"5S6]35L_B;SV3I)5/q+p[@EbkVZ!>.3&NdC[B-F5+Qi;>L2&gKX8Q^MaW4.4eSJJ&dm(;!RS[nK*llpo
%25R-j>$H':/K/(T9n[b6RWPk0ToQ<Sj6%afX)$sT%*@UA>>$!c`FW>'X;S4uYP%,O/:WciN:HHfZ:WAGj!A_"LmFso*4T%8lXE5o
%j>7Mo_hZErW]U?<h:cP`qlN5+b)WDL_:(p/L9=pZQ"3SXX66SZWQ5K<#490SmZDL[f;,#8g.Ff+7)(DV`VHa]C<;Ap>.,[$M:m@.
%)nj)sSuVF&Hl"1WIUY($X?-\L-BlrQ&m=cn]J>rB&+O=u3ej-gn4+SXqSQ@be$j?(UMcMdX78#_/,'A%5mU8A!dC6J=?<pFS9&:s
%R8,6V+Ci_,pEu>Q$-f.%@nH7[TU/3S+LJR\GYr<Kc0[l^Y9V\i35O0=(4K*5=EZYk>ujG-1?Y"R,dWX"rb:e&[2UAjK.2opr0\0f
%$k$k73+4UU.2It#s6qJoH@&2&8tX@5m^C`l2Ke$H1Nif<!on&IninI=d@q!MP?#?GK^dUd:H%q3h.a3MPEicZ5RXs.iWLgO0/m+9
%iJt@pVVd[SQ2@]>!G2Gf$LDh:OX^"b^`2.JS1::fS'G!K2c#2-i?<@@[=A52De)X%PD!Nu0RkEl7*G`.36tPO*>]Ut+ejt%8YrPi
%j'M7iaLO/+)Xkq0FWLip".J$jeS-@W_qW.b\`9-WK&!'E'D)+8JeSAsdAAa70")BrF5q.BZGuB%2Lff\rRQ+*=3Qd+K:7b/.heqJ
%mp/;F/6NqUQ*#A$B(MKLa9,pL"'B7fSp&d>ViB5%HAR^)7M71_0/7V`Gk(=2'Na6,noBC1)?VJQ&b7_/G'1;!!4f-+!9J&hpM98p
%]-M?SNp\0^c1#*''dX'-/(iVk/[B<VaarR$mTr@seF5S1l?.e]10AamO30Lg0Smul$H@B<FtG.L!,pDt2U/i*q*5p_?)"bK%serJ
%7,qV"kNB9,e:dhgUGd.<[np;7`a);;e=GJo.T;^tKSjeFiA$je:)V:Z?^bCqib]C/(&=.h.VA<Zs#$n@:F7QqpiJ#`Y1,P5!B2tM
%]AXgp:AcW]cR\!Ql?7q;(&fWP--"7=?]l)JGU#5NRP#.UegVr6:2\66*!^,<ln%@[2DJ:k4"%WC#8RAd/)4\Fq(:=Cg0@lrI>%p1
%<*?M=nL=OG5;(!2a9->!S3(8YW5_>Y4FFYa]4ao7(mf@aISdEn^;Ta4d:4bhV&6"rV^Y<jC58PMA]Hg-[n]7nP@8dV:#<=Gf!8bC
%c0P["+6i(f*)0UgPhJJPfBtFrF=#*ESU(j#@>_p-7r)Njg7(2Xnd5-R<O0=$hu4E.g?Hl^,0?CB7j=l$\?#n`>0oQk:"oVK."jR"
%5>1EbMMY;dp#H[m*AAML4b6ka%B9)f2*Ri)7h$H`g1%.3LeI./Xr69)ATg;YEZI,Oi)0m0,b[\.P3+%[2T2G8nhWMAder8TcLN^9
%O5cWM%G<D>2a*HaM>N.L3(B:78Blbae=_[L&pAD>/m6bk)F%:UEiYW?##[%%nY1*S1&^9,>_Pi&-H2aEpYi`J_[jFUY4R[tW/hnL
%eH?9<>=N8\DSW',-?L[?*@]-G3Lsid<T0KIU?qPMA,%PF%GKeK1)`1Sf:tNnf@AVcAr?N`"0EdEUYV8h0^+`aB:kTo.[#m4b]TPh
%acrdo#Q]Z;j9!;'j9+cP[Pd`u5fA]Dh1[FeJseY7T16gj.\ZItq3N\<Yg)eAWql.Z4Q4YC"`ah>MoBk>MR4P@FKc8Aj^U;2B>sh+
%"lpm8:(Kq"'*C;;q6/]b9/d@sYG(R^*Ff:Jq%oduI4ZA4[tS#2"c4&7#-#4g?^o!W8^'9W2N5$rkQk?Z*.#1<>,./l5m=AJD)V(E
%G,Ccf%t18t^K^V`b)Pb]TYnIa`k/qDG2_IQI[<)'$E87OVi8=0Ir.-P/0'N9/0c#s<mTStNpYboB5>4eleGi,;N:^6QajW'U6)k0
%MAaJ.2a7:fC@uIXE@<a46i=S+c/A5-@fFKaP]VWFm)elir@;-5+(@t,<1]f:BLa%U]3`lFZq8:/1-joXKgse6/A]jrJrtRQDXX$l
%&I`."@d1n-:,?$!B0UUj)C*1W%E`R@ko43"\9M3A&hHsKq&RY4`*CUNfShV8DC]JRNCoF4W0[@jSI?/rjFqE)B++auEb!m9.t*?P
%c%I!lZ10_`e3JW=luZ,hBXt0#:1j#8O/Dd]A0\RC'QSKDa&cUI0j'D4s3,B;I[NXn"$XEs6n<9e5(&goL;uDo5Q0sI+!ZASJfRe`
%:oI4Y#iaZO]&,,c9#iRBO447LKXgldDT%:L68%)rRs_E>be7;<.m7<d+t,<@PYdOGmcXoc>CU59<,=C@ND)mBj`fdB05EgjmRn*/
%3MCEGbdtm_E0/mP';"rTQ!1GHLJe;72(/D'E8*UHiEj9:lD<&b/\<\Oq'iX"Fir?3Z(\H4c+]CAL-%`0Hr&n`jWuLq?aa?B)'PH)
%m2!+ng1-)#,!Dep9hK'X%pO-Jj$#UWf4i6Z^CpRP?)g2?A\Yrs+*GO!j+]_Oa2^O65C[7E9N#$)@"?UA3l1U[Ds<'>KrK3TjjHhs
%gDr&R8tBl"iH.JsIA"Q"Cqp"@S1q"aV$@kR:*R)^pa]#[1KeAgL]QWP'T/dd915*>K8BOd:T*`Li5OAD;'16pHU>I*4mYUG8Q2RR
%Z`,&*Oqg)%Qml*i09Y/k#t*bhDW*.rmXuTX&$@J:V+M!>$J?N`H%g\QL<4+iDe5aUWH)AsFPW]q$Y:LZ&Bf5V3!3)DUmj/cj]LD8
%hM09,<[9)5k[Cn`S]_Pi3:#lcYj;X`&ou;u=7Qf!R1er3E5PRc;SNm<_@8j9,fYK/cWG?ZkOcnpRH1#dAZ0G!cn'D-A6S@^8!=3j
%H8>86a%Nk,-4<b`k9]\\Af'UIc+HXra!?uj?@#ip,opQ"j5l#Z$LW>Q*,[c.lSWIhiM>Wm[kRuq,)hm>,<_O;,9o?*<OSC/:.]e:
%\)p8G'ID^R;9%2OAh>pMm]1..H6c.,3GZ$^M2XgNq;Z?`m](44DJY.j:L(LRrCk]]Ycp&V\To#Nn<*=e`PDCG/UHRbPQYWNW?6b2
%ck@Ja=Rn7c%+FI2LqfUab?55sM!`W.BVu(K\HRpXFE73H]_SX1`O`\XUT_TX?<O"`4'H(M1no=1N16'8g4rSE:_1s?Lg42ZP.'k;
%ARGnrc,KG+q>Sp$',D\sn>uik,(8puB*egaN/P5WP*P]l7)F,4\pRN8/oqV'/g*or*jQ0X=#,4c^DR[PWr:pN15CoAOiCpe4F@(t
%c2IU-=#N\)W-BOIGM,F8"3H3u2[,3hZH'`C8=PDL&CF-Y7C9g"X;lZ#"P'*.V]R@nop31"a</?ZVE]lD3;:Vb4cV#'P)r?O&TAKq
%&3%_iknCSORhHMKg:>tb>n9\)1&g.RMQ++[eV`P=.H#IcaV#11g2G/a-og\F6XC`Wp>oN6PY9f%B\$"<&X]g8G+/f-,X8engMh-^
%>%2Z'NJZaGAiN<lC\p)\]SndWTf8N>QEcNOi)-%e=n00aO8Bcs]1bbtkgF#ZF`29>%nUs$M(U"'P1'bP:8/U^PouqDXs,?IP1#&k
%(o9fQK#Q1Y>c8=),V02*cZfOhSeZ1bLO2ad4tu8T5;\^k?9Ls^>!s<gY@Rlpa^)L)o?mJE4I[1O=m;-*^Qu7L`[lW@.s2L5`=b?=
%8kYT_&UA6'5;b;3%t:h*r5&i)Z1poGi(6jcCPjhPWi1Yc4'"p8Mal`c@`t+&Oi)f'k8m%^4ne@9EGRh\<HGrn:?ue=*d9@tfp*jb
%$4aR'V2N2pC<:,"Lm\7G'>9tA@ZlemM*#O;Pa<-ZKQ5T%MJ7OkrDC3<ZTDlAptj.j`A5.<V(p(jB5<#:W'r]l$2@%=k_*lFGt]Wp
%?@unq*@mi=$!i&mNVc1]*$Kp!K3h\_,GK6nC.SmbIfmeZ7I*DU)<k]#2)RKlN[okJ*hI6Nf?H2IN([rT*q@uI*u=Ereb?%I19d,f
%*iL(RUeX.MFBn#R.XUo@fSL#CM'(`38A4FM.&kRLKOD)!<L]A-\GSp-@A_Fu@/$>*l.?t;n2e2b]d\)+9/D>I^*rdEIt3mmpn3%d
%?+4O>U81,-E?Vp=3DC9k9j:"sS`m\:.R;:33+\MDgf'3[G-:"63'1BQB53F)OGLq#M/p4;pM9d-a*"kpf7'^KR49m0.T?e:Nh)[e
%F_/'AR#'-,)`2GULV?\.pEE#m"j&+1hB_[H&0c$f0Qr:Xr9F.)Kd`#L<(4\6rT!5?P4EYLTkI%&*/s%LRaQ>Qhn2'%1tE_hNLVD7
%Q%e7@lZmZK78<OI!Xi';Poq[J`h<a24MnRM?d.WL#2dhO[U`pjkNE'hA#eJ,oqLRtJ]'mQfK^03pKR9VX6+)aqB;bFmj;!sl$)fP
%Y&5SOM**a?Edf\+CmdnVH;-q3]'sjn]BZXP68>P(P=pt("V1.5'9?s0XL@)LbpUQQ7P3u\_8RTojWIO!?_nFsh@IqfE7+2H[</%p
%EjS#3nTkm:/J`9l4>2j3RLoEEeSjE(HLd5DIHS>a8$N27GQ\^%<aA=1ZI)K8&arBZ?+SL,kgu'"-(JqQMXo[3fs*-gQ*tEFi"RbT
%Dp#$BE_lD%eJ@B[NHFG$e?#s3VRocW"N`GUS0k(A.9n^`jk!WQk"D:^7='6S"$8+T@6)'(PhQR?^P8g@dG%1YXJ?(>Oi@3iB@!+a
%fi/A6&e?2Rq@Xr&<`Na?&eq'WSDD0'702J320I['6<$afY,dI<Y0+>lZa^W[0!rT/n0&d3aB`YEXuhciA?!$WH,&H&@i7P[<pl@V
%Z=@*Fhk<rFQ?mpoO\,bY[(8KZUL&PBr_/pH,3?E#@Nj%!_AT48&/Lut,uBCe"QDe)*]&YN0*uh1O('EdGd8i:[rQ=XE.R"O*4o/1
%6TLa"dkOHW8i;Ba#dK:HqFWc2T!Rn1#\YujFSJa2;O*Oa=(QZE!@t:_AXC,*IW%]?+qcH&f9Kj9/a>[R*kI2ek1(^B1*4&P=6(kk
%>cS>CH]/-nden(`3:FfAVT!_A:6uIi15AiK0Fk'!;ag%?2Hn*1'Wk3);4UbHbdYBcp(c`uTCH_C*_Zo+Pj^139spE'"'9&ecu]nn
%eKaOIIOZ>%0ZBK*nLoW(Pk:84Y#$f2.H;/sguSf@1F0^j8?#Vo>9aW]N*"XTX-s'X(EOeAo<)A5,R1]e^U*,$Z:`ad4s+MV1nrqP
%#U.7VP$Z59%UZ'$Pk%A"!pm,@9PtX;b/K4h$C=C77Ld&s]^Y.P0^'PEG2GKc#CW.E'P%mO3F#O7mpEbj&t!30?44i,"QWMp8T(iC
%DGY\P^&$d2XB!*am8mXl5]D61KikKb"`2;]A8f6Zm+!IJP6lf6J7:;j>I?ep>Z@Ps*)ptbMg(M;[\Vn!5q&N$\?G?&qg9>O;iUg%
%#k]X+H`i.&Ua_7ef(:nF_4##?h]]))&"UEmGcJ-8lutCW=!mU>6%8b>PAm-lH&,BCO)96arFcPYrCP4cm#a$VI5LW]qnLr"^G^E6
%Un3P-[9:1,b"ijBQSQgh"HKFdF?OI[Q+sB<6`D?&".N:.?f*[mLFKTOX;$&-c1/HOS?g1(9`-oU"VJ-1)bM=-bpc81mb'1jp\^0^
%>=mW"5a-&\9GC0ME0_FZ\".mm4s[g<jZLNn9'<6IM50DE7>%M<>T/e]dd1*qW9TCJ1.bO.\<?]p(,cEe&IfrlbP%%hDK+VX?<SVd
%[N3m-Q:VsVeqn1[#2&I=Uc7@g9j\X8e<[`*=QYp_=Pp2Ree("H,p17[8bg4H/ZH>$A0_.-s"/eBjhRY>OA<oM263UM%!V/'fuQr9
%Yoa\GR$.'o3UC+42"AX>`bA6$l3[&FTA7mqGe-r%():3aXZe%sG,Cri1:sq9*-]+X"m/&=(mF1VhR@Mt<'&R1KTlg*=+H0Pn0BmK
%jrbiNFB4LaY'*]GcM.pjiT9JMSW:tTdCMDjs6X-.+>G4RN0#3:Iq6-<-@^%a)D_LsA'Z8MlLc53&gTXjVk"1>^-&,^[F0%CW>o.J
%E\qN+C,=h*X[;9GlIXTIP,!*gW_IgZ\WDqMIh3$@A;eg)Zk11jXqt[6P3G#2S3p]lWU,H!Mlh(QUgtq'Ra<51$q,"0b^-3r'RJ)]
%MRB<"$F7ojP<e,:PF=&t&j+sG>pY1n<'AVlji!@fCA]p9cN01V"-%o"[3GZcag-QKL1fh77[Lc6!i+9s<)qK,\b!*DYW3hKk::jG
%<0+;G=(b"U`[.oJTlN%6:GVTN>uSh9(QOK[Qah)`C6VTd0.9=S,3_9g=\k44Emu@F*]B=58q>>s8.Ke([k)@c;U7fF&uEBDf+o7h
%--*P?eYIF%F212J4/Jf&c_%T&Gf!9!^)D;dO<H[56KkXJ5e_d:)J.1%6$?e)&ic+ohn9VVh'mB]X\sS8V%BSna@['keALR]_&4Q'
%O66"$A@`Xh2i@lK'tTF(-rB"P-6k"[)Y\gcrQ*VrI5BE8%g;NoJ\KC7G+@6cD5^a0"9Ltl[Ws)oimJ?m6rjTtV=T@1iJm:$Y#JR]
%]A6"9aFfDK;2C[R`4+._6P2(>KTK0eKh/&$&<k#IH!J^7I%u(39b8QAU1?YMKpUNa:3M&.WaH/PA\CMG+l7%=JM0W:<"4^_4H$OC
%1"-<r:r<[lPa&:m!A\)?7+b%l#Bh[Nho`t/FY9SVNP\1VX_t'Fq`d-k!$%XeEr6;=OUGQr08P]%&1#8C'ZD,"jA2(j<^&8kVE0,V
%phJI=LDBU7[Xl)T:#7:8eI/6F/Pi\Wg]_"i0M=kL;Q//QhJU0:jB]\)e!$5-!pY=\7cR@>V?Ir.pCr"@JqR!H=ZSeQA3c7VRT9."
%3",+]8:Nc:)%pc)nd91gL$_8BV]&Xh[HF^NJ=Ym(0VIm"j+o;.JL_(MWLXT)0StoW)Ud<+gVg_sA6FA?XTrkEcc2j]7Ko3[H4[4[
%=2]Z-_=eHJR.I'DTG@M1jYn$jGHd^<SY3dQ[@h%)as)@6Pkn8&qM)t\]gd!R-0:U7PaQX,.#r<BY)mJNGP//a#-K->5ra1*9OsJR
%R4+pT8*O5MAS\JbGs*.43VI)@]1^Z?WDN-0PIZ-_:Yqh!@`<^t"m/n9_Dd10<CEXqF:Z\V_XCgb7aW*NMDR9-QCM]RO#h<[-B),)
%O6&c30F@n0"jm%Ka7@81DgaVpDk&LJ]>tBnpP2@/"b]]Or?nUtfhi&c4/lT]m$4u/%S7*U"$T/I]BVVtrgLEDTFNUE:dZ07=Sl1/
%?9>jUNSnZ9bYd1a>.\qu(B`:NE(jUrT^nV^-JTZA`KY]/aG)P&M"80<&l*.1E^#9.'I.Dojfh6];9.er&aB?<+c9he=9FY>@V>1G
%,Hh&^*h8J9D<gV.5-Ig<!F(f)'6'*o\(`b]9W3<"7a\+EWJB#Za_XW&1^A8fn\ui>LE[tuMi<hm=Af&m0`+pI3UOj:h5cOBJ#Rhl
%=puFFApFD+,u2Di`229.!#dH.e-1ZjW%g=9g,>prNo[R[%LfJY;&^t!P;??C@qeg9f>GB$K_j)7n(MeY-acc!4^AY5+E0+!"d02j
%jF`lD1JAj&o>sFNCP(-i1Oo+u9DU\ubQJj&X6[#/CZ+L"*@4>kUkKG3X"EmAaX]67S"W5kLs+Mf)Q;u_\MU-OC2.$S]6.J[GLV[;
%TW)rR?:^UV%INDm0q'eLW-iIa7eHRVTt,<V8o?$JD--%-iS:k5kXITqR4JBZJGqI?hS0Wm)^tUEcQ%L<fs9EBY]?<*.2BuGC3EU:
%<#VHeAG#>TV5lJY%bKB#*C;9G4^^O8,OJjhetQ8OotkBp:&6n?C;Cs?11J!).?U]IKi^Z:#etRllF7(<d^2_<W3gmBS:iN&$_l3#
%3e-_;=)tQI,g-[<,2C/)4;Ym<?INa`\nWZq!MKR4C>+%O_!Z><.T,BnS"QjfGp/2",eF/W#bI*bUgse5>dL8Q.)#@u=Ekkn5`J%S
%0]elF8D()u8HTVQ>VPL'K'='f9\n![%d/&4(^p3V\'a1V-7,O22tUq=IM&V/WeJ>$>nd30bqgTc8&FI`r3Em!;"aeU>lmWTAJW6%
%kKW$ZrE<D,qFPJ6lm[0LAps,c)<l-uLahS\P.NiAbq^]-PWMSE^%qF12R'hr:h.jtVX2VX$V2Q$aW>ht=')8"JTOqu,j!0je/?'3
%J,jPlRsms?d)23<hqA5c`=tFl`]'j*PZP7Bk9R`M.YFC>32X[ET:)`f@"gRL8$tJNU%$TFcB^t]b]D+T;]!an8'hp1dA(@=M>QPJ
%TB_h3ld>%ki#Q=5XG+:'m9$EN&C4N[Stp,(0Z.]Nmf^6mdSl^.Zj,%,C@Y-Z/\r;jR`cC@W5J]q.I(#$$^sZkG*RjLgn]&_JR_]/
%<t];61d]d?5]_=i`\-%-F"]PTnP8<AHd(:\[5PtMm'O/tU1,.5cV.GH`>)j,cMDM<lDaih(RA!)D>te_WAM.O!,H9=927XF:<X1]
%9Yluq(j2O2gU`JEj-;nn$R\j*9;&H[bHD-]QJ)Ga#cZ*.b9-lT)\a1g+8@;CITh(A*S=6k)mtq(1:/^EM]U]O)W.<>opHWiR<MAM
%6Z/0Qcpqb;0SZ%7:d\,B;bd%Me_^QJP<Oo6+j26EeAaOI>["Gmrh'@G7.o9mis^u6l;ICZjla[hdG0W/?=):4$MY-13B5q"K_g-+
%#M2lQ7Qi1AaO,TD^nL-\f>R_TDojpHod_u;"RdT0:6T=H[-8ltO377QdD@K*'NsY:ON-Pd]hJAj]-94-;.qTY2J'ZQ$*<[T_C&]\
%,ekme;QCmj.pJ3M"9W:!Q'[B+DrFhr'@MfX1hp+.HI(*qqh*E"]Ug+1+*Lc[CRo2S4e&l$d`b+^1jc$dEW8'saY;sR:/_do!.P'.
%I<;1#-_\/`'Lb#rap.Cs<SL`ob)Cj6ae58`D4;b]J8"81^/4]#!T#2ZB*C$K."T+c;tAtsVmF$0mc<95eK/]=W$+J-$gH7d/IMu:
%i7)L:C"6/:W_g,s5[P"IeNd<DK*?8:Xf/-MBV@"SOeA_?9'6dN,SZ>sSWp*9?m((8i_T5,U?lGn:]%U)ldNmEo&5ZeDr"hUnNOlm
%_-sJC)dOX@$No#t%dP%Mi>C"=[?_C4N&PFm0]a3EERtJ`"15L'.04.RF)GCG4?R\BX;L&lM?A0+=9-\fm57/q$E"AeV3DUPddsYr
%=&J']aLI$1JIK2d1>=V-5I70nTU&E:"m;rT;Z=$HHoaj\%#(EM2oR/,8rYIr[2g0GbG3r%?qr<e>9&uU]nY^f9Hb4*bI&=8[B_';
%5gEC;B?23nm)>qs-#395rZ8`IBfZQ5.$n;-F"U"YH9bZKD(D,*M)ueW41=fYCQKMZ(fC[^8oT0go3pPb;U3"l<1>s%K[?/&5:E\.
%VX+U'MD@004K,q*UfN>)bOhm+LH",u.!8:S2!m>hjEE^[<2,#@_[eB6PFTNeMo<M0kG?Or(-"1g;c*I]KLg<K-E*\QO!RuRM@n%]
%gs=F2;(R,bgA"_sWD)[83U0n9LFq2k<:3D;(Ks:.A^6]+!B'W4piD21ZWDM57oQ-jmroiWoKru'mH\cV.lr)OmSj6<:ZCO0cec@!
%@SAW'jLHM33oWDg=3Fg8]+6;NQX?J,\helueeN<`i(8LEEBf%*oj!K:[[4W3rL)H*A=W4-0fm"qrVjF&;Rk>DAOjTm&2g1kNc@">
%i)'cW;V[oZ^pb!-*)i#uZ>B&fCu.J--hH&MAHSHoFDa!uf,rYq(7bYi+p`e3_s1`5,YTk*AC6uBid9;UO/NjW_$kk7S\))eXq)7L
%P4u%BK+-\cm,]!Xi7pBm<*jkt5M`$*]Pgm+n]1CkRF<>09M>K%NkeW`=O10@3@B4U/smG7/AkuTY.bu7jFJ_/WsXL\)Ya!uXZQ6:
%Wd@:\D$XQ=-Wc,)Rp:<IEY,b0C@8\RlB9Q-J/NW:h`Uek<lm*B24gJX<0G7SG7i#c]#XUj[Jt1Q86Y,TRn3mb(P5`A$bX9m%p4GT
%Loe94ZQk>ge6UU#+T79)o(+h*9&(B,Hhee%hb\hQ'9OU#pJ"uY4l]+.-GLpN?[8/JO+pFGi522!^8g7=q_A'N=VW-_m$`]R4d"M$
%Wk<BDF-THBJ\47M?ik=r.!PZm8uJZGkN=,YGXEOUVF%DNJa5iC+R5=PUCn3MM4@)dTj\hlPE<I;4lKZ5Wof\s*dmL.D'YKh?N/AX
%KKS"Pa5e2[19_Kj)IYA<;slD&<??iTaBn").idqdmsYNNEA@gu1&hn7"4r%46o]7.f+LY'S2j_CNN&.(:0&ce?%=THa\P*E0eU0U
%$]_ZQZd3p;aYK-9YPOXtc((_0kC;H$6HNQ'HfjB9VXNj=%9RZ,"l+fuPmrhX?ltl)<A2tY%56abpBo:U1ZM4Hki"*L",h+XkA=fX
%D'CM(H"CU\4<s';bKRibF9mU/1CJiaJRr_dR=%JXQVPbpB7O7E0XKPS93'%LAj5\!B'*a<nd71B^/>[t_BgiM+]G,0BT^PB@Lcap
%nN8Vjl;JQA7\f8B:).U#H8Y*\q]ET0]#24RY;cAAI_]m*\$=g?bB.Mh`&,/,*sK,mAR52$?6<_^nZdCs+1nYCieNQ"5FFsr3H2EK
%)(pWi]QH-fCL4$C"KQdSK1$aqmaF&%.K*<:.]LS=SSuN*\cN*T=Q)SE6TQlo4E*1n)(^j7H7GLRl&]XHB;s=EU=jkddof.\4XSl,
%?(C]OMMe4b!\_Fp`hdq+D,L[do6P6dLl>-e#lco"ngSegr/bL6CMa1\'fiuu/uu=>W_Cgr0\2oik%3aVG@u1G(OXuFq^LSjFhM*K
%N$J,>%X-Xj!^aqUs&L-uHLi8mnd]daMMf<k;\@KU%0?dO?PXQZe$@TAap;$\4HW4W)MDRc`$S\ONSj9BLVhQP!&$1sU#Hi)C=2k<
%a#Ms6)%898b+C5pgH1Vso'F?f-<-dRUQ84Y\S4toLQXkiLrB!%RYR_.bL&QWEeq5YLc]DRT_63<f\p4Jco6?)GYc[aFAA@S6"6"p
%m<f6fBD'\Q(6-m&ZR\#ij6*8NHY6e9pD)1HU,o*3U^Tf-s7l8+.$^T/KO3mF3N'T"!Jp[,UP(+e1$kNl[niid4#R<YIGFq@).ttB
%n/9i*5.Kq/CM1Z5c0F_k[C,]YW>O8dY=HAK,[lm2odk"DNO[dqha0UD[N94]3lg^,].gm*H]utc71!:0rKZHHBZep9g?uhP&uAQ[
%WnqNU(q&'Vpk'b4LjIV9#r0=5-1)d)aVZe,+n?,bl,k5A"ipg;Es@MVSbG=b?Nr44gqQ>3'hi(0>Jqs<[&UFZnR\.#oHQf'KNDCE
%,$[7lB.pH/-QkSfaWaGI.SS"-h97suBQb2T\be>hnYrlcqMRrHGsb&j7it."h6@VI0WUhcN%?ht`h?i8$OaJ9lMfF`bt4nYjmqF`
%lcO7V'tfUf%A^"S0Wsb6J1ekDX[jHIibNR6$5Bb=5ZAsi.,T![,JQ2_H".r*AqV+k6T$.1;>Q\S+/e?7&HnZc8QB[VK`Mj!kNFOl
%+K+>09EAq*`hV(h$OZmO$'!,LCg*TX`s5[>P9>oT"q6b<AZ>=1T;5*j[,uS@3ui;i;B>(GJ%U=SV;>*Q>=WJ$7a57@*esk*[W)XN
%RW'WIL_oVpltVeXm+;I7A<i.K\m&Ma4MVH=%Cp`n(CEari$m+&>[asSjWF]O8!9pR<?49Z*D5TfYApO@pIhNQ;d$S6nRU7!5D^)_
%k0S=KHaX^ACfYuW%@LaZ^5fp/)%[-gA\(=L/IYNJkR.O[Tb=(X5mXHhXbcgo<AY7uj8#O&4*^s`#NRe_-6MU!:naI5S158bE.*m^
%mSFbqGn3EtJa@6tS351X;-0%K04'l)8t@Qa$-=.;<JR1Y&:ak=GehdQEDWspdcRDq)@JBcD^3nH<d1N1m`T`13#p0Yg+hS[b.o]*
%9/S\MO/RCW-g#nLpaWdn1kM10lM8(/:U]Z>cH39!$7AO9ot<@h]q>[nPp23--Hm?SbliDq4c<B0lD1LZ=.>PS2[F&CWir8YruA9J
%Kd'4$H7AO4EGN!-Jgb,K,?5d95[Z)j9L/^RB]$o'7"gVObr-T,#GYOkG%,C@Tb4?nV@k82,ReAJ?7`;,jgT%"YZ(WWmf,9Xmfqmp
%'_p0Pk;>o"HQn?L(4pAM3`N)*WdE#H,hC@dU!]Bj8MWlZ+S'%V@G-X\G[[U9<\Ht_?,)Qpjl)nLQ&+[ah%Q_%*'Zt!TAJLlV+Dg.
%f6F(eCF^#mWj7&!akCH\8OY_5e))S*\X]#.4&TKc#[ZHV,asO?pk0H4/:ViiETXTKp&Fr,&`IBU?u*,^2??`]b#,2^1^``]P_Via
%p@9Sf"As_Em+-a=Qo68U5Ieb697NB%?qNq;dtNpX/D$_Sr-Xfco>1%7mdbKAF*aG@r]F(c0%@2+3H&[+B^%e$Zu$IWZguJA"2QZg
%GpC$.Kj4bt6:dO!dt]/+a+nZVHaj'X6uJ$WIUT6)8@dg?SN`EnoT!:jau*.eTZeI[hC!S8PQ<m<.!h&"oJEi5Ba2XgT#bD.M6\D*
%bSBItZB[OBTem#t$:G)03J6iUd]OCi42[dhM(PM"8D/XlV'oo;CZJAF:7IcFDUEGJP\N^+T#pQ;X-M\$<p?DaDOu3)lb>Ypds>V1
%>o-FG^1MXB<YX4o+!oc^1EO]_du2cIQo#JKdorb^Eip3jQKCC5m@jtb'Bk6Uh;<_lX99\@PfO*e`c;Sl_W(n=VB=Tl5*X]/p("*O
%H#n!&:JsZ-h36mrE^e0d0#/Yc("U=5nMZA'M]1jiO&k6_BW"@c<8bM4JiQ^.Y:&dd\KHqpY,!LTb'#K1TrJ-82:G9>.c^-<s05!)
%0pj-Ae[;!<r#t/r/[b5?dms?jRZC8-!Yl__pg=)*f1j6N;jYC%js?8OV0F4Hd#I>85!Bp;#=fj0'HNe[1'KEKLi8gVbB$Sg:n't8
%n290I;P]KjQ!C_H`!H1#S7TaT`/24f^4PZMhE9EKE/#"5BL7=(+\@A(?N"]@-?&G!$e6Rt0IEQ>CT<HA-M'%qj?"so,r/6teYF\L
%Wok$q[Y*;T5ft@j<?7AL-m!qp7lH0$GGeB;'!J6@;PU<nVq6A6r3PsX"&#F2jbOT^3cK`[lDWXJ/Y2tXpdL+>\t.>p9:bdB$@/!<
%Pet!IQps]b/b08U:Pm:k&DnVT,#BA/*mmh#fi[JUW5Y3m)6D#_^&g^L<$j,3Ort'?:Xa115WNiK.e#&Obno:t[!:4h2*#BHSLTB9
%,=tN?.DX>Y[LL'+>SmBJLVeiJjrL)7i]=2'<X!<DTQ`;:#cCVJ2eqRm,_:<!P`kJT0tZf<b0H0+8rD:u5oJIM0jO6'*n:c(#-'$e
%5jbBWVjcUS+&OCHX?;UnbJt_S8tU[1]KlEr%3(X`Up>h$8[h)XWT`[G<b:3-;(,B:XcnSdr.1]7&r\0a#GkibN<uVObV2<`lV:*e
%F\l]Yif[S;l=#R(,2\eGG!oDt1\J!%nE79onlbt8L-,BHeaI_FrAh^LEE5,g6_5iihe;\/-;-elE>ph)5']NU2Jf'1D=UlIQjaGg
%8gX!k3F7>fB.\ZKV)R!<>tAXEjR4&u=EAb,\G^o+h3A]3eS$l63lmXLnmt#^1Zs$J/lDCSnV\htE@M%S`Q(fU'#ZD%843oWFPn^;
%:&T$a[+,&9^ZUWRh,=hd$K2W35ZMi-j>+gKJ^ah*b-dGSM4@2@EMEP)QZFG%:+;F'^=(a_d="Ua*:A\e2OH'\22bRH_<L%!>%ORG
%/D)+tr.Jgr@$YN$K-_$^#6&^GZ-TO`G7a"eag%5K]Wu[4U_KJkQ+C2J1Sadg#`s=u/%+dX7)Xf5e1'-:KBbP)F/b$XBJ>QG=[.-7
%pH1hiSW'XAFfZ0OaB4>J2j#)f'U;mbL0\*F'mHHEX1YSBb&)f;fi=HH4Vh/J1HHsBA\;(l2?:L\f%32"BihE_<Cu&O;?soGrDX]u
%FQt@*V\+C[hSNkj^@$r4Og_6bP.hIPmTGf'/4.B\K\JYDQDIIiDO,S+q"FrOZ\Jaik$I-8AL),YFgLKH)t`>&EBn\NVbbXXnuA:[
%rdT!(ZoY\I[Y-+CYVl0?#qBd=]7%]1]A$Aj*$Wd0Y^._Pq\S8j;b*!9T6blt,\%FBBhEEae>i$nN'+N&63h\Al=(3/?Md)P-llU`
%JnLD1?_2`-dhk>Wmm)3!n6Uo0TNW-pn<Q[=TY,N92a"hGd\ulooE9IddB)9sn^u_Z"g4't@bI0.cW1qY2sF&/b4YVr1r<lMq;.<4
%bBW4]oR)1mbiX3JN3?K!G!(*ecZu)O"fM">HAO]7EnAt(UZZ00GFtJina,)hCnY2R3)PBM4LE=XANm;Yn8fN)I[_A!5\E0g5-]+s
%K:,8ljle&d?^LLocN4qXS(sb]grV-S;?3+=Wh;Q+IF-*5k_T/t'L>bhD]3i\]"tc6-#i")Vl-J[@uq5ioh>]:Z8Tu]TsiBcTDCV%
%?fL@3ae2:2)(c1D!mmjV#3Pfl)]ct:]q80=9^Mk]YP38gG?,*%Lj;=b#IEXL`jst;1M8!@h1GX^dJZ5M2sJGU\fYE`AN,h<!HnP`
%%rcA>3ZUc>21$%RIZ`YN$hea^Hn[Zg0NN8I`(b]k-#ZZ[Eq>=SeC,pSFY!L0NtVH:J,K6UhgPFYDbb35msb$"rnTg<p;<N:qu)$E
%pfmXY+9)38hq0%MO2(TWp0T8]d)VW*prD9@p[R5,pODtumsk5TJ,J^n^\dUe?_@>fYP@Sa)s*!lOlP]ujraTc5Q'K^di\VZiW&n,
%J+q:(rK4SgHiDn=ICXb!lu(Eos)&iVJ!4.;b1D+>q`k&QO8h)//oUaJ5Q:XX%hJWZhuE+?^\dHZs8M3MIe1VKIfH<j3$7p_#h(nc
%p&Fj"hu)`2Ia[B>T/c*64%G7tYDhd3r:Y@7rLa)]P6Q4.`.@=5blqc1.cR@Lj4@YV+eLuro1\kWq4ISaQf%c2g].1Ihsm'5mCPT3
%p\d>FQeoC7ma\3WrJ0ijs-o(arSrD(mebnUo&BU7V9.KlHmpI/DlU^m.U,p)-b0Qk6QKc+afeol4aQ"6'#!:!o(%WJ<%8gr_QOd>
%edtU;POA<ANdcBTmZ/_l=qJ-,4BY1iciCDFV"RuM(C58d,@YE1<^"7@_9]&2]S)9tlM3XDrg(3\s'B$`(%.sQMBgVu;M@[%c(,>1
%2;+GiSudsh[j<`#:b?@<&G_HdQ^gsCcXa?Lb.?uGq$GS<MTFg>*`p]A[@G%-nOrko\2iMiC[5=,GuZ:igQrWATt9EG^:a%9\G^De
%;urHCG%Q(qY<`\>!0isSV(%'.Dsq]Bo[EQLHj7UW<_L#@>uOUPWO;HS6Y]3G-MjQQg:Sop=aac7V*,>B,M/.cr!NSn6N3pG(N2]h
%,q$>rH-/9GC7JIJSS2#9`"BnjA3n09<VZ*M9R[7,C8W]o1.$ZGIN?plp>KTj(G^b.$_$G[!]t)2/IBX0J*9S\A(""'jN@rqhNIVD
%Y91?Wag5"G<2fgQFL$DrJ,Ss\55t@RpG2\;Q*NaL`i<CCRf0-Kr:0[Q5(8o3p*CgWCZoD<o)4K4p8+g9;:>fbV=Np'I_(gL;F%-L
%i%pV)0A36#;l@9XR)sm]E9_MOZnE<MnP_r$dF&6lrL]p\I0l)W5@lU"GC%u1UIhioUAU,5,73U909eK/@E$rD;dRZAnj-!`3`Vk'
%RjG-mJeM:dDV8$SK:\i1=FX)Z]L$-Y&C`'&6KYFI>7Lg70'#D#DKnhE"!!>@902fkH:GXi`#\e3O^!,E!*0%-o#Ft?O"Vm7cO6]0
%16"tN8Z0#W9)J+*M-j$VQ<%>GXd3Tk%dl0ep;c$>84PgdI;@LR(%(6$mTn3MP'o$tJ]q*p3"P.3H,%8iBru1"eUI,\UfLpkr[jIl
%?Qn=@r"D]MeqcfAi.oA[RGA<ZdZfc&HJstFShI.N$_lpoVN[g_En<E)!7C7UP$W%)8(`eS\$(%1I!WgdI[e)F^WiQl@?>I+mJSqT
%3+Ye5T:=R^.DtiM'S?@Wh)5CPVAToZ\8At4D:?*8Pa$=?iGP-.W'e[8/#nnq(HL/,>XJ0eNs$eDWHXpNOt>/gkTYet)mu_,BYL;`
%6n9?_+[18;a,!0dXMTWXQ#t/#XJGoTYO^Q0)U'8$rf7>m@lrJ,$HS<n,.6ts-tW1N;Eo(r:M+os=.OE>;d[H6YNPD5Wn4[a%9#FJ
%.C-Zr?L,#Lq%]l;d6fq"\5(NpB!-MF4j&_MUBS+coKTJ#D^:Y\OJ47Zen`1plE8&o2PVu-mh/iDVeI(@%F-1U0(rQ#KDocW)%>**
%9(`\0JI\0QD31J<=uqUTZ@o3elJ\cORM,4V_V]5PSJqX\?<Mp`HR5@2*QqAj:=Qs>02EDOjdI#j1j2rJ@L9c`Tn;c%=]V6-P^nh#
%:-hK6YIe1qP:s_*auZ8OKEk7scV')o#A\Yan9A"`1Oh0G&*JW"Xla.U1/6PF*)fJS+NG5)5,4Tm-$VC!,7H)qh#J*]!.Et?qVA,F
%Gm^#.?<t:=;_YI>?K_'q7fPp1q0Q1d<Z4i7qotCs7/@Z!<^/ZWVg'-PcV`@%`.ME]SM(/Lrp&olFM,)l,Z!6s.@SG*pZu,=:>-/r
%rJrGG!n-sB4WF,Lf]jP!VT]_F8[<0*5EPo:<KbMf3oJ,\7hL<9WYae[)q\2YEa'%*D7YjV%d\*-ALQj;LaPSB'em8/8aPj/4um<W
%ZW4efroDNYjPqW=kgbg1*r#HplgHn,g[";>L>Barfmi(5?9GV08%ZmTTS[,_;d+'pPVG"5$Zo#H]f=^S?KkE#/`NS(Y?g_l:*[Bt
%528im6@O2kIU@C!rmZ0\U*=!YC*nGJ>PLk*o_3\KcUFB-Wn"SnMs7S?HLeu2/eh/^XS\HHn2J%=lh"A]^VX:S0/O*rs-rYq&&O_+
%4&d.*@hhbKd,">\)u<asOa=POKhofLDu%?bq)ajjPa]9,d/+1/8,EmKP^[e1LhV-!9?F+2Q2flJ+X,2RX(R/9nPZAcFD*B4+2%g=
%<2cXkbaahp'D?deqY1^!-%blWrsa&iQ\Su).m<esQ3K@IA)Ue:7`26,L'ipZ9ijN@L<:*lX//m4!BrZe.lWa1&V)sh?_Jg*%.Ee<
%2XSELn2L1)q5jR].d;=TSbV=sl">J0mo_'f&ct=XD_IBl'u3E=o2J:g]8-B_Jf0IZn?ZJ$d\!\*?=ajc[cn(l^`r\Uo83Bc9,<+m
%OA@NTKm\3g0DaniX6==/`UN7`T9m.h%+>3*V@"cg7S_G4W!_c*$bjrgRZ&`Tm6gorqIZ1qOI,,!gZ54B(ToRA"c,Q2l:6DZncV4O
%$k'Q1No#GW,R?_WEG0D;qXctc!,8JkCk)'KS!Q#5?`gN\Z#hs3Z7lYU.m>3:/NV2OVLK:#ZjGh>dZf)e76/%M7lZ88YEccqXA49a
%3Hu$T(bH%'a"bsB#&jj`"AV9tHElC0D6U`"",'?6fJZJX&4a0X^pH*_+t[X<q#>:p)kiLYSH!D[YI(/(CAq=%ea2B[/ln0(N<42K
%HpBC'0oFCWBASaml!V!(LW(D2,*ZXU":U>b7d6+tIQIb%5l;>"G<I_fW;ta)phpuP?[dj[Q8=/pal[<%<sDeW+e%_O6^F0;$$Q)u
%6XF&_,!b0-#'jcScEk&8aKlaJ1<?4uq>+^/8Jk,'bTZhJpQT0)!Qs=K!!#LH/<M2IWm+a/h;t_+@\@"[X\.oUdN$[j&W&RrouoZL
%K90`(5op^d5AI_5SlGi*X+>n?hk4hdS%hcM\1"(P!*DW>e;oI;.@#(FEak]$mS+>C<&8M(4REUg&u(?iehY@i/V=hqou\=09`T"2
%*G9u:e4g?&_DK3dLQFrZe*&V>;A1O:qFf2K>e^KB<ml_/olXr-!0dQDdN5O+Y\;i6f)1`QQ>/UF9)`Xlr9O7AV'Yb$[A?iU0ng=8
%ZPMaWRjsTqs.j4)0B*`Ci2DQJo8SfIEgh@W9`(-)%\53AmnACM"/Ho1H_XHfTs(Bsq%9MXdhm[8_F[a#XTU1i.tE:n:buZf3dHR>
%o!a(S<M;_CkG`F\#mu%1W4l&LXj^SXpb5b>!G)$mq-/9;Mo%Q8M0_XpH_SVA!0b=BKk)id2"Mm)^W=,*XU6N$1LH1\@feIr<#K3L
%4fMe?Rap?N@DMbN;?@5r:<NWNM)L7:,V1!]RB!#<EDZS0lH#knQ-?+6K(01GWhY7d:#OouM>-3Q\UFBHRrh=f`5ZBC8#INVh]hVp
%EqF5iJH;@Sa;GgUqiDhudI_3lXm)`mWE`0@d;k2Y-3jU%>6RiV1N$&J3Hb&39!'9<=A+UC(*]f=34rX#Wd-RCj6F3hZqSe/p&Zp/
%TFVYMC.WhBeDT^"B-(P$=hghbp(Sm*@\j7*5=__>)k@uc%7#odk[hQ"OGt0:5)514iJH0)8IBus#;)i``6Tr!Yh@&\Zh&0bf+.gA
%amUg15$*b)*n1VeY@g-^!`;1_3*,6dln9"K=;k%:G=VToOfiY/\\t?9QKC0lmjfP=`Y#CjblsFPF!P+;M$O(VT`#6k153co%Ta-=
%d8n[D0#Ol99kL[t`.]G?Zu,<&+m0^D,)No5J6NXsjr,4P$en#Ce/gi0&V\^!jL(EI.-3onh$^Skn=(&e4j)A>"N70R%Yk6Pe0(>(
%>tXQ^qC0K%HBqGCf2q2&.[Fp:;,sg0[;/;R:N\`Q!*r;=#ke5XYbc4=67Qb6&78-\ZVcV?A6hPi&(LP+`ODRQ.I5=\0G1:1AnM/Q
%D,s5=T_NXf5[-&;JOcX7<L6NYR,F[H_NL+A'6)G(.s;S^K/O,Ekd:RDk1cI/NqYo>m711&>:$)(\3c7VY,,B^+ILl'QrFX@26Dd_
%Fjr/kK?sfX=JN>6\#n#S_3<A.9bCcqJB:`,.uiM&$V"amNW"*dG3W'%d';"/b&3`NIRF0Nd/f$a!9LiU.(Gfb3nb'Rl%tAgT-#&@
%VY8kQ=o5G@56ahVO4)]Grru!6<h?a6b?^MqZisO)P21!?$eP-d>q`<sS/m4i1%;i41b$IO9D"2@''/+hggob_?R-@U^BOPZ%c6uc
%Kc<6niP+Gf]T5Bu^[TchSj#9_k4u&r\j^hQAV'BKG$\1.UWel.d$s5JM:rLmrPfR14:-JMF(!Klp$bFa8MGMHZu9Yqf#N?hM9E5a
%l;r.#%XXh``V)`##8&dH+hbJle'N"Ud0X)[@A>48/@"mp;"/>l"FeWWO!2EZeuj7m8o9\>Y<5;<ZL9lAEN&;b^0;5\Y3W$9L^YB:
%!kGU6AJ<]RT!6pRoE.de9;ZLfUtLNdr`3=D!?Y(Rin)fJ6(g4pSS<DCP/6%-F!d-n"OOopkc1gGTY/TOptHkAD2itWg._eQ>L2QC
%Y$Gh4)(=P3]#uIiP8t2aij&P=TiLQID+fIa-FW/+5jX@$"o1.CelX2G&,nPDlOb^1-EWEH/ak2BIC'5BC1_Y[e[#nt,FZ?7^iXl1
%'_KQ)Kil54C?_cOEjW^6iX:cIC.K'U5KrZPDMRb(B6`*P\JFFdFDk95\Rfl:((.JOFEDI8(>SI;HkctcG3PnSeJ&OOYr(fB:T1._
%([jQX[X.1/=J9g\B(g/D\pER;_+%$?U+[;,WC:SX(hG-d1M;j9P3)r[V4"l4F=UuAZ)i0kHDSEZpZ\)j1%l&=e1a=tcY:DFK`E\6
%%iOqKQ+lWDr"fkRrR]s)l[RG<P4Hlt.]SIdY[YiMb+:qI$mh>pn'@jX(bRCukL]R<Q=q`p=YG!Tg@!;0mNj7Dj]0(('S+&ZiW@TY
%\p>O#\WWmn,YgeMED(9/Y`XZoq<mt<"D_TQ%?MX+d8I>X1p#Kfb!F&c,@1_u[PUk:Na3,c>XQUTPqg+'AOBY2`LMZpr]WeddOrTs
%0]M3]*@d4dTI:=2Ocl*C\rfHp5AiTG*T%Zk9TA?Nkal@rd7rNm/N`UdZ,oWT8Q(Jc*X5nj#ASB'Yt1_$I?!SQp1I'3EMr.(4Empt
%m%H3?G4b9t=1[/a3^e6%*dlodX7n)$QTgrk-/E6:)(jEbq>!!`EAj]CjSX<G5>U]Q==2?6-V2aiWcN?pGNg7"D953m)Pd>_Eut6Y
%%$J[u=_8e(_0*&)[D1G17lM<r9'kC=kB;N"I2q,(d<3&PCB>&K[0T,)>Z49dR2J`WN!@`*&ULliI'<S^aGX9Be:NrrL)"N-S6qI`
%MsR#o!@W]Fd6Y(oqdO#8)S%nDC9)'W-4>H1:It1uFA8f@[)Jeo7kH%C;<X;1LY1[FQ0\Hik!.QaAdgc6?WIsd<N@?31i^*dqj"iC
%502"3T##&71b1?AAfoDX6DkcNKN"soDo/6Le2mpnDhC+LkA"T'QInl"FR(_QeRrR8J[<CB*44VNI"Q1^D0)'q3Fi6O#4P:QEU_l`
%&pT-f?m=YC&ut3!DUh]rQL91)a&"'pg(g+s;'T7h3a]@R\\m5n"lnR<SAp9@edqSj=S3<$^$2C&olCl:66UBH$)NabH^2"<r_U2(
%-Y#]je^'D>k-QmAR(A@>O"n!F/@EQ2WPFJ"*L+-Hh`iB=5tDec"&>$iT_=0(oD58!Gt[UV3V2Da7q0=]Xb#Vc]ki/:7b=SuV:<BY
%7:`BQ1.)Vhc0+;0$rs(CaYh&n3.FiM#fPIckFCnq/p-S&)Ti`!^D(a5<.AW)ipV^Y0uD8oM<KlK"eU?["Fs"TojM=eG3Nm<^0kK`
%TtT<0(57n/BN*$7b6JK1</J72`U]>A2k4\#cW#S+dGD%NOO.a\l)$4:NpJN?HV_uT9=m*ko@.4EfaAmS8^aVnHHPl7a[jXW4/@ij
%I?ms8?d\_s`T.A)GPVRW&.H?&/#^H:NZe%"Q_P#\S@Vl.0]Z0>8r(=F#GB0-//[sZkc_%`BYt2eX73,8!PM.d-s`t-Wk5(4%)(X0
%;m/LBY4uN.9tmD#%NVdMT2Xn/AL?Pqo^MP;^74>R2cWR`dq,%3W=Eg'8/45npb?I@k'^ai,nqlr6UZgn[\m&]I,?cs8c[N`9q?\-
%nPm7*=[^'YN=cdf`J?4i#4=I=9!_0.O=f1^.\2Cf2d)0!k[XgnP6W.1Vn"\;rL3Q4Ai[]lW+SnHh[1rhAW(M;Y_:HJ!:(<N1*0rS
%<=t"lm?*sXc1D^P]Vh6_[_he>16IV95;R;Qk<'14o:[>18+OH#XNN7heVaAfJfq$ao,r.G\d*DERcn5Np?ZY2jO>f&!+XVl`-`cD
%3mdq+VGRQ;<K@3Khds"=FFne[d4I2l+s4StQ&hI6iK_^IIF3^G+mbe$i$Bd$Db<P91dQ.p&(0d[<B.Ar[n@W83_'9b8.@Ku?49F_
%5k'W=;Mc`[c'p(^/-q2+M+ocBNQ&TuAT_8?7-@.PaM"4Tg`UEEo)&\>I0f`.W6t9@<)9AfK<fOo3Taf8d19+aOPe-)F>t`q*Rmbc
%gDXDi(/bW&d'L2PO_cGh5=Q/&qB7>=:=#Bhnnu%R/&Jo!FK+sW^cnTb8KO-%&3&4q)([eedWkja!!"qBc0h'X.sTHV@QI?q6Uh29
%*qn^W)g39P\jG;hZ9ip"`esbepsQCBkhn8ogeC!H0en_t2t%8aE.*Ml1Q",TF1d?L72(0^<W>c+"Y29MAI*e:R?QEmk]%PP@mW%S
%NF>U6D:(uIcE21!CYjW`k_(7_dkNjk:2%g4hl;l5MAOck+f<u%Qj0A)R6.I'0+ZP![$A(Ve'iCM>2DPF#("5BTW`H_F!Z9L]45W+
%GXpU'ICsG6+c(SbD!K''D]YLm)XrcfI'1Y8K*&6b:-K%br"!eeQD`/E^bdSN0jLog.,jB(bM2^\>,6uODM_,trT6ZO;+1/(BQ][$
%L3c3>H[jcB%J[)9%-0V9<%!!te9S[B:RJsCBTf$r7%`-GT--VJ<k`,Z>"knqoU/W#[cN;;bUG6Uft6k".I*[2o"<oqLuYuV0:YA$
%.W6YYiY5-Y=f'nmMIKOTN9eD2cr7Qhff=aeVp5+Y?T8!s),?]rXJ'sigP70%-9n=C:4[)j[-fr.<9L&&M%ceK\R_G2hJ`h?M8ShC
%;nrF8[B1BC&MZ]fjNT,Hkqj^DF,E/jC;&R?p$u;RG(ZE+6SOBYhU`2ARs=/on/SG%p6BG&]]`hV]_e9,^?N#i:!%@EY)#A_=1Yk@
%NV^!ld-=HVQE"ib`G'+5f0Y#X,(@a?*LqmsL(366.U&$]"0G0Td!X?X64<2q>N8nVH?,;7&+)9Fr3nr?9X5q^"Kp<.Pk+3\pVJ*0
%13BgRV38F..0U'I?7q\G36cq:O1_Y[ngK1D;^*+)*u-=N#lm^TD5"FPm3j:,'->6?9<'hCA+VK=bX4ULo2\!,[=.PJG9emm*-"%6
%?"L_B7&JK:qIemV&%k,!.2u!P15D#f<hpBccTtD-^,Quq3Tucl\d%<+BVnG.UuX0sh^ahYg7"3&@9]%'*A!)?W(BJ,`K()$oKd/#
%6U<9+Oef1ENRF("dI]]p=*>m&1j+@Arp_o#p"*KS(<Aj7,W;7U>O8@<5=Q7TApE-17.au>VN`B^nhQ-1diS<>>.;qM6*ABP1hR#&
%eXl@!UI]6Am3IFe%$hj$D,G]Z6q/dZLZJ*Mb>(6=qW2so</F(&<k8E?g5tO.ckRd.9#i\2pI&^joS.!&-<dM>J-pkX:f9(<n+*I1
%/JUNTT)45^EI)]J*\HI.X+GE`&@*$Im`sCp<0PdkcGiNrQg4IBOd*(mVaAjA,BG`.:n<=\*h2Ma"Z4bGC?nE_DVZ'81(>o$A)gY#
%O%@f@r^EO',XtM6HCW;!EqL:"Kgo_"3VK+(3>B'87s1O>k>;(hd&GIZ\CL:M]#Il!%&+8k&CFAD*]B=sHfq9Ef6pUB+t8Q?888b[
%/'hlnRR\<`r\eq_USP/7$B0^1n0)4,-H5OiD5sb7gAP\5C#f;:fu>m*DQNhR=279FZnM]^b2@Ai*bl_+^"@F`?aFU`/As%^f'N>H
%:X&[VfoPAbO/YNq%<(uAe8Lf2q)&m14uu4]2t>hn*(jkNg!Ula6(QRs[)l<dP-NM$O,f..)D]BS9ATP_h<DT(rRP[J^qT2(.V=?K
%S=EWA;t58;f'X[AB&l7D:S]4E?c>ZOZ)%#p+^j?h1u[YSf$f=rZ-A`U(Gr9@OX_qrSM]o7.Eio<gPHqm^6E)7LRW+eLjgoZ(mOK?
%@O)aAdS%?q%RL^8qb#7kC$ckb-2P[I)!F%-7q=LAAo@Ac3P3$9DrT")IB6:\&UBQQ;&N9P>!fCHIOW*q[hd][[4o$*:sj2C:*(>"
%]%rKgE76TTI8c7Ag/D&Vdtu8IZSr!M$t-$3*rJYNMZIp&]1X.`*I:9=DPp:7Es,'4e41du/3bu%,c9O#88>5.]r?94CJVk5`4M;8
%6YnDQH&u^<Te98U`PSIjSI/:u,u\Y)68c]!)Hhm6eFMSd9'S-l=p.D,,ZimQl[2J+dH0":<sPJ5qd"kJNAeFF%!$W8n<J,R!9MXe
%2P0[(*6:<KGfEu7-:%.!ap<_gis[fUFq1&6M=<f$0h'1M68mTA`"=t.A5e<RG[<U>h$04sONXM#'^W7?]5NMHN8f1G=X\-jEUlS%
%Sf^;b;.U/p/?d^;=QCe4`%0nN'"n-/[_e$]`'8nZ9aj"LWFihg-ARpCg@@_JDi#O[69`L6a$^D&r76QmWAoO+9A)nB8uLH@[\ITL
%X_t4o:.Du.2>iIr?FG=M$bG)=^P$Bsq=jSUA4EAfKa7O20XJfRX>d)4W;@D;#&e-%b#T,/:">-^/Jk%hK"d?<Y$Y-]9Mu[T*d4s5
%Wkd4@ESEV1j'RLl"al)7!eYRq>V"7+$GPku:1U7O5PpIAe,FXKnPfo0[9s\Oi@6_MF[Df5Mc1loW2Q_YBgPuOf@\i<K>/g5b;$n>
%mP\,eR[<fZFIl`TY*<oJ(.hVNo:?PB;nmKh[If8@GImL*ejhB[kZ_>AM,eKJ-d1gPqDhn$SuuMJ%:Y87dD^O_A1r)?$&V>un8NPr
%bIdVDB8%3'!7M.W)0:QN+<PreN*3b_,QpbeZfDWY[ZtDdONdO&krTBbj0fV0345>(i<4Y(QX*$=o!c<38U-I\d0nPr[oh>E:Hs.!
%`rMJSj[")IOj\?qBL!\b<GuRkj9u%CBY.@9X:fH18Y/!Se"j5#J@?)6+DQFnEuX;(dE*!laHWaIZT0V@D>0-0+HI!M)iH6sd9?'_
%TOkgBf4hK@4W7K252`8?\]Ibj4&s'biW5I"&lFQ\>+,j4:Mp)9-MHOj(QMYS<-#[prsp$<N&t=#A;/D@)<hc^TM>,*^D0XeQ;lW%
%K#Jj9Q.&U27$'eRre!P2lY:kSB`I@)Z@tN)324Lp4n$A-[Q,95*-nBuAc>nE^63<@.sVD.s$HEQgZ0.SZ^j^RV5he0r2e*;R!@[n
%o`"+"PCN19As,HC*!RdZ3r_Z)d$5RkX'Y4m>Y`E\iBtP=hPuk=3eB9>fa1h09($1=`*8.`FV[CbD?!l>Od3Um>J?W)Jd)07B%VR>
%HW^da..S&!N]tqX+Q;3,6IjY.BpU7_U7$.RWK>JXc_i4K?*pVp,TKS94I_t0?(t3Hod\!Eb7Tf\l[!Z<`gg_VEpr&?o6-O/m`9`F
%TUAKSkFGgl%'F<92q`UhfX8d,ZbTR`U>4XTk*dY+(/bPHBJl7$\f2P&>'!1h!8,d^N23O=er0Jt&kjbe;k;(Hb;eMEdm`>cHpl8j
%QYQWnfsG1biHsu/aEpiZS]FTpasYnQZ<pZW`p]O[o]6,cIJ@'Ylm+UPJ=Wq#o4WNL]XjZTb1nueGm./Ym#Jsb<4A(8$4ds5`+pX=
%-&10JoNh5uC5H#b+lN!_Jp,YYR'I>#p#HaJ""k24=``a_b99EuePSf3'!6C.nspHrDTXtk>Rt+T?%Gt#)3WT<9D?R-kt7u>eUC/S
%NYLq6B/%QJ)Gc[gDPAe_JJ[Hgg>7&C=]H;l_u(Wg6aWXk5.%`1hNgn]bNG&?p8'3bTuspfWqE=PPWF-HL*o%ub_^pE5.dKL&+mI%
%2cW_3$X'h^8+ms?p2Qh;YuCBsWR/CaE$3*ZoYGJqm];0*\g4E<o+A(>dOUA[Gc_rBR8qFi,t]RiKQ!b`+XFZneg9fcAE,0B<+SqR
%lI='Fgd]J?ON>SFTAEGT>bbW-l<^6_!(0lj_67b49/t7o=iCd'%!@OCHUrl>dhK9bc%bU6!jO%=Y;E_CVmL#0*8COdG^lXj!kq-&
%_o+C/<:4YWD`@(2dILpghcEnQp3i2e[GAPMMW.3Z+7=0;j:t/8R,Z>`$_$/l=_"u?#32@?BmNKsa-2F`CEFbn!aB-5A4jsie3c&G
%D'8(nK<0s,kRX:>'$DH-6Kd@48#;[5fq!rI[X-F/58hu^Td7?-?<e7*4"<tt!bGGl;H.S@%L5#NE!b!Om\X`%j(Uh+m[oRQ-\pPo
%j7oF6CF(WJ0bMpK>&KSd+NT`HQ3oXcE@KH:;kO>QKVH83ke^rO;3K>-+rq*ti]%N7"qO];PV;*N\Q[(J0cHHV3ID>FPt(5F4"EO,
%Y3=hZAo9D*!dU]l93"21CRL@1+f;a9XRsW6Lu!dI-8#`Ab)*-\-5)0XbmO`40#M%Rj-9ua]3,QCO4P#Ic/)lE\]lN-:#0k/9L5<[
%VYS.;)>&cNR&Z%VY0#^eIL%cb8Jkr,5&m"E$A!N/9/A#L+`.qZZ9)`idT)kiU?AR>/@e,\4Dp2Q:e'#Y&+;IS_c+:26NSu/P0V<o
%m=5[l'YArL`L!F#^n39(dU(dcs.j(#?caCBgP/n$?cYFXI`R/^%9#XNoe&ng$skg#oqXBq$7ha]+"sm")<BV_'XLLJ%o;Li<m+H>
%U_N==2;RP_15lJ:cr<h!8:'==e=';_17"HGjFO!#Nf"/ie[MN((n+`g<@^'@WFL]XaY])?91X_D&Jd!5\=jC)T-;R`/7rH87:T6*
%gKpi(UA,4;^lF)K5cU@`ATZV!>6[H.:sY&.mU%Rli29D_gECJ[YKYH)j\_i"4O3hfaiVUgdk9*FbYA([(d62>HS/FO[Z[1_,>n&o
%<At1SF.7Dt?@(dp)f-cqGT@:QXMsFKgpW,EV0#n5:8maF$+X;(f3'/72Q3\#R]MuRbkeGU0-mkqT-+`?b5e596JtbaSZ"Y"IQgc"
%3s^?_Fe)OdMB(N<\n>q793(.-%3&0aD3#/s,SFU5)%%ubdnAU$6Fl[P^eh(<PRe_=d\?P_9Cb*CXTloZ>b<^kZmrikaC>LJQ)^!'
%=p6!/(3jh3'YNp9Pt:3M2,!b]BhigF>8CkG=Sc5:G3?)<Qm_roju&GClk5oPYQ!)b.Ebo;-E/pQQkO<fNd1-MHPO'MaKKUKSa']/
%$"<45a+QTgOu"2I)X.^!H9=$FTc3+]n>*3[$Ai4/hK2jk/:7gV!:H%`>T-KF]V:,&.1U#j=F@=,VaktMG$SAD$#u@9<?\h(MOU@`
%'mH:aV:_[dap+WD;i-f\hX\>_f2Vj*cqQL;'crC.5_PcIFd$2d:ED\Kk/+Ff6\:A4eN'j*+mWoa*=P.uFrMuG<<'R+Fa7Xd+2W'"
%/UARAoJ/GJX"uX45fWF4G1EaF=cSl:dT!h-E!+.S`0gPs6b(?qlm)$B=b/IS,+(F?dke<.Q2$?:N)YC'-2HK"O?.=o*2)Km&-M<?
%$hC'o)U;+ULQ=+/T)FS=.hR9hQ%O-kcRnPk3@$B)]jdL>mk$K&<>*A4#MDNuR1UGdV>g%U+[1?m:J&0aBOe2%fV,_e)(ZjUaQK?%
%ag+:,IH)f9;l8V1B`l='/#7oOq4kr>G"b]-QRdo]imQoY$rSFYf9Tl'4>3'U2?qlq)7L/8/VNPq1cQ`$j$Z@63,4LJo[=a3"5Mco
%O*QfK_t0jTW^>ZW"((e%)I0=pp@X`tIrtn;0DYTK2n5HZW$D`>=2=<rhY?3qL>bc33(Y;Y5:juo6FN,n:0WR)R95bPb';!9c-;Z3
%&t3(T0'1d9'D:HT4WMFbs7G_DDgq<A`X*"XU_u7qUo/BIHb.4u]N/2i?cat1A5ooO`o`,*jN)P<=?\0TY?(rB:JFt>gp!9$BF\dh
%;L'Q2-Ym/^?[mMFlK'NDg)eUrkHk"Rh#C"YpT))E>lK4)EW6sVpb1Y+;;<6ffri(\q_+3-TWLr=-76B+bp-M%.i(FKD<f<4lJhd5
%e%>WBs5n#+3\Qp`N[iY.D=Xopij>S1`jBYiEYY&dYBjgTS+"reo,2aK=!\j:Rj1"0WQ8q@1KcQ"2;cfG"F$[SN%`l6#3'o'-BaO3
%9;s1>n@/i/<7+<P6/0q^O@L'+D:*2tGa,R`-'Mr@'M[Q4b/78V<$DB?]I#\gF_RiI,@TNj<%e6.GaVK.3J7jPi)C<*R6@JCR-q.E
%Sr'cG6r"G8'R>1g'f9?76F-^gcUh4.,RVV)?)ISnOh8?W4Vp0\`N$Yg50"9mP/-iMM7->/1.c.DXh?.gRlUH!1oY(AWR_jMUJ60"
%XQi^h7p$(k[ReNV&$l6[Q,[#6TA['lm5S"F]*`3DF4.#QhR3O,!jnaAjL\^4@iBQ9A<e.#>r6'CI!9`8<+k!J7>n1_)k&,Z?YD0s
%e_@51RqrBf1kqst+^QLYl>EH6AEo*GlP])fm5Db*6fu*tlr<tOnOBGk)21EmX[WDS0/Due'2eRaaMQS\Fso/kB]'W`Y/:8g#Z9?>
%74Ntk6Zr2q@](Qp_u`S.;dsE]!8GncmlBCj[7+\M;`CWh?Qr5(%9qQt<T7R4VZ<:/MXf;(d97"jP)??hDI99_3Q1><m=*m[\*YnN
%GX7kpb/f??C9!'jX`.+s&!N+,V`<Cqm-uqg-H_b#U3c$!0[U'jeIrC2Y#Q[rj[t8/V_+FM@"XNn;LP*`H-+)Go&Y4C.%8qIf5WsC
%fr+c7J&U826Ug:TFOp6`c5J[B.bH"r"V!<qc0jcH=i5U5I9q,W0@?>OT;k!A+0Ko$Qcu)YNF.22+o%D[>3HZal\(33MAmRlkFLrO
%.Iqn2S"<"?#nknKIn[[!A?$[VF\#mjNiAMQ#T^hN?m>2B`Ut+,T6$cL&(?E#7>_0WGW$0p8QS:[$P1F`d+jl++h`KeUVfAl9?P0j
%U^emIceaMAVeaF.oh=5:I4%u\I6K*23SAOhK%u9=jj)#:/+dgNVs8l;^>Z!lPq#Tq.iONhgmY"7?)dPH-j)2-HO"5MBVE@1;d.h#
%2?>+&H<_ff1``YcA>2ma'/SFMAs\B_*2$m.iLmT(oUr&KM+ed\E+Q:8RD9iM>2&t$V8n+"?>C%qZs@AOg9Hn9p_,.-99B#VC8Z_!
%;JP`4#EIHVacsJ8gfMF(8W^PV0S8*PUeRuHY2-u>LD$$UL/N^HXL!dOmcO`58WUTI7Ipk2d86g9c-\/i,u6[W>YEc2M%U=N2;^SQ
%%fgd.QE-8#_V7Z^MP$4dhuUoY&:>f^E?)-L;S>]FF/;&qSut`mBf_UljR/B9,#_&5A&IFpRfJn5k)]al<0'rCkFKus%.XB_N`WC5
%HDls_]Lcs]Qh:DSL^<pKh?0`;=fkurk?=A0GsZRgCop2SPOsKGaQRnf8124V>#fb"GrHd'0"+`YbsO.].61jk/Z#6hNmB%>lX"T<
%/YU`^F*(W]!V,.qk;!8F4\uVl$(1.KRfqd.-H$*6+l*>Oqe;kOeA&kD*ph[>l8Oh<;HC0_gB:31A))ui`&\4U6r-itNf6C5MiafO
%l5JRNeA^36)O9M")-hN37Eo869a<c'jLSA62d*QA$SEQkKe\27S(9-Lg:_*1Rm:a`liBf\Hlm_`<(dfr:0KN^17YhWg[M^_T2FeI
%'5f2cQ4ZFdk).WjAIt(:VKVAgXs>^5dU,S&a@aXnn<h=)!,PB8]bJPnA&M2kPJ&(S,T6]S!:Le._,ul<jdI`?l;sD\iY?YV[0U83
%/H9#MY:&[5Q/Y[3ZCHJsdSQ9cL\Z>8X,1!Oi=IK'Wq9dgq@[/L+cE5!Co?5&K%@q]V="+d,gcs6>)kH<cL76KW,+"HWQ/MtX)O;r
%N[0`3L)I%Pod.[&LE!CbVR1POUr0Bj7&ddhZWp*#Jpi/*?j:l_O`1?];"ko%?INU7T$(*mm[A)qXi4+@h8m%BEOD=<L)JA)p3BoS
%]2d^S'58:5eh9sU?uGo%TSgXuajAJp&p>Hq&//_7C@PsoEhtl1/?@fh!]H/-Su'qjmR!UO#d6V_6825K>ad/7rnpF49'eeJ#=IS\
%Qou[-NS]8]NIJU0j4DQ+%:/^R.[QJ?Xh9pdP[j=I]')$>+NYr1gN7:FGXc*GLsK@GKj$tF%'A^*-XKh53&lbo"]]e!qK6d2QB4RT
%R3Y)[e@iLHMM<7#=@qSV3t)hCFh\O_HaXT8a?93.+*>!]BH&Cs,rRBscuSg.0.'S[#aNud\dnVp,&,(Uf'aaZHtjkRJ`>lW.C.ff
%EacCX&mD78"ckmc?"8S/9@X2BKUH)\%q3ogdmIutfVH5>c4A+N2Hb/s!aG?BUc<a^TTsaH;!2?_&2Bci0]GCT.'FVNQijIjI"a'K
%FkOtuFA!pkoh8,R$eFf)!^37t0K`e3PFV9ZW%i:R,$eT\DPY@[`7uX4>B.,dJ"<(.#aQt<^5T2+h8C`lc$fLeV@m&M,YSm"p:-NT
%oqjmH$g.LT)7->ef>MAt5a;l2OE.GQeFf3sL$+J3LZY1NoPC292D/(U1SsG'@EC+VEXHZZA?W5@e9qZ72rSWqA6B_6^UkKk,$NO9
%-JV+"K%N1_&+.#q/7>-N8OfJeU9YYf*1?X6m']!h%fm)PP*obeqp(CjqocI\"GMWqpjM68b`d^!&OMGWpmV]:mYhc8V$fVjbtf0N
%!g\Tnau7G5>U]efD:a_"+`(',ca3()1pU!Sob(06>?Dc<ChXJ%Q9O8j;<^_N8k+i+Z/b<1-6"Sma-3i@g`W'NdhVKlc#17i`bR.s
%[<_-ceC!uB_V=/#H!Hr*`X&^>^1f/[bn/a1XaAD='1']XlJX_pRLQ6[6qfkMR![4\Bu7'q4Y89k=C>P5'U0H2hJ^@2T)#WC.fXKE
%M"Z$q\JA#Tc.A4cP\F/jd'sl\o@O+WE#oKi#.:9]_lCVp(-6qF75=:U#R[mpminOULkPMi"6;Mm,8*FeOnr9]-l3+):!qHS<0NLC
%4R'G#$Q*ntA(c5+FZnGoGLqSBk)02O#^[(#B]Zt!'F79%@%b3#.Z3EMBKg\6n$3$s]R<kB8Xa)HK."CqBR5cb'$pPj^+=:KgQiTB
%9'L;)EHuGnaG1!je88u34fW&5S'?31[b+CD6D:t;GmO+u,3m($[)p[@^HC5K(PC;mKdPShL4p)hMi04T'KcQ'S#icoXOU0:4+*G>
%eW<Z#Td]Hsl@@.+asc]X_DsE9BQ_TpX8@_Bo>Bap3qcGK6d=XcKoF[KZoVD$g?`%L!5Rp5>d?_o'olH<5'BqIB8PdsjS4BEWR(@M
%OgA8N=qUcpp5rSUX;h3]/:8D'kB?Ve\)d)hL!3s?/\.YD\f$S+p/a$Fbih+cAj`O[Lk'cMdlXsJo@m0>6=?\ce5N8NQb*QTW]3+a
%$TI+DY\WDB!V1Y$BsNH`dJMlgB0[0*8J<:XF7XGEQ:-SGG.cac!EiQ-qbo?DiPXWncuSE;5n.eg,]'F3p-HAkQ,/h9BtAs#"aC6]
%BC`ZT!!?\_6qNaaAElbgG9sPWr9dK/7Z6-qAD+]UXdZ1c3F$0jD`1C;K3YEoX:#p"1#6WE7UrB3'X;6d-c!nXmr8=odG[Sp*`D>q
%S6Wc'_N6X9L+<Nk4XYS%0^&ebH:U#p1DZ*RS1i'(:a,QY?^^&L?F"S)\--a5(d5r-/O-m06]OUZ_Q^(VpWnQEO*0t%*,]W8*!Nif
%FimYV&XuE,#Lud+"E^q)UCe[rUYa-/nc2ln**(^!iiHHmW_kr<XT?Q<_3]R!oA>m?G`!1p4,3(G<o!.I(cPDZ\UX\fB81CnTtI9O
%>f]L]&<G#0.SlpdI]^=u,uD^_T-)AD*@1[I5<i?AT2RR90f%(#-A*e*oB"TcR'%]3Ohf7`f,jA50&]W%A60c)pIr>c&f?ftY:RHT
%.43Q5'\n'gftl=7&lq6C5'?N[$02,P;>Wgk3N>iU!;S<l`*o?X6*hk0qrc/9W7#SHQncrSqmAh\7_Flt9>EOo7+&4"hRo\bjpk-q
%*IHnPFJ+n/5&A6p[`*\nn'HIVRij[2<"NItgl8tgd%$l(W3kuk3t"Ka*1<516Fc&AIRuj]8Y?R`-j#oB-m[U;3MA2s"^3sA="Ci>
%;hHAR;t\Y!;VZeR7W?.7V0Z<9E_)aLWTIs>Q5#Ndqte9&KJZS3h,Gs/;O8<!c-))AFe!p:0/Sl<6Sr_)/(uJ(At&hZ34>E_W!Y@I
%K]VU]<)\#\3m\PZXXFt&\+3?jc<g'/"frj;*.HM0\)DeV5(01ilYQOm8Rh^,Hfrjm7rC`brP3f9]CGFrWMFES0,$-m^k60[I4u>p
%#m=&.6UJM8FA>h-V0hY51LlJ/K:0u'geYC`lIMT-?WCOTLkJ*]lUm"*'+=REE"F":gYSI1:l:('<eOh9,O3,jiM;\$aASLh@SD1_
%ln]ORa#_$Aj9b-q/\8e04:5[+"sYQdL$Wo0CL&g!C*Bak>]eTdE#).H&<iYa=]OU[ob_Ih^9#*dAOafH3/e;G-?>Ri)=O4hEm]_"
%UeX@q)F%:D7-",drVs;,Oo]&+fVQc?O1_/*&"@B,a2-e+Rt?2u:=8TjPE.fbNd@ZTSHk9+ql^%\_n.&%/F_9cp5Xs+r/U4Ij&=9N
%n`F[Dj/B20>$:n[7=uFQ^;=@Ogm4(8RW&otVJKBq.'=?0`"8=cm#bHC28E4Gk6NNNlS9"Z#Bi5eB(+W.=?;#T;MqUG4R&>[bSH]O
%'3J[#]uHkf./(Ven%nKK[]gd],T:SeK;0g%-L/k+F.L]qr%@U)KE8qe[Ns<(R_u1)%o:?MC`S9s7qglNW:-J^)[7Xd/G3>^)9>TE
%P]7mVI.IeF#.k+-ZPTK4kiH9l?A,dqk%9M-5^<Mf@V&Dt!1@4^>.'E`dj&!2p%b@,?rVD2S%&.U)*]KRp'&lUkl^1U!pAE]FOMn(
%Qt6u)K;#JrA^%kDAmYmT`fFXlb:gf$$.IV/6#(tpYh-1uiLnEQn>OG[<>./%@O&K&=.D(!OZdJcRYdI6Y$aldlb](s^$hHM&Har/
%?>SA]]o'1bD9)#0VmMj7"*rI]lbLad4l"*=c%HBgZTE+2ECN+WC,EFLM!_/4ils<&_CR+$0MRkC(Kdpop>&Tq%IAHY0q#VI?nXOC
%fM2pnN9&WTNH`MI_.31\MWLdsR:SNC^k'j;Ec;I_Otsj4L"mg=Ab1hFL4d"D@j1#[B?Z$k*E+1rpZ-WqXt,aWo@Fa_hqjR+h<m@-
%jC:`E,'+#!HI>?KaZ[I'VrlgW7o<b__NgsL^?Lr)E`\t8`W3@qmquceCH&h#Qj`0TbOgBch+WGgdQiFNLf%u63!c$$K3gr_V9I^*
%[l_No2TO2Z;8_&J@q\WD$1WnK^ZOUH^m:m;`C/c0MK(`jVk\^4.s_FTjimf]Ab=@0>H871%A&Wl"XFQNO2GR/@2PU5Z1MJE52$KL
%&PRhK-;gU1P_eGPO6dS!6bh!(=[B2B3G50Z(.?j*3Bu.J?C?ZQ?%_acm$!EQ*)%3.N\r-GbS2*#S%7c\ErjPLITF5SK[M!/\i\>0
%G)]\>a5!>Gij]YY_lk*+>iPCJm1u]FUD'pX1ocR-WgU%)4NluVfH/?#6Jl$#ed6uuK76A6UDlK$6JPJnD?f9Q,X7:_Ju_j\9#;<G
%j/Q]'G(WqM;)T/;5o+-ne:j%p'3dgipp=FErN$*FSe`$0gmT92S)VL!Y4\P@dN]V81s%Vb3Y@[V")7+j'[>jBYHu&\&"i6!Y&jj#
%)Ker9r#57VlCq3NC2b?![3sfSrpOrkB\,ncOPuF08?aJjO):!DUrN1sAi(NQ)9"a#EonWNQOEB<("X$(8?oVZTf:D:'WkW]+Q7Q\
%196^$3;6t[XtS"Llu]njYW6)Rp4Sj0"1P26'gd#\:IV=%\9-hL^Q53D>>k#,BbRU;Z8-82PrbMXQ)M62>j6JKFFk&9jV$K>V)UT5
%ba3"7l2>XTLTq";]9]4&==0'ap+O^]EKp1`S!no+ED5XXF<iT<a@]XE""MuY<"89sNoO3(r&ZcrNgDX]&ImZYU?pVdSC_\gl1X7#
%5s?G[eATHf-2o;bFo#k"J^@'G*/RUW&>IlAf?q,L8fQlD!gONk)HaJOdn*];:=6eqJRVK@9tNPr>J`qbAB5W.J*[R<a`LC$'T?Kb
%l4uheEr35P-,6sAqOlK5fgV';.]P.Pe67"T*o&Tm!k;+^D<Z!PNjk,D$.9\K8"IY8dnu:.58`PE>osJ]2SLJrdFCBiT_>=VeK3!A
%5J:1aJc\hl`L0#L@V_G(KbX+c^HERW:UJDYi.iaCX#0T14Y3QIHN8!nqG-<kN<gN?G`>^p%%L^W4q8*]<<s(Pqk>r1,6la9UOmn=
%2keO5oij[>24CcT#hPD>nrh;[3sd8p1"S7c2%i[JG1E8m-sUZlY?fRh2AV;nO[X--%`8VPRE<\h(f"a7hDj[-*:@62IRMLFP#T>(
%X*^iQ`)1`9g3&:p@NV,micB1[].S2,mlDdE<I_3'@.]JLkGDLR&RtlgKDC4&\kG2hSK>Br*%620V`K&nXC_)\(cW!&%r`K\U(pZ5
%#=jnZQ3/g2&Z56E$J4h2C:7(B`o/(04OVUB=jqma^-Q3\PKEMqY.O((%0NEYf=q@)JJVk[T'(RG(/dAU))Mba>+^`@8*>%DD$ic5
%6B]4sISS%.*<tc'7@iG3qtu"b;.S(_l[jL]0/D<5`5=!8F0@Pn7T$VCiA,&k["WQC_+`e9"N.W[]a"eqO:iR?.>e.PlT4Mu/f=bQ
%1Jo10:=<ha$=H?gNdBM.[0JgEid$1I+o?;0GQf,ip*Y)H2Wq^]&S/ACA]/,A-)B2=h#Tn+%]Span/`pN8?qOCApj"Oe&N>O%*^.6
%!'9Deg2W\TfVs#Q#2M`<BPC:%k%gVrQ(8uG(e%$V@cCr592W#k5gcD%$ZHa_j:#6+&e>b<l$OF=X]Mm6E.ZcKW\'7`*!=52@CV6,
%p_1u1d*>ojX(+1V$#=/XaR&.u)lMe:+2suEr=K1./dBT]1FS[U0bje5\<,NpS9H)"oh!i!=eo)X:(0L25E;B$8;^*A\jf/`:4W7G
%h<;])EG'A?F`7P`Y.ltt=XR$gK!_9+#>Wfh_q-`&-Xq4HQe3jorT*5Hqp87jjoO$>ksY\]"'HudgW%b@lQKL\0]sf>$3n)E2f`Xs
%[D:D!,Ikc"KO#[4*%htFT86d>1LeT#JW6p]fTRCuWQ(\T]!%*X*Ha%T;5^p\RK+?0UKA44LqoC$C*"r</jh[K<#d?q:EkM4/$o)'
%,I,h3*uf'Hi<cuu5Dl%I"p@HV6U.`]b6lIm=&nhu%Cf0P<Yl+(ii)om,kf_4YF1;>pU+NQq52/\7bf<_h(so2%5B8eOH@BXr!!t3
%pbN8rO"[d.TM9G]%iEWC7I"G+,D>M\0@$P^]A^:@90[<F#'6R4V!k6$4mFd80PO;SlQj@r2J$,<77M]$3WhE_7M;GVr.:g=D[!O.
%Na%I%qOqm="*s3ArLF,F3uUVkC"u\+kdnKR"RA>@<7Fh1K?_j\Wn_WB*.;FH^J<oei5`sI/oVq%0l0%(K[fBk0pk=F60$](SB)ai
%#%7[sOnue_K=qBZ89*BcqX3<Eg+_,8OGq9AFZiq@_5U?i=DD5R'Wm,p?R?%*fu<Y.7\V&/0P71o.i4=*MBrdlc02Sg@uMFS,7$fA
%0-1KU8'sX.,@.2VfX?AW*n(N@Qd:eaNpl"+<GZ79Gu"*V*G9NfBfHAH1f`ZPJO0"gWM.=o/`aR:/Sa*%6sb8JM;F@qJQSsY3T3Hm
%70D-H#Y@nI.5sV85E6g\l9.o;N(%2g=lVoZ(K5o099b^LXBLVfVSO8rG?>oR!$13[X,t?Q.^r?q9"(L`#1Lfb0P_h2Vb`N>"bf`r
%Aht9%mf\mT@u7@fDAsb),;_?Un[na<K.7hcN;55u!tD`5Lsl4W+n`U@2`T=VE8KB&k>c;=dV[;Vo07C-6RXZW9@jT[?t5!ORE<Gd
%R)*pJ^GYTm>sZNH?4:cE&3$,>:@)(Q>>n`%AZEt)fAF6o)IeIPGlH&C0!Sd]mY2XObaWtKYgtIHJ8oYXE]pPK$t4J[:Xpp(U!*qF
%#[N`O1]89u-W=@K0rV<,_DI:i*\;2NKu*G8fm>p2OO01Q"2J]b&2auZfU*'*EMeKgH5UYjBLm4+mdV*!_I(Sm)]+7Lo&fA4e6ahU
%TFDiLUl2us'6N6PMN6%*CdEK$MM&7lXJq<2MulS$YXXI6LcH`:),'%^]g5_^Ts&ruiA]\"5fMi(1G5rIqo_94G.8)p/"([22E)rZ
%?/Eh&%kbNe7)Z6aC;[k@?Akg<Q#m.6eeRj:U8/<Z[lfJt3O(I-_?V<)5O!n2qPA[`\a$f!=AT<8:*B1YWC3M^@a@"r)$jMeg=KE@
%mZ$,D"UJE9po]`nJkm`$-pK:=6O3A0;PR)Y?R+ojnZL!93sA\04Kaq]9hOgMjVEUKo_?^\'cE0a&f''F`R!\%s/i)fK3\d;m`-[V
%@2h^jPqO^B1/f8<)"rk\N-mC>)k2tnR?9]j1NK,0PH\:`57>>;K!9nXS::@b-*11R,M[qfNkW,5n[gj":,WeIg2?',B-t3&VT"PE
%<YYRjh&#c!FdZCQDiH2k.R&'+s6,bt'pIu[8ONORnp5cSm/HU7NPIo.T$Pj45A-8c6_'bPK0LH%rH4G)%F)1uTBl">fle4f'+oE(
%%X(J[WM'tGBT:R:)QXsHLs;5.QKSu9UAA++@r`]Q+Z?j\e+sLgqci-JMcp/Mdkj<Y1`AGJQn^I)/Z=pP3KT6V)FL'>VJMm>l-dbE
%4*7$-0EpRYBa5T'([#8d5I?7*SlXZbIqdIUo3j<.T0&YDd)YAEJ(jnqh:o\/^&$XPGLpUH?Mrp8S(E.<pZ`k!L%tA22t(,PkOmre
%gUA$UfDk.9FF!KGp%s7=q!Rh:r=;-l(CL.Tr5":-hu3A3hgY0H."#iq~>
%AI9_PrivateDataEnd
